@database gcc.guide

@Master gcc.texi

@Width 72


This is the AmigaGuide® file gcc.guide, produced by Makeinfo-1.49 from 
the input file gcc.texi.

   This file documents the use and the internals of the GNU compiler.

   Copyright (C) 1988, 1989, 1992 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled "GNU General Public License" and "Boycott"
are included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the sections entitled "GNU General Public
License" and "Boycott", and this permission notice, may be included in
translations approved by the Free Software Foundation instead of in the
original English.


@Node Main "gcc.guide"
@Next "Copying"

Introduction
************

   This manual documents how to run, install and port the GNU C
compiler, as well as its new features and incompatibilities, and how to
report bugs. It corresponds to GNU CC version 2.2.


 @{" Copying " Link "Copying"}          GNU General Public License says
                     how you can copy and share GNU CC.
 @{" Contributors " Link "Contributors"}     People who have contributed to GNU CC.
 @{" Boycott " Link "Boycott"} 	    Protect your freedom--fight "look and feel".
 @{" Invoking GCC " Link "Invoking GCC"}     Command options supported by `gcc'.
 @{" Installation " Link "Installation"}     How to configure, compile and install GNU CC.
 @{" Extensions " Link "Extensions"}       GNU extensions to the C language.
 @{" Trouble " Link "Trouble"}          If you have trouble installing GNU CC.
 @{" Bugs " Link "Bugs"}             How, why and where to report bugs.
 @{" Service " Link "Service"}          How to find suppliers of support for GNU CC.
 @{" VMS " Link "VMS"}              Using GNU CC on VMS.
 @{" Portability " Link "Portability"}      Goals of GNU CC's portability features.
 @{" Interface " Link "Interface"}        Function-call interface of GNU CC output.
 @{" Passes " Link "Passes"}           Order of passes, what they do, and what each file is for.
 @{" RTL " Link "RTL"}              The intermediate representation that most passes work on.
 @{" Machine Desc " Link "Machine Desc"}     How to write machine description instruction patterns.
 @{" Target Macros " Link "Target Macros"}    How to write the machine description C macros.
 @{" Config " Link "Config"}           Writing the `xm-MACHINE.h' file.
 @{" Index " Link "Index"} 	    Index of concepts and symbol names.


@EndNode

@Node "Copying" "gcc.guide/Copying"
@Next "Contributors"
@Prev "Main"
@Toc "Main"

GNU GENERAL PUBLIC LICENSE
**************************

                         Version 2, June 1991

     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     675 Mass Ave, Cambridge, MA 02139, USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

Preamble
========

   The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

   We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

   Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

   The precise terms and conditions for copying, distribution and
modification follow.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  1. This License applies to any program or other work which contains a
     notice placed by the copyright holder saying it may be distributed
     under the terms of this General Public License.  The "Program",
     below, refers to any such program or work, and a "work based on
     the Program" means either the Program or any derivative work under
     copyright law: that is to say, a work containing the Program or a
     portion of it, either verbatim or with modifications and/or
     translated into another language.  (Hereinafter, translation is
     included without limitation in the term "modification".)  Each
     licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based on
     the Program (independent of having been made by running the
     Program). Whether that is true depends on what the Program does.

  2. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an appropriate
     copyright notice and disclaimer of warranty; keep intact all the
     notices that refer to this License and to the absence of any
     warranty; and give any other recipients of the Program a copy of
     this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  3. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands interactively
          when run, you must cause it, when started running for such
          interactive use in the most ordinary way, to print or display
          an announcement including an appropriate copyright notice and
          a notice that there is no warranty (or else, saying that you
          provide a warranty) and that users may redistribute the
          program under these conditions, and telling the user how to
          view a copy of this License.  (Exception: if the Program
          itself is interactive but does not normally print such an
          announcement, your work based on the Program is not required
          to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Program, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Program, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  4. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the terms
     of Sections 1 and 2 above provided that you also do one of the
     following:

       a. Accompany it with the complete corresponding machine-readable
          source code, which must be distributed under the terms of
          Sections 1 and 2 above on a medium customarily used for
          software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than your
          cost of physically performing source distribution, a complete
          machine-readable copy of the corresponding source code, to be
          distributed under the terms of Sections 1 and 2 above on a
          medium customarily used for software interchange; or,

       c. Accompany it with the information you received as to the offer
          to distribute corresponding source code.  (This alternative is
          allowed only for noncommercial distribution and only if you
          received the program in object code or executable form with
          such an offer, in accord with Subsection b above.)

     The source code for a work means the preferred form of the work for
     making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it contains,
     plus any associated interface definition files, plus the scripts
     used to control compilation and installation of the executable. 
     However, as a special exception, the source code distributed need
     not include anything that is normally distributed (in either
     source or binary form) with the major components (compiler,
     kernel, and so on) of the operating system on which the executable
     runs, unless that component itself accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are not
     compelled to copy the source along with the object code.

  5. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program is
     void, and will automatically terminate your rights under this
     License. However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  6. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License. 
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  7. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein. You are not responsible for enforcing compliance
     by third parties to this License.

  8. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Program at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Program by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system, which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  9. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

 10. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Program
     does not specify a version number of this License, you may choose
     any version ever published by the Free Software Foundation.

 11. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to the
     author to ask for permission.  For software which is copyrighted
     by the Free Software Foundation, write to the Free Software
     Foundation; we sometimes make exceptions for this.  Our decision
     will be guided by the two goals of preserving the free status of
     all derivatives of our free software and of promoting the sharing
     and reuse of software generally.

                                NO WARRANTY

 12. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 13. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
     OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS

Appendix: How to Apply These Terms to Your New Programs
=======================================================

   If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) 19YY  NAME OF AUTHOR
     
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

   Also add information on how to contact you by electronic and paper
mail.

   If the program is interactive, make it output a short notice like
this when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type `show c' for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright interest in the program
     `Gnomovision' (which makes passes at compilers) written by James Hacker.
     
     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

   This General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Library General Public License instead of this License.


@EndNode

@Node "Contributors" "gcc.guide/Contributors"
@Next "Boycott"
@Prev "Copying"
@Toc "Main"

Contributors to GNU CC
**********************

   In addition to Richard Stallman, several people have written parts
of GNU CC.

   * The idea of using RTL and some of the optimization ideas came from
     the program PO written at the University of Arizona by Jack
     Davidson and Christopher Fraser.  See "Register Allocation and
     Exhaustive Peephole Optimization", Software Practice and
     Experience 14 (9), Sept. 1984, 857-866.

   * Paul Rubin wrote most of the preprocessor.

   * Leonard Tower wrote parts of the parser, RTL generator, and RTL
     definitions, and of the Vax machine description.

   * Ted Lemon wrote parts of the RTL reader and printer.

   * Jim Wilson implemented loop strength reduction and some other loop
     optimizations.

   * Nobuyuki Hikichi of Software Research Associates, Tokyo,
     contributed the support for the Sony NEWS machine.

   * Charles LaBrec contributed the support for the Integrated Solutions
     68020 system.

   * Michael Tiemann of Cygnus Support wrote the front end for C++, as
     well as the support for inline functions and instruction
     scheduling.  Also the descriptions of the National Semiconductor
     32000 series cpu, the SPARC cpu and part of the Motorola 88000 cpu.

   * Jan Stein of the Chalmers Computer Society provided support for
     Genix, as well as part of the 32000 machine description.

   * Randy Smith finished the Sun FPA support.

   * Robert Brown implemented the support for Encore 32000 systems.

   * David Kashtan of SRI adapted GNU CC to the Vomit-Making System
     (VMS).

   * Alex Crain provided changes for the 3b1.

   * Greg Satz and Chris Hanson assisted in making GNU CC work on HP-UX
     for the 9000 series 300.

   * William Schelter did most of the work on the Intel 80386 support.

   * Christopher Smith did the port for Convex machines.

   * Paul Petersen wrote the machine description for the Alliant FX/8.

   * Alain Lichnewsky ported GNU CC to the Mips cpu.

   * Devon Bowen, Dale Wiles and Kevin Zachmann ported GNU CC to the
     Tahoe.

   * Jonathan Stone wrote the machine description for the Pyramid
     computer.

   * Gary Miller ported GNU CC to Charles River Data Systems machines.

   * Richard Kenner of New York University wrote the machine
     descriptions for the AMD 29000, the IBM RT PC, and the IBM RS/6000
     as well as the support for instruction attributes.  He also made
     changes to better support RISC processors including changes to
     common subexpression elimination, strength reduction, function
     calling sequence handling, and condition code support, in addition
     to generalizing the code for frame pointer elimination.

   * Richard Kenner and Michael Tiemann jointly developed reorg.c, the
     delay slot scheduler.

   * Mike Meissner and Tom Wood of Data General finished the port to the
     Motorola 88000.

   * Masanobu Yuhara of Fujitsu Laboratories implemented the machine
     description for the Tron architecture (specifically, the Gmicro).

   * NeXT, Inc. donated the front end that supports the Objective C
     language.

   * James van Artsdalen wrote the code that makes efficient use of the
     Intel 80387 register stack.

   * Mike Meissner at the Open Software Foundation finished the port to
     the MIPS cpu, including adding ECOFF debug support.

   * Ron Guilmette implemented the protoize and unprotoize tools, the
     support for Dwarf symbolic debugging information, and much of the
     support for System V Release 4.  He has also worked heavily on the
     Intel 386 and 860 support.

   * Torbjorn Granlund of the Swedish Institute of Computer Science
     implemented multiply-by-constant optimization and better long long
     support, and improved leaf function register allocation.


@EndNode

@Node "Boycott" "gcc.guide/Boycott"
@Next "Invoking GCC"
@Prev "Contributors"
@Toc "Main"

Protect Your Freedom--Fight "Look And Feel"
*******************************************

     This section is a political message from the League for Programming
     Freedom to the users of GNU CC.  It is included here as an
     expression of support for the League on the part of the Free
     Software Foundation.

   Apple and Lotus are trying to create a new form of legal monopoly: a
copyright on a class of user interfaces.  These monopolies would cause
serious problems for users and developers of computer software and
systems.  Xerox, too, has tried to make a monopoly for itself on window
systems; their suit against Apple was thrown out on a technicality, but
Xerox has not said anything to indicate it wouldn't try again.

   Until a few years ago, the law seemed clear: no one could restrict
others from using a user interface; programmers were free to implement
any interface they chose.  Imitating interfaces, sometimes with changes,
was standard practice in the computer field.  The interfaces we know
evolved gradually in this way; for example, the Macintosh user interface
drew ideas from the Xerox interface, which in turn drew on work done at
Stanford and SRI.  1-2-3 imitated VisiCalc, and dBase imitated a
database program from JPL.

   Most computer companies, and nearly all computer users, were happy
with this state of affairs.  The companies that are suing say it does
not offer "enough incentive" to develop their products, but they must
have considered it "enough" when they made their decision to do so.  It
seems they are not satisfied with the opportunity to continue to compete
in the marketplace--not even with a head start.

   If companies like Xerox, Lotus, and Apple are permitted to make law
through the courts, the precedent will hobble the software industry:

   * Gratuitous incompatibilities will burden users.  Imagine if each
     car manufacturer had to arrange the pedals in a different order.

   * Software will become and remain more expensive.  Users will be
     "locked in" to proprietary interfaces, for which there is no real
     competition.

   * Large companies have an unfair advantage wherever lawsuits become
     commonplace.  Since they can easily afford to sue, they can
     intimidate small companies with threats even when they don't
     really have a case.

   * User interface improvements will come slower, since incremental
     evolution through creative imitation will no longer be permitted.

   * Even Apple, etc., will find it harder to make improvements if they
     can no longer adapt the good ideas that others introduce, for fear
     of weakening their own legal positions.  Some users suggest that
     this stagnation may already have started.

   * If you use GNU software, you might find it of some concern that
     user interface copyright will make it hard for the Free Software
     Foundation to develop programs compatible with the interfaces that
     you already know.

   To protect our freedom from lawsuits like these, a group of
programmers and users have formed a new grass-roots political
organization, the League for Programming Freedom.

   The purpose of the League is to oppose new monopolistic practices
such as user-interface copyright and software patents; it calls for a
return to the legal policies of the recent past, in which these
practices were not allowed.  The League is not concerned with free
software as an issue, and not affiliated with the Free Software
Foundation.

   The League's membership rolls include John McCarthy, inventor of
Lisp, Marvin Minsky, founder of the Artificial Intelligence lab, Guy L.
Steele, Jr., author of well-known books on Lisp and C, as well as
Richard Stallman, the developer of GNU CC.  Please join and add your
name to the list.  Membership dues in the League are $42 per year for
programmers, managers and professionals; $10.50 for students; $21 for
others.

   The League needs both activist members and members who only pay their
dues.

   To join, or for more information, phone (617) 492-0023 or write to:

     League for Programming Freedom
     1 Kendall Square #143
     P.O. Box 9171
     Cambridge, MA 02139

   You can also send electronic mail to `league@prep.ai.mit.edu'.

   Here are some suggestions from the League for things you can do to
protect your freedom to write programs:

   * Don't buy from Xerox, Lotus or Apple.  Buy from their competitors
     or from the defendants they are suing.

   * Don't develop software to work with the systems made by these
     companies.

   * Port your existing software to competing systems, so that you
     encourage users to switch.

   * Write letters to company presidents to let them know their conduct
     is unacceptable.

   * Tell your friends and colleagues about this issue and how it
     threatens to ruin the computer industry.

   * Above all, don't work for the look-and-feel plaintiffs, and don't
     accept contracts from them.

   * Write to Congress to explain the importance of this issue.

          House Subcommittee on Intellectual Property
          2137 Rayburn Bldg
          Washington, DC 20515
          
          Senate Subcommittee on Patents, Trademarks and Copyrights
          United States Senate
          Washington, DC 20510

     (These committees have received lots of mail already; let's give
     them even more.)

   Express your opinion!  You can make a difference.


@EndNode

@Node "Invoking GCC" "gcc.guide/Invoking GCC"
@Next "Installation"
@Prev "Boycott"
@Toc "Main"

GNU CC Command Options
**********************

   When you invoke GNU CC, it normally does preprocessing, compilation,
assembly and linking.  The "overall options" allow you to stop this
process at an intermediate stage.  For example, the `-c' option says
not to run the linker.  Then the output consists of object files output
by the assembler.

   Other options are passed on to one stage of processing.  Some options
control the preprocessor and others the compiler itself.  Yet other
options control the assembler and linker; most of these are not
documented here, since you rarely need to use any of them.

   The GNU C compiler uses a command syntax much like the Unix C
compiler. The `gcc' program accepts options and file names as operands.
Multiple single-letter options may *not* be grouped: `-dr' is very
different from `-d -r'.

   You can mix options and other arguments.  For the most part, the
order you use doesn't matter; `gcc' reorders the command-line options so
that the choices specified by option flags are applied to all input
files.  Order does matter when you use several options of the same kind;
for example, if you specify `-L' more than once, the directories are
searched in the order specified.

   Many options have long names starting with `-f' or with `-W'--for
example, `-fforce-mem', `-fstrength-reduce', `-Wformat' and so on. 
Most of these have both positive and negative forms; the negative form
of `-ffoo' would be `-fno-foo'.  This manual documents only one of
these two forms, whichever one is not the default.

   Here is a summary of all the options, grouped by type.  Explanations
are in the following sections.

*Overall Options*
     See @{"Options Controlling the Kind of Output" Link "Overall Options"}.
          -c  -S  -E  -o FILE  -pipe  -v  -x LANGUAGE

*Language Options*
     See @{"Options Controlling Dialect" Link "Dialect Options"}.
          -ansi  -fbuiltin  -fcond-mismatch  -fno-asm
          -fsigned-bitfields  -fsigned-char
          -funsigned-bitfields  -funsigned-char  -fwritable-strings
          -traditional  -traditional-cpp  -trigraphs

*Warning Options*
     See @{"Options to Request or Suppress Warnings" Link "Warning Options"}.
          -fsyntax-only  -pedantic  -pedantic-errors
          -w  -W  -Wall  -Waggregate-return
          -Wcast-align  -Wcast-qual  -Wcomment  -Wconversion  -Werror
          -Wformat  -Wid-clash-LEN  -Wimplicit  -Wimport
          -Winline -Wmissing-prototypes
          -Wparentheses  -Wpointer-arith  -Wreturn-type  -Wshadow
          -Wstrict-prototypes  -Wswitch  -Wtraditional  -Wtrigraphs
          -Wuninitialized  -Wunused  -Wwrite-strings  -Wchar-subscripts

*Debugging Options*
     See @{"Options for Debugging Your Program or GCC" Link "Debugging Options"}.
          -a  -dLETTERS  -fpretend-float
          -g  -gLEVEL -ggdb  -gdwarf
          -gstabs  -gstabs+  -gcoff -gxcoff
          -p  -pg  -save-temps

*Optimization Options*
     See @{"Options that Control Optimization" Link "Optimize Options"}.
          -fcaller-saves  -fcse-follow-jumps  -fcse-skip-blocks
          -fdelayed-branch   -fexpensive-optimizations  -ffast-math
          -ffloat-store  -fforce-addr  -fforce-mem  -finline
          -finline-functions  -fkeep-inline-functions
          -fno-defer-pop  -fno-function-cse  -fomit-frame-pointer
          -frerun-cse-after-loop  -fschedule-insns  -fschedule-insns2
          -fstrength-reduce  -fthread-jumps
          -funroll-all-loops  -funroll-loops
          -O  -O2

*Preprocessor Options*
     See @{"Options Controlling the Preprocessor" Link "Preprocessor Options"}.
          -C  -dD  -dM  -dN
          -DMACRO[=DEFN]  -E  -H
          -include FILE  -imacros FILE
          -M  -MD  -MM  -MMD  -nostdinc  -P  -trigraphs  -UMACRO

*Linker Options*
     See @{"Options for Linking" Link "Link Options"}.
          OBJECT-FILE-NAME
          -lLIBRARY  -nostdlib  -static

*Directory Options*
     See @{"Options for Directory Search" Link "Directory Options"}.
          -BPREFIX  -IDIR  -I-  -LDIR

*Target Options*
     See @{"Target Machine and Compiler Version" Link "Target Options"}.
          -b MACHINE  -V VERSION

*Machine Dependent Options*
     See @{"Hardware Models and Configurations" Link "Submodel Options"}.
          *M680x0 Options*
          -m68000 -m68020 -m68881 -mbitfield -mc68000 -mc68020 -mfpa
          -mnobitfield -mrtd -mshort -msoft-float
          
          *VAX Options*
          -mg -mgnu -munix
          
          *SPARC Options*
          -mforce-align -mfpu -mno-epilogue
          
          *Convex Options*
          -margcount -mc1 -mc2 -mnoargcount
          
          *AMD29K Options*
          -m29000 -m29050 -mbw -mdw -mkernel-registers -mlarge
          -mnbw -mnodw -msmall -mstack-check -muser-registers
          
          *M88K Options*
          -m88000 -m88100 -m88110 -mbig-pic -mcheck-zero-division
          -mhandle-large-shift -midentify-revision
          -mno-check-zero-division -mno-ocs-debug-info
          -mno-ocs-frame-position -mno-optimize-arg-area -mno-underscores
          -mocs-debug-info -mocs-frame-position -moptimize-arg-area
          -mshort-data-NUM -msvr3 -msvr4 -mtrap-large-shift
          -muse-div-instruction -mversion-03.00 -mwarn-passed-structs
          
          *RS/6000 Options*
          -mfp-in-toc -mno-fop-in-toc
          
          *RT Options*
          -mcall-lib-mul -mfp-arg-in-fpregs -mfp-arg-in-gregs
          -mfull-fp-blocks -mhc-struct-return -min-line-mul
          -mminimum-fp-blocks -mnohc-struct-return
          
          *MIPS Options*
          -mcpu=CPU TYPE -mips2 -mips3 -mint64 -mlong64 -mlonglong128
          -mmips-as -mgas -mrnames -mno-rnames -mgpopt -mno-gpopt -mstats
          -mno-stats -mmemcpy -mno-memcpy -mno-mips-tfile -mmips-tfile
          -msoft-float -mhard-float -mabicalls -mno-abicalls -mhalf-pic
          -mno-half-pic -G NUM -nocpp
          
          *i386 Options*
          -m486 -msoft-float

*Code Generation Options*
     See @{"Options for Code Generation Conventions" Link "Code Gen Options"}.
          -fcall-saved-REG  -fcall-used-REG  -ffixed-REG
          -fno-common  -fpcc-struct-return  -fpic  -fPIC  -fshared-data
          -fshort-enums  -fshort-double  -fvolatile


 @{" Overall Options " Link "Overall Options"}      Controlling the kind of output:
                        an executable, object files, assembler files,
                        or preprocessed source.
 @{" Dialect Options " Link "Dialect Options"}      Controlling the variant of C language compiled.
 @{" Warning Options " Link "Warning Options"}      How picky should the compiler be?
 @{" Debugging Options " Link "Debugging Options"}    Symbol tables, measurements, and debugging dumps.
 @{" Optimize Options " Link "Optimize Options"}     How much optimization?
 @{" Preprocessor Options " Link "Preprocessor Options"}  Controlling header files and macro definitions.
                         Also, getting dependency information for Make.
 @{" Link Options " Link "Link Options"}         Specifying libraries and so on.
 @{" Directory Options " Link "Directory Options"}    Where to find header files and libraries.
                        Where to find the compiler executable files.
 @{" Target Options " Link "Target Options"}       Running a cross-compiler, or an old version of GNU CC.
 @{" Submodel Options " Link "Submodel Options"}     Specifying minor hardware or convention variations,
                        such as 68010 vs 68020.
 @{" Code Gen Options " Link "Code Gen Options"}     Specifying conventions for function calls, data layout
                        and register usage.
 @{" Environment Variables " Link "Environment Variables"}  Env vars that affect GNU CC.


@EndNode

@Node "Overall Options" "gcc.guide/Overall Options"
@Next "Dialect Options"
@Prev "Invoking GCC"
@Toc "Invoking GCC"

Options Controlling the Kind of Output
======================================

   Compilation can involve up to four stages: preprocessing, compilation
proper, assembly and linking, always in that order.  The first three
stages apply to an individual source file, and end by producing an
object file; linking combines all the object files (those newly
compiled, and those specified as input) into an executable file.

   For any given input file, the file name suffix determines what kind
of compilation is done:

`FILE.c'
     C source code which must be preprocessed.

`FILE.i'
     C source code which should not be preprocessed.

`FILE.m'
     Objective-C source code

`FILE.h'
     C header file (not to be compiled or linked).

`FILE.cc'
`FILE.cxx'
`FILE.C'
     C++ source code which must be preprocessed.

`FILE.s'
     Assembler code.

`FILE.S'
     Assembler code which must be preprocessed.

`OTHER'
     An object file to be fed straight into linking. Any file name with
     no recognized suffix is treated this way.

   You can specify the input language explicitly with the `-x' option:

`-x LANGUAGE'
     Specify explicitly the LANGUAGE for the following input files
     (rather than choosing a default based on the file name suffix).
     This option applies to all following input files until the next
     `-x' option.  Possible values of LANGUAGE are `c', `objective-c',
     `c-header', `c++', `cpp-output', `assembler', and
     `assembler-with-cpp'.

`-x none'
     Turn off any specification of a language, so that subsequent files
     are handled according to their file name suffixes (as they are if
     `-x' has not been used at all).

   If you only want some of the stages of compilation, you can use `-x'
(or filename suffixes) to tell `gcc' where to start, and one of the
options `-c', `-S', or `-E' to say where `gcc' is to stop.  Note that
some combinations (for example, `-x cpp-output -E' instruct `gcc' to do
nothing at all.

`-c'
     Compile or assemble the source files, but do not link.  The linking
     stage simply is not done.  The ultimate output is in the form of an
     object file for each source file.

     By default, the object file name for a source file is made by
     replacing the suffix `.c', `.i', `.s', etc., with `.o'.

     Unrecognized input files, not requiring compilation or assembly,
     are ignored.

`-S'
     Stop after the stage of compilation proper; do not assemble.  The
     output is in the form of an assembler code file for each
     non-assembler input file specified.

     By default, the assembler file name for a source file is made by
     replacing the suffix `.c', `.i', etc., with `.s'.

     Input files that don't require compilation are ignored.

`-E'
     Stop after the preprocessing stage; do not run the compiler
     proper.  The output is in the form of preprocessed source code,
     which is sent to the standard output.

     Input files which don't require preprocessing are ignored.

`-o FILE'
     Place output in file FILE.  This applies regardless to whatever
     sort of output is being produced, whether it be an executable file,
     an object file, an assembler file or preprocessed C code.

     Since only one output file can be specified, it does not make
     sense to use `-o' when compiling more than one input file, unless
     you are producing an executable file as output.

     If `-o' is not specified, the default is to put an executable file
     in `a.out', the object file for `SOURCE.SUFFIX' in `SOURCE.o', its
     assembler file in `SOURCE.s', and all preprocessed C source on
     standard output.

`-v'
     Print (on standard error output) the commands executed to run the
     stages of compilation.  Also print the version number of the
     compiler driver program and of the preprocessor and the compiler
     proper.

`-pipe'
     Use pipes rather than temporary files for communication between the
     various stages of compilation.  This fails to work on some systems
     where the assembler is unable to read from a pipe; but the GNU
     assembler has no trouble.


@EndNode

@Node "Dialect Options" "gcc.guide/Dialect Options"
@Next "Warning Options"
@Prev "Overall Options"
@Toc "Invoking GCC"

Options Controlling Dialect
===========================

   The following options control the dialect of C that the compiler
accepts:

`-ansi'
     Support all ANSI standard C programs.

     This turns off certain features of GNU C that are incompatible
     with ANSI C, such as the `asm', `inline' and `typeof' keywords, and
     predefined macros such as `unix' and `vax' that identify the type
     of system you are using.  It also enables the undesirable and
     rarely used ANSI trigraph feature, and disallows `$' as part of
     identifiers.

     The alternate keywords `__asm__', `__extension__', `__inline__'
     and `__typeof__' continue to work despite `-ansi'.  You would not
     want to use them in an ANSI C program, of course, but it useful to
     put them in header files that might be included in compilations
     done with `-ansi'.  Alternate predefined macros such as `__unix__'
     and `__vax__' are also available, with or without `-ansi'.

     The `-ansi' option does not cause non-ANSI programs to be rejected
     gratuitously.  For that, `-pedantic' is required in addition to
     `-ansi'.  See @{"Warning Options" Link "Warning Options"}.

     The macro `__STRICT_ANSI__' is predefined when the `-ansi' option
     is used.  Some header files may notice this macro and refrain from
     declaring certain functions or defining certain macros that the
     ANSI standard doesn't call for; this is to avoid interfering with
     any programs that might use these names for other things.

     The functions `alloca', `abort', `exit', and `_exit' are not
     builtin functions when `-ansi' is used.

`-fno-asm'
     Do not recognize `asm', `inline' or `typeof' as a keyword.  These
     words may then be used as identifiers.  You can use `__asm__',
     `__inline__' and `__typeof__' instead. `-ansi' implies `-fno-asm'.

`-fno-builtin'
     Don't recognize built-in functions that do not begin with two
     leading underscores. Currently, the functions affected include
     `alloca', `abort', `exit', `_exit', `abs', `fabs', `labs',
     `memcpy', `memcmp', `strcmp', `strcpy', `strlen', and `sqrt'.

     The `-ansi' option prevents `alloca' and `_exit' from being
     builtin functions.

`-trigraphs'
     Support ANSI C trigraphs.  You don't want to know about this
     brain-damage.  The `-ansi' option implies `-trigraphs'.

`-traditional'
     Attempt to support some aspects of traditional C compilers.
     Specifically:

        * All `extern' declarations take effect globally even if they
          are written inside of a function definition.  This includes
          implicit declarations of functions.

        * The keywords `typeof', `inline', `signed', `const' and
          `volatile' are not recognized.  (You can still use the
          alternative keywords such as `__typeof__', `__inline__', and
          so on.)

        * Comparisons between pointers and integers are always allowed.

        * Integer types `unsigned short' and `unsigned char' promote to
          `unsigned int'.

        * Out-of-range floating point literals are not an error.

        * String "constants" are not necessarily constant; they are
          stored in writable space, and identical looking constants are
          allocated separately.  (This is the same as the effect of
          `-fwritable-strings'.)

        * All automatic variables not declared `register' are preserved
          by `longjmp'.  Ordinarily, GNU C follows ANSI C: automatic
          variables not declared `volatile' may be clobbered.

        * In the preprocessor, comments convert to nothing at all,
          rather than to a space.  This allows traditional token
          concatenation.

        * In the preprocessor, macro arguments are recognized within
          string constants in a macro definition (and their values are
          stringified, though without additional quote marks, when they
          appear in such a context).  The preprocessor always considers
          a string constant to end at a newline.

        * The predefined macro `__STDC__' is not defined when you use
          `-traditional', but `__GNUC__' is (since the GNU extensions
          which `__GNUC__' indicates are not affected by
          `-traditional').  If you need to write header files that work
          differently depending on whether `-traditional' is in use, by
          testing both of these predefined macros you can distinguish
          four situations: GNU C, traditional GNU C, other ANSI C
          compilers, and other old C compilers.

     You may wish to use `-fno-builtin' as well as `-traditional' if
     your program uses names that are normally GNU C builtin functions
     for other purposes of its own.

`-traditional-cpp'
     Attempt to support some aspects of traditional C preprocessors.
     This includes the last three items in the table immediately above,
     but none of the other effects of `-traditional'.

`-fcond-mismatch'
     Allow conditional expressions with mismatched types in the second
     and third arguments.  The value of such an expression is void.

`-funsigned-char'
     Let the type `char' be unsigned, like `unsigned char'.

     Each kind of machine has a default for what `char' should be.  It
     is either like `unsigned char' by default or like `signed char' by
     default.

     Ideally, a portable program should always use `signed char' or
     `unsigned char' when it depends on the signedness of an object.
     But many programs have been written to use plain `char' and expect
     it to be signed, or expect it to be unsigned, depending on the
     machines they were written for.  This option, and its inverse, let
     you make such a program work with the opposite default.

     The type `char' is always a distinct type from each of `signed
     char' or `unsigned char', even though its behavior is always just
     like one of those two.

`-fsigned-char'
     Let the type `char' be signed, like `signed char'.

     Note that this is equivalent to `-fno-unsigned-char', which is the
     negative form of `-funsigned-char'.  Likewise, `-fno-signed-char'
     is equivalent to `-funsigned-char'.

`-fsigned-bitfields'
`-funsigned-bitfields'
`-fno-signed-bitfields'
`-fno-unsigned-bitfields'
     These options control whether a bitfield is signed or unsigned,
     when the declaration does not use either `signed' or `unsigned'. 
     By default, such a bitfield is signed, because this is consistent:
     the basic integer types such as `int' are signed types.

     However, when `-traditional' is used, bitfields are all unsigned
     no matter what.

`-fwritable-strings'
     Store string constants in the writable data segment and don't
     uniquize them.  This is for compatibility with old programs which
     assume they can write into string constants.  `-traditional' also
     has this effect.

     Writing into string constants is a very bad idea; "constants"
     should be constant.


@EndNode

@Node "Warning Options" "gcc.guide/Warning Options"
@Next "Debugging Options"
@Prev "Dialect Options"
@Toc "Invoking GCC"

Options to Request or Suppress Warnings
=======================================

   Warnings are diagnostic messages that report constructions which are
not inherently erroneous but which are risky or suggest there may have
been an error.

   You can request many specific warnings with options beginning `-W',
for example `-Wimplicit' to request warnings on implicit declarations. 
Each of these specific warning options also has a negative form
beginning `-Wno-' to turn off warnings; for example, `-Wno-implicit'. 
This manual lists only one of the two forms, whichever is not the
default.

   These options control the amount and kinds of warnings produced by
GNU CC:

`-fsyntax-only'
     Check the code for syntax errors, but don't emit any output.

`-w'
     Inhibit all warning messages.

`-Wno_import'
     Inhibit warning messages about the use of `#import'.

`-pedantic'
     Issue all the warnings demanded by strict ANSI standard C; reject
     all programs that use forbidden extensions.

     Valid ANSI standard C programs should compile properly with or
     without this option (though a rare few will require `-ansi'). 
     However, without this option, certain GNU extensions and
     traditional C features are supported as well.  With this option,
     they are rejected.

     `-pedantic' does not cause warning messages for use of the
     alternate keywords whose names begin and end with `__'.  Pedantic
     warnings are also disabled in the expression that follows
     `__extension__'.  However, only system header files should use
     these escape routes; application programs should avoid them. See
     @{"Alternate Keywords" Link "Alternate Keywords"}.

     This option is not intended to be useful; it exists only to satisfy
     pedants who would otherwise claim that GNU CC fails to support the
     ANSI standard.

     Some users try to use `-pedantic' to check programs for strict ANSI
     C conformance.  They soon find that it does not do quite what they
     want: it finds some non-ANSI practices, but not all--only those
     for which ANSI C *requires* a diagnostic.

     A feature to report any failure to conform to ANSI C might be
     useful in some instances, but would require considerable
     additional work and would be quite different from `-pedantic'.  We
     recommend, rather, that users take advantage of the extensions of
     GNU C and disregard the limitations of other compilers.  Aside
     from certain supercomputers and obsolete small machines, there is
     less and less reason ever to use any other C compiler other than
     for bootstrapping GNU CC.

`-pedantic-errors'
     Like `-pedantic', except that errors are produced rather than
     warnings.

`-W'
     Print extra warning messages for these events:

        * A nonvolatile automatic variable might be changed by a call to
          `longjmp'.  These warnings as well are possible only in
          optimizing compilation.

          The compiler sees only the calls to `setjmp'.  It cannot know
          where `longjmp' will be called; in fact, a signal handler
          could call it at any point in the code.  As a result, you may
          get a warning even when there is in fact no problem because
          `longjmp' cannot in fact be called at the place which would
          cause a problem.

        * A function can return either with or without a value. 
          (Falling off the end of the function body is considered
          returning without a value.)  For example, this function would
          evoke such a warning:

               foo (a)
               {
                 if (a > 0)
                   return a;
               }

        * An expression-statement contains no side effects.

        * An unsigned value is compared against zero with `>' or `<='.

`-Wimplicit'
     Warn whenever a function or parameter is implicitly declared.

`-Wreturn-type'
     Warn whenever a function is defined with a return-type that
     defaults to `int'.  Also warn about any `return' statement with no
     return-value in a function whose return-type is not `void'.

`-Wunused'
     Warn whenever a local variable is unused aside from its
     declaration, whenever a function is declared static but never
     defined, and whenever a statement computes a result that is
     explicitly not used.

`-Wswitch'
     Warn whenever a `switch' statement has an index of enumeral type
     and lacks a `case' for one or more of the named codes of that
     enumeration.  (The presence of a `default' label prevents this
     warning.)  `case' labels outside the enumeration range also
     provoke warnings when this option is used.

`-Wcomment'
     Warn whenever a comment-start sequence `/*' appears in a comment.

`-Wtrigraphs'
     Warn if any trigraphs are encountered (assuming they are enabled).

`-Wformat'
     Check calls to `printf' and `scanf', etc., to make sure that the
     arguments supplied have types appropriate to the format string
     specified.

`-Wchar-subscripts'
     Warn if an array subscript has type `char'.  This is a common cause
     of error, as programmers often forget that this type is signed on
     some machines.

`-Wuninitialized'
     An automatic variable is used without first being initialized.

     These warnings are possible only in optimizing compilation,
     because they require data flow information that is computed only
     when optimizing.  If you don't specify `-O', you simply won't get
     these warnings.

     These warnings occur only for variables that are candidates for
     register allocation.  Therefore, they do not occur for a variable
     that is declared `volatile', or whose address is taken, or whose
     size is other than 1, 2, 4 or 8 bytes.  Also, they do not occur for
     structures, unions or arrays, even when they are in registers.

     Note that there may be no warning about a variable that is used
     only to compute a value that itself is never used, because such
     computations may be deleted by data flow analysis before the
     warnings are printed.

     These warnings are made optional because GNU CC is not smart
     enough to see all the reasons why the code might be correct
     despite appearing to have an error.  Here is one example of how
     this can happen:

          {
            int x;
            switch (y)
              {
              case 1: x = 1;
                break;
              case 2: x = 4;
                break;
              case 3: x = 5;
              }
            foo (x);
          }

     If the value of `y' is always 1, 2 or 3, then `x' is always
     initialized, but GNU CC doesn't know this.  Here is another common
     case:

          {
            int save_y;
            if (change_y) save_y = y, y = new_y;
            ...
            if (change_y) y = save_y;
          }

     This has no bug because `save_y' is used only if it is set.

     Some spurious warnings can be avoided if you declare as `volatile'
     all the functions you use that never return. See
     @{"Function Attributes" Link "Function Attributes"}.

`-Wparentheses'
     Warn if parentheses are omitted in certain contexts.

`-Wall'
     All of the above `-W' options combined.  These are all the options
     which pertain to usage that we recommend avoiding and that we
     believe is easy to avoid, even in conjunction with macros.

   The remaining `-W...' options are not implied by `-Wall' because
they warn about constructions that we consider reasonable to use, on
occasion, in clean programs.

`-Wtraditional'
     Warn about certain constructs that behave differently in
     traditional and ANSI C.

        * Macro arguments occurring within string constants in the
          macro body. These would substitute the argument in
          traditional C, but are part of the constant in ANSI C.

        * A function declared external in one block and then used after
          the end of the block.

        * A `switch' statement has an operand of type `long'.

`-Wshadow'
     Warn whenever a local variable shadows another local variable.

`-Wid-clash-LEN'
     Warn whenever two distinct identifiers match in the first LEN
     characters.  This may help you prepare a program that will compile
     with certain obsolete, brain-damaged compilers.

`-Wpointer-arith'
     Warn about anything that depends on the "size of" a function type
     or of `void'.  GNU C assigns these types a size of 1, for
     convenience in calculations with `void *' pointers and pointers to
     functions.

`-Wcast-qual'
     Warn whenever a pointer is cast so as to remove a type qualifier
     from the target type.  For example, warn if a `const char *' is
     cast to an ordinary `char *'.

`-Wcast-align'
     Warn whenever a pointer is cast such that the required alignment
     of the target is increased.  For example, warn if a `char *' is
     cast to an `int *' on machines where integers can only be accessed
     at two- or four-byte boundaries.

`-Wwrite-strings'
     Give string constants the type `const char[LENGTH]' so that
     copying the address of one into a non-`const' `char *' pointer
     will get a warning.  These warnings will help you find at compile
     time code that can try to write into a string constant, but only
     if you have been very careful about using `const' in declarations
     and prototypes.  Otherwise, it will just be a nuisance; this is
     why we did not make `-Wall' request these warnings.

`-Wconversion'
     Warn if a prototype causes a type conversion that is different
     from what would happen to the same argument in the absence of a
     prototype.  This includes conversions of fixed point to floating
     and vice versa, and conversions changing the width or signedness
     of a fixed point argument except when the same as the default
     promotion.

`-Waggregate-return'
     Warn if any functions that return structures or unions are defined
     or called.  (In languages where you can return an array, this also
     elicits a warning.)

`-Wstrict-prototypes'
     Warn if a function is declared or defined without specifying the
     argument types.  (An old-style function definition is permitted
     without a warning if preceded by a declaration which specifies the
     argument types.)

`-Wmissing-prototypes'
     Warn if a global function is defined without a previous prototype
     declaration.  This warning is issued even if the definition itself
     provides a prototype.  The aim is to detect global functions that
     fail to be declared in header files.

`-Wredundant-decls'
     Warn if anything is declared more than once in the same scope,
     even in cases where multiple declaration is valid and changes
     nothing.

`-Wnested-externs'
     Warn if an `extern' declaration is encountered within an function.

`-Winline'
     Warn if a function can not be inlined, and either it was declared
     as inline, or else the `-finline-functions' option was given.

`-Werror'
     Make all warnings into errors.


@EndNode

@Node "Debugging Options" "gcc.guide/Debugging Options"
@Next "Optimize Options"
@Prev "Warning Options"
@Toc "Invoking GCC"

Options for Debugging Your Program or GNU CC
============================================

   GNU CC has various special options that are used for debugging
either your program or GCC:

`-g'
     Produce debugging information in the operating system's native
     format (stabs, COFF, XCOFF, or DWARF).  GDB can work with this
     debugging information.

     On most systems that use stabs format, `-g' enables use of extra
     debugging information that only GDB can use; this extra information
     makes debugging work better in GDB but will probably make DBX
     crash or refuse to read the program.  If you want to control for
     certain whether to generate the extra information, use `-gstabs+'
     or `-gstabs' (see below).

     Unlike most other C compilers, GNU CC allows you to use `-g' with
     `-O'.  The shortcuts taken by optimized code may occasionally
     produce surprising results: some variables you declared may not
     exist at all; flow of control may briefly move where you did not
     expect it; some statements may not be executed because they
     compute constant results or their values were already at hand;
     some statements may execute in different places because they were
     moved out of loops.

     Nevertheless it proves possible to debug optimized output.  This
     makes it reasonable to use the optimizer for programs that might
     have bugs.

     The following options are useful when GNU CC is generated with the
     capability for more than one debugging format.

`-ggdb'
     Produce debugging information in the native format (if that is
     supported), including GDB extensions if at all possible.

`-gstabs'
     Produce debugging information in stabs format (if that is
     supported), without GDB extensions.  This is the format used by
     DBX on most BSD systems.

`-gstabs+'
     Produce debugging information in stabs format (if that is
     supported), using GDB extensions.  The use of these extensions is
     likely to make DBX crash or refuse to read the program.

`-gcoff'
     Produce debugging information in COFF format (if that is
     supported). This is the format used by SDB on COFF systems.

`-gxcoff'
     Produce debugging information in XCOFF format (if that is
     supported). This is the format used on IBM RS/6000 systems.

`-gdwarf'
     Produce debugging information in DWARF format (if that is
     supported). This is the format used by SDB on systems that use
     DWARF.

`-gLEVEL'
`-ggdbLEVEL'
`-gstabsLEVEL'
`-gcoffLEVEL'
`-gxcoffLEVEL'
`-gdwarfLEVEL'
     Request debugging information and also use LEVEL to specify how
     much information.  The default level is 2.

     Level 1 produces minimal information, enough for making backtraces
     in parts of the program that you don't plan to debug.  This
     includes descriptions of functions and external variables, but no
     information about local variables and no line numbers.

     Level 3 includes extra information, such as all the macro
     definitions present in the program.  Some debuggers support macro
     expansion when you use `-g3'.

`-p'
     Generate extra code to write profile information suitable for the
     analysis program `prof'.

`-pg'
     Generate extra code to write profile information suitable for the
     analysis program `gprof'.

`-a'
     Generate extra code to write profile information for basic blocks,
     which will record the number of times each basic block is executed.
     This data could be analyzed by a program like `tcov'.  Note,
     however, that the format of the data is not what `tcov' expects.
     Eventually GNU `gprof' should be extended to process this data.

`-dLETTERS'
     Says to make debugging dumps during compilation at times specified
     by LETTERS.  This is used for debugging the compiler.  The file
     names for most of the dumps are made by appending a word to the
     source file name (e.g.  `foo.c.rtl' or `foo.c.jump').  Here are the
     possible letters for use in LETTERS, and their meanings:

    `M'
          Dump all macro definitions, at the end of preprocessing, and
          write no output.

    `N'
          Dump all macro names, at the end of preprocessing.

    `D'
          Dump all macro definitions, at the end of preprocessing, in
          addition to normal output.

    `y'
          Dump debugging information during parsing, to standard error.

    `r'
          Dump after RTL generation, to `FILE.rtl'.

    `x'
          Just generate RTL for a function instead of compiling it. 
          Usually used with `r'.

    `j'
          Dump after first jump optimization, to `FILE.jump'.

    `s'
          Dump after CSE (including the jump optimization that sometimes
          follows CSE), to `FILE.cse'.

    `L'
          Dump after loop optimization, to `FILE.loop'.

    `t'
          Dump after the second CSE pass (including the jump
          optimization that sometimes follows CSE), to `FILE.cse2'.

    `f'
          Dump after flow analysis, to `FILE.flow'.

    `c'
          Dump after instruction combination, to `FILE.combine'.

    `S'
          Dump after the first instruction scheduling pass, to
          `FILE.sched'.

    `l'
          Dump after local register allocation, to `FILE.lreg'.

    `g'
          Dump after global register allocation, to `FILE.greg'.

    `R'
          Dump after the second instruction scheduling pass, to
          `FILE.sched2'.

    `J'
          Dump after last jump optimization, to `FILE.jump2'.

    `d'
          Dump after delayed branch scheduling, to `FILE.dbr'.

    `k'
          Dump after conversion from registers to stack, to
          `FILE.stack'.

    `a'
          Produce all the dumps listed above.

    `m'
          Print statistics on memory usage, at the end of the run, to
          standard error.

    `p'
          Annotate the assembler output with a comment indicating which
          pattern and alternative was used.

`-fpretend-float'
     When running a cross-compiler, pretend that the target machine
     uses the same floating point format as the host machine.  This
     causes incorrect output of the actual floating constants, but the
     actual instruction sequence will probably be the same as GNU CC
     would make when running on the target machine.

`-save-temps'
     Store the usual "temporary" intermediate files permanently; place
     them in the current directory and name them based on the source
     file.  Thus, compiling `foo.c' with `-c -save-temps' would produce
     files `foo.i' and `foo.s', as well as `foo.o'.


@EndNode

@Node "Optimize Options" "gcc.guide/Optimize Options"
@Next "Preprocessor Options"
@Prev "Debugging Options"
@Toc "Invoking GCC"

Options That Control Optimization
=================================

   These options control various sorts of optimizations:

`-O'
     Optimize.  Optimizing compilation takes somewhat more time, and a
     lot more memory for a large function.

     Without `-O', the compiler's goal is to reduce the cost of
     compilation and to make debugging produce the expected results.
     Statements are independent: if you stop the program with a
     breakpoint between statements, you can then assign a new value to
     any variable or change the program counter to any other statement
     in the function and get exactly the results you would expect from
     the source code.

     Without `-O', only variables declared `register' are allocated in
     registers.  The resulting compiled code is a little worse than
     produced by PCC without `-O'.

     With `-O', the compiler tries to reduce code size and execution
     time.

     When `-O' is specified, `-fthread-jumps' and `-fdelayed-branch'
     are turned on.  On some machines other flags may also be turned on.

`-O2'
     Optimize even more.  Nearly all supported optimizations that do not
     involve a space-speed tradeoff are performed.  As compared to `-O',
     this option increases both compilation time and the performance of
     the generated code.

     `-O2' turns on all `-fFLAG' options that enable more optimization,
     except for `-funroll-loops', `-funroll-all-loops' and
     `-fomit-frame-pointer'.

   Options of the form `-fFLAG' specify machine-independent flags. 
Most flags have both positive and negative forms; the negative form of
`-ffoo' would be `-fno-foo'.  In the table below, only one of the forms
is listed--the one which is not the default. You can figure out the
other form by either removing `no-' or adding it.

`-ffloat-store'
     Do not store floating point variables in registers.  This prevents
     undesirable excess precision on machines such as the 68000 where
     the floating registers (of the 68881) keep more precision than a
     `double' is supposed to have.

     For most programs, the excess precision does only good, but a few
     programs rely on the precise definition of IEEE floating point.
     Use `-ffloat-store' for such programs.

`-fno-defer-pop'
     Always pop the arguments to each function call as soon as that
     function returns.  For machines which must pop arguments after a
     function call, the compiler normally lets arguments accumulate on
     the stack for several function calls and pops them all at once.

`-fforce-mem'
     Force memory operands to be copied into registers before doing
     arithmetic on them.  This may produce better code by making all
     memory references potential common subexpressions.  When they are
     not common subexpressions, instruction combination should
     eliminate the separate register-load.  I am interested in hearing
     about the difference this makes.

`-fforce-addr'
     Force memory address constants to be copied into registers before
     doing arithmetic on them.  This may produce better code just as
     `-fforce-mem' may.  I am interested in hearing about the
     difference this makes.

`-fomit-frame-pointer'
     Don't keep the frame pointer in a register for functions that
     don't need one.  This avoids the instructions to save, set up and
     restore frame pointers; it also makes an extra register available
     in many functions.  *It also makes debugging impossible on some
     machines.*

     On some machines, such as the Vax, this flag has no effect, because
     the standard calling sequence automatically handles the frame
     pointer and nothing is saved by pretending it doesn't exist.  The
     machine-description macro `FRAME_POINTER_REQUIRED' controls
     whether a target machine supports this flag.  See @{"Registers" Link "Registers"}.

`-fno-inline'
     Don't pay attention to the `inline' keyword.  Normally this option
     is used to keep the compiler from expanding any functions inline.

`-finline-functions'
     Integrate all simple functions into their callers.  The compiler
     heuristically decides which functions are simple enough to be worth
     integrating in this way.

     If all calls to a given function are integrated, and the function
     is declared `static', then the function is normally not output as
     assembler code in its own right.

`-fkeep-inline-functions'
     Even if all calls to a given function are integrated, and the
     function is declared `static', nevertheless output a separate
     run-time callable version of the function.

`-fno-function-cse'
     Do not put function addresses in registers; make each instruction
     that calls a constant function contain the function's address
     explicitly.

     This option results in less efficient code, but some strange hacks
     that alter the assembler output may be confused by the
     optimizations performed when this option is not used.

`-ffast-math'
     This option allows GCC to violate some ANSI or IEEE
     rules/specifications in the interest of optimizing code for speed.
      For example, it allows the compiler to assume arguments to the
     `sqrt' function are non-negative numbers.

     This option should never be turned on by any `-O' option since it
     can result in incorrect output for programs which depend on an
     exact implementation of IEEE or ANSI rules/specifications for math
     functions.

   The following options control specific optimizations.  The `-O2'
option turns on all of these optimizations except `-funroll-loops' and
`-funroll-all-loops'.  The `-O' option usually turns on the
`-fthread-jumps' and `-fdelayed-branch' options, but specific machines
may change the default optimizations.

   You can use the following flags in the rare cases when "fine-tuning"
of optimizations to be performed is desired.

`-fstrength-reduce'
     Perform the optimizations of loop strength reduction and
     elimination of iteration variables.

`-fthread-jumps'
     Perform optimizations where we check to see if a jump branches to a
     location where another comparison subsumed by the first is found. 
     If so, the first branch is redirected to either the destination of
     the second branch or a point immediately following it, depending
     on whether the condition is known to be true or false.

`-fcse-follow-jumps'
     In common subexpression elimination, scan through jump instructions
     when the target of the jump is not reached by any other path.  For
     example, when CSE encounters an `if' statement with an `else'
     clause, CSE will follow the jump when the condition tested is
     false.

`-fcse-skip-blocks'
     This is similar to `-fcse-follow-jumps', but causes CSE to follow
     jumps which conditionally skip over blocks.  When CSE encounters a
     simple `if' statement with no else clause, `-fcse-skip-blocks'
     causes CSE to follow the jump around the body of the `if'.

`-frerun-cse-after-loop'
     Re-run common subexpression elimination after loop optimizations
     has been performed.

`-fexpensive-optimizations'
     Perform a number of minor optimizations that are relatively
     expensive.

`-fdelayed-branch'
     If supported for the target machine, attempt to reorder
     instructions to exploit instruction slots available after delayed
     branch instructions.

`-fschedule-insns'
     If supported for the target machine, attempt to reorder
     instructions to eliminate execution stalls due to required data
     being unavailable.  This helps machines that have slow floating
     point or memory load instructions by allowing other instructions
     to be issued until the result of the load or floating point
     instruction is required.

`-fschedule-insns2'
     Similar to `-fschedule-insns', but requests an additional pass of
     instruction scheduling after register allocation has been done. 
     This is especially useful on machines with a relatively small
     number of registers and where memory load instructions take more
     than one cycle.

`-fcaller-saves'
     Enable values to be allocated in registers that will be clobbered
     by function calls, by emitting extra instructions to save and
     restore the registers around such calls.  Such allocation is done
     only when it seems to result in better code than would otherwise
     be produced.

     This option is enabled by default on certain machines, usually
     those which have no call-preserved registers to use instead.

`-funroll-loops'
     Perform the optimization of loop unrolling.  This is only done for
     loops whose number of iterations can be determined at compile time
     or run time. `-funroll-loop' implies `-fstrength-reduce' and
     `-frerun-cse-after-loop'.

`-funroll-all-loops'
     Perform the optimization of loop unrolling.  This is done for all
     loops and usually makes programs run more slowly. 
     `-funroll-all-loops' implies `-fstrength-reduce' and
     `-frerun-cse-after-loop'.

`-fno-peephole'
     Disable any machine-specific peephole optimizations.


@EndNode

@Node "Preprocessor Options" "gcc.guide/Preprocessor Options"
@Next "Link Options"
@Prev "Optimize Options"
@Toc "Invoking GCC"

Options Controlling the Preprocessor
====================================

   These options control the C preprocessor, which is run on each C
source file before actual compilation.

   If you use the `-E' option, nothing is done except preprocessing.
Some of these options make sense only together with `-E' because they
cause the preprocessor output to be unsuitable for actual compilation.

`-include FILE'
     Process FILE as input before processing the regular input file. In
     effect, the contents of FILE are compiled first.  Any `-D' and
     `-U' options on the command line are always processed before
     `-include FILE', regardless of the order in which they are
     written.  All the `-include' and `-imacros' options are processed
     in the order in which they are written.

`-imacros FILE'
     Process FILE as input, discarding the resulting output, before
     processing the regular input file.  Because the output generated
     from FILE is discarded, the only effect of `-imacros FILE' is to
     make the macros defined in FILE available for use in the main
     input.

     Any `-D' and `-U' options on the command line are always processed
     before `-imacros FILE', regardless of the order in which they are
     written.  All the `-include' and `-imacros' options are processed
     in the order in which they are written.

`-nostdinc'
     Do not search the standard system directories for header files. 
     Only the directories you have specified with `-I' options (and the
     current directory, if appropriate) are searched.  See
     @{"Directory Options" Link "Directory Options"}, for information on `-I'.

     By using both `-nostdinc' and `-I-', you can limit the include-file
     search path to only those directories you specify explicitly.

`-nostdinc++'
     Do not search for header files in the C++-specific standard
     directories, but do still search the other standard directories.
     (This option is used when building `libg++'.)

`-undef'
     Do not predefine any nonstandard macros.  (Including architecture
     flags).

`-E'
     Run only the C preprocessor.  Preprocess all the C source files
     specified and output the results to standard output or to the
     specified output file.

`-C'
     Tell the preprocessor not to discard comments.  Used with the `-E'
     option.

`-P'
     Tell the preprocessor not to generate `#line' commands. Used with
     the `-E' option.

`-M'
     Tell the preprocessor to output a rule suitable for `make'
     describing the dependencies of each object file.  For each source
     file, the preprocessor outputs one `make'-rule whose target is the
     object file name for that source file and whose dependencies are
     all the files `#include'd in it.  This rule may be a single line
     or may be continued with `\'-newline if it is long.  The list of
     rules is printed on standard output instead of the preprocessed C
     program.

     `-M' implies `-E'.

     Another way to specify output of a `make' rule is by setting the
     environment variable `DEPENDENCIES_OUTPUT' (see
     @{"Environment Variables" Link "Environment Variables"}).

`-MM'
     Like `-M' but the output mentions only the user header files
     included with `#include "FILE"'.  System header files included
     with `#include <FILE>' are omitted.

`-MD'
     Like `-M' but the dependency information is written to files with
     names made by replacing `.c' with `.d' at the end of the input
     file names.  This is in addition to compiling the file as
     specified--`-MD' does not inhibit ordinary compilation the way
     `-M' does.

     The Mach utility `md' can be used to merge the `.d' files into a
     single dependency file suitable for using with the `make' command.

`-MMD'
     Like `-MD' except mention only user header files, not system
     header files.

`-H'
     Print the name of each header file used, in addition to other
     normal activities.

`-DMACRO'
     Define macro MACRO with the string `1' as its definition.

`-DMACRO=DEFN'
     Define macro MACRO as DEFN.  All instances of `-D' on the command
     line are processed before any `-U' options.

`-UMACRO'
     Undefine macro MACRO.  `-U' options are evaluated after all `-D'
     options, but before any `-include' and `-imacros' options.

`-dM'
     Tell the preprocessor to output only a list of the macro
     definitions that are in effect at the end of preprocessing.  Used
     with the `-E' option.

`-dD'
     Tell the preprocessing to pass all macro definitions into the
     output, in their proper sequence in the rest of the output.

`-dN'
     Like `-dD' except that the macro arguments and contents are
     omitted. Only `#define NAME' is included in the output.

`-trigraphs'
     Support ANSI C trigraphs.  You don't want to know about this
     brain-damage.  The `-ansi' option also has this effect.


@EndNode

@Node "Link Options" "gcc.guide/Link Options"
@Next "Directory Options"
@Prev "Preprocessor Options"
@Toc "Invoking GCC"

Options for Linking
===================

   These options come into play when the compiler links object files
into an executable output file.  They are meaningless if the compiler is
not doing a link step.

`OBJECT-FILE-NAME'
     A file name that does not end in a special recognized suffix is
     considered to name an object file or library.  (Object files are
     distinguished from libraries by the linker according to the file
     contents.)  If linking is done, these object files are used as
     input to the linker.

`-c'
`-S'
`-E'
     If any of these options is used, then the linker is not run, and
     object file names should not be used as arguments.  See
     @{"Overall Options" Link "Overall Options"}.

`-lLIBRARY'
     Search the library named LIBRARY when linking.

     It makes a difference where in the command you write this option;
     the linker searches processes libraries and object files in the
     order they are specified.  Thus, `foo.o -lz bar.o' searches
     library `z' after file `foo.o' but before `bar.o'.  If `bar.o'
     refers to functions in `z', those functions may not be loaded.

     The linker searches a standard list of directories for the library,
     which is actually a file named `libLIBRARY.a'.  The linker then
     uses this file as if it had been specified precisely by name.

     The directories searched include several standard system
     directories plus any that you specify with `-L'.

     Normally the files found this way are library files--archive files
     whose members are object files.  The linker handles an archive
     file by scanning through it for members which define symbols that
     have so far been referenced but not defined.  But if the file that
     is found is an ordinary object file, it is linked in the usual
     fashion.  The only difference between using an `-l' option and
     specifying a file name is that `-l' surrounds LIBRARY with `lib'
     and `.a' and searches several directories.

`-nostdlib'
     Don't use the standard system libraries and startup files when
     linking. Only the files you specify will be passed to the linker.

`-static'
     On systems that support dynamic linking, this prevents linking
     with the shared libraries.  On other systems, this option has no
     effect.

`-shared'
     Produce a shared object which can then be linked with other
     objects to form an executable.  Only a few systems support this
     option.

`-symbolic'
     Bind references to global symbols when building a shared object. 
     Warn about any unresolved references (unless overridden by the
     link editor option `-Xlinker -z -Xlinker defs').  Only a few
     systems support this option.

`-Xlinker OPTION'
     Pass OPTION as an option to the linker.  You can use this to
     supply system-specific linker options which GNU CC does not know
     how to recognize.

     If you want to pass an option that takes an argument, you must use
     `-Xlinker' twice, once for the option and once for the argument.
     For example, to pass `-assert definitions', you must write
     `-Xlinker -assert -Xlinker definitions'.  It does not work to write
     `-Xlinker "-assert definitions"', because this passes the entire
     string as a single argument, which is not what the linker expects.


@EndNode

@Node "Directory Options" "gcc.guide/Directory Options"
@Next "Target Options"
@Prev "Link Options"
@Toc "Invoking GCC"

Options for Directory Search
============================

   These options specify directories to search for header files, for
libraries and for parts of the compiler:

`-IDIR'
     Append directory DIR to the list of directories searched for
     include files.

`-I-'
     Any directories you specify with `-I' options before the `-I-'
     option are searched only for the case of `#include "FILE"'; they
     are not searched for `#include <FILE>'.

     If additional directories are specified with `-I' options after
     the `-I-', these directories are searched for all `#include'
     directives.  (Ordinarily *all* `-I' directories are used this way.)

     In addition, the `-I-' option inhibits the use of the current
     directory (where the current input file came from) as the first
     search directory for `#include "FILE"'.  There is no way to
     override this effect of `-I-'.  With `-I.' you can specify
     searching the directory which was current when the compiler was
     invoked.  That is not exactly the same as what the preprocessor
     does by default, but it is often satisfactory.

     `-I-' does not inhibit the use of the standard system directories
     for header files.  Thus, `-I-' and `-nostdinc' are independent.

`-LDIR'
     Add directory DIR to the list of directories to be searched for
     `-l'.

`-BPREFIX'
     This option specifies where to find the executables, libraries and
     data files of the compiler itself.

     The compiler driver program runs one or more of the subprograms
     `cpp', `cc1', `as' and `ld'.  It tries PREFIX as a prefix for each
     program it tries to run, both with and without `MACHINE/VERSION/'
     (see @{"Target Options" Link "Target Options"}).

     For each subprogram to be run, the compiler driver first tries the
     `-B' prefix, if any.  If that name is not found, or if `-B' was
     not specified, the driver tries two standard prefixes, which are
     `/usr/lib/gcc/' and `/usr/local/lib/gcc-lib/'.  If neither of
     those results in a file name that is found, the unmodified program
     name is searched for using the directories specified in your
     `PATH' environment variable.

     `-B' prefixes that effectively specify directory names also apply
     to libraries in the linker, because the compiler translates these
     options into `-L' options for the linker.

     The run-time support file `libgcc.a' can also be searched for using
     the `-B' prefix, if needed.  If it is not found there, the two
     standard prefixes above are tried, and that is all.  The file is
     left out of the link if it is not found by those means.

     Another way to specify a prefix much like the `-B' prefix is to use
     the environment variable `GCC_EXEC_PREFIX'.  See
     @{"Environment Variables" Link "Environment Variables"}.


@EndNode

@Node "Target Options" "gcc.guide/Target Options"
@Next "Submodel Options"
@Prev "Directory Options"
@Toc "Invoking GCC"

Specifying Target Machine and Compiler Version
==============================================

   By default, GNU CC compiles code for the same type of machine that
you are using.  However, it can also be installed as a cross-compiler,
to compile for some other type of machine.  In fact, several different
configurations of GNU CC, for different target machines, can be
installed side by side.  Then you specify which one to use with the
`-b' option.

   In addition, older and newer versions of GNU CC can be installed side
by side.  One of them (probably the newest) will be the default, but
you may sometimes wish to use another.

`-b MACHINE'
     The argument MACHINE specifies the target machine for compilation.
     This is useful when you have installed GNU CC as a cross-compiler.

     The value to use for MACHINE is the same as was specified as the
     machine type when configuring GNU CC as a cross-compiler.  For
     example, if a cross-compiler was configured with `configure
     i386v', meaning to compile for an 80386 running System V, then you
     would specify `-b i386v' to run that cross compiler.

     When you do not specify `-b', it normally means to compile for the
     same type of machine that you are using.

`-V VERSION'
     The argument VERSION specifies which version of GNU CC to run.
     This is useful when multiple versions are installed.  For example,
     VERSION might be `2.0', meaning to run GNU CC version 2.0.

     The default version, when you do not specify `-V', is controlled
     by the way GNU CC is installed.  Normally, it will be a version
     that is recommended for general use.

   The `-b' and `-V' options actually work by controlling part of the
file name used for the executable files and libraries used for
compilation.  A given version of GNU CC, for a given target machine, is
normally kept in the directory `/usr/local/lib/gcc-lib/MACHINE/VERSION'.

   It follows that sites can customize the effect of `-b' or `-V'
either by changing the names of these directories or adding alternate
names (or symbolic links).  Thus, if `/usr/local/lib/gcc-lib/80386' is
a link to `/usr/local/lib/gcc-lib/i386v', then `-b 80386' will be an
alias for `-b i386v'.

   In one respect, the `-b' or `-V' do not completely change to a
different compiler: the top-level driver program `gcc' that you
originally invoked continues to run and invoke the other executables
(preprocessor, compiler per se, assembler and linker) that do the real
work.  However, since no real work is done in the driver program, it
usually does not matter that the driver program in use is not the one
for the specified target and version.

   The only way that the driver program depends on the target machine is
in the parsing and handling of special machine-specific options.
However, this is controlled by a file which is found, along with the
other executables, in the directory for the specified version and
target machine.  As a result, a single installed driver program adapts
to any specified target machine and compiler version.

   The driver program executable does control one significant thing,
however: the default version and target machine.  Therefore, you can
install different instances of the driver program, compiled for
different targets or versions, under different names.

   For example, if the driver for version 2.0 is installed as `ogcc'
and that for version 2.1 is installed as `gcc', then the command `gcc'
will use version 2.1 by default, while `ogcc' will use 2.0 by default. 
However, you can choose either version with either command with the
`-V' option.


@EndNode

@Node "Submodel Options" "gcc.guide/Submodel Options"
@Next "Code Gen Options"
@Prev "Target Options"
@Toc "Invoking GCC"

Specifying Hardware Models and Configurations
=============================================

   Earlier we discussed the standard option `-b' which chooses among
different installed compilers for completely different target machines,
such as Vax vs. 68000 vs. 80386.

   In addition, each of these target machine types can have its own
special options, starting with `-m', to choose among various hardware
models or configurations--for example, 68010 vs 68020, floating
coprocessor or none.  A single installed version of the compiler can
compile for any model or configuration, according to the options
specified.

   These options are defined by the macro `TARGET_SWITCHES' in the
machine description.  The default for the options is also defined by
that macro, which enables you to change the defaults.


 @{" M680x0 Options " Link "M680x0 Options"} 
 @{" VAX Options " Link "VAX Options"} 
 @{" SPARC Options " Link "SPARC Options"} 
 @{" Convex Options " Link "Convex Options"} 
 @{" AMD29K Options " Link "AMD29K Options"} 
 @{" M88K Options " Link "M88K Options"} 
 @{" RS-6000 Options " Link "RS-6000 Options"} 
 @{" RT Options " Link "RT Options"} 
 @{" MIPS Options " Link "MIPS Options"} 
 @{" i386 Options " Link "i386 Options"} 


@EndNode

@Node "M680x0 Options" "gcc.guide/M680x0 Options"
@Next "Vax Options"
@Prev "Submodel Options"
@Toc "Submodel Options"

M680x0 Options
--------------

   These are the `-m' options defined for the 68000 series.  The default
values for these options depends on which style of 68000 was selected
when the compiler was configured; the defaults for the most common
choices are given below.

`-m68020'
`-mc68020'
     Generate output for a 68020 (rather than a 68000).  This is the
     default when the compiler is configured for 68020-based systems.

`-m68000'
`-mc68000'
     Generate output for a 68000 (rather than a 68020).  This is the
     default when the compiler is configured for a 68000-based systems.

`-m68881'
     Generate output containing 68881 instructions for floating point.
     This is the default for most 68020 systems unless `-nfp' was
     specified when the compiler was configured.

`-mfpa'
     Generate output containing Sun FPA instructions for floating point.

`-msoft-float'
     Generate output containing library calls for floating point.
     *Warning:* the requisite libraries are not part of GNU CC.
     Normally the facilities of the machine's usual C compiler are
     used, but this can't be done directly in cross-compilation.  You
     must make your own arrangements to provide suitable library
     functions for cross-compilation.

`-mshort'
     Consider type `int' to be 16 bits wide, like `short int'.

`-mnobitfield'
     Do not use the bit-field instructions.  `-m68000' implies
     `-mnobitfield'.

`-mbitfield'
     Do use the bit-field instructions.  `-m68020' implies
     `-mbitfield'.  This is the default if you use the unmodified
     sources configured for a 68020.

`-mrtd'
     Use a different function-calling convention, in which functions
     that take a fixed number of arguments return with the `rtd'
     instruction, which pops their arguments while returning.  This
     saves one instruction in the caller since there is no need to pop
     the arguments there.

     This calling convention is incompatible with the one normally used
     on Unix, so you cannot use it if you need to call libraries
     compiled with the Unix compiler.

     Also, you must provide function prototypes for all functions that
     take variable numbers of arguments (including `printf'); otherwise
     incorrect code will be generated for calls to those functions.

     In addition, seriously incorrect code will result if you call a
     function with too many arguments.  (Normally, extra arguments are
     harmlessly ignored.)

     The `rtd' instruction is supported by the 68010 and 68020
     processors, but not by the 68000.


@EndNode

@Node "VAX Options" "gcc.guide/VAX Options"
@Next "Sparc Options"
@Prev "M680x0 Options"
@Toc "Submodel Options"

VAX Options
-----------

   These `-m' options are defined for the Vax:

`-munix'
     Do not output certain jump instructions (`aobleq' and so on) that
     the Unix assembler for the Vax cannot handle across long ranges.

`-mgnu'
     Do output those jump instructions, on the assumption that you will
     assemble with the GNU assembler.

`-mg'
     Output code for g-format floating point numbers instead of
     d-format.


@EndNode

@Node "Sparc Options" "gcc.guide/Sparc Options"
@Next "Convex Options"
@Prev "Vax Options"
@Toc "Submodel Options"

SPARC Options
-------------

   These `-m' switches are supported on the Sparc:

`-mforce-align'
     Make sure all objects of type `double' are 8-byte aligned in memory
     and use double-word instructions to reference them.

`-mno-epilogue'
     Generate separate return instructions for `return' statements.
     This has both advantages and disadvantages; I don't recall what
     they are.


@EndNode

@Node "Convex Options" "gcc.guide/Convex Options"
@Next "AMD29K Options"
@Prev "SPARC Options"
@Toc "Submodel Options"

Convex Options
--------------

   These `-m' options are defined for the Convex:

`-mc1'
     Generate output for a C1.  This is the default when the compiler is
     configured for a C1.

`-mc2'
     Generate output for a C2.  This is the default when the compiler is
     configured for a C2.

`-margcount'
     Generate code which puts an argument count in the word preceding
     each argument list.  Some nonportable Convex and Vax programs need
     this word. (Debuggers don't, except for functions with
     variable-length argument lists; this info is in the symbol table.)

`-mnoargcount'
     Omit the argument count word.  This is the default if you use the
     unmodified sources.


@EndNode

@Node "AMD29K Options" "gcc.guide/AMD29K Options"
@Next "M88K Options"
@Prev "Convex Options"
@Toc "Submodel Options"

AMD29K Options
--------------

   These `-m' options are defined for the AMD Am29000:

`-mdw'
     Generate code that assumes the `DW' bit is set, i.e., that byte and
     halfword operations are directly supported by the hardware.  This
     is the default.

`-mnodw'
     Generate code that assumes the `DW' bit is not set.

`-mbw'
     Generate code that assumes the system supports byte and halfword
     write operations.  This is the default.

`-mnbw'
     Generate code that assumes the systems does not support byte and
     halfword write operations.  `-mnbw' implies `-mnodw'.

`-msmall'
     Use a small memory model that assumes that all function addresses
     are either within a single 256 KB segment or at an absolute
     address of less than 256K.  This allows the `call' instruction to
     be used instead of a `const', `consth', `calli' sequence.

`-mlarge'
     Do not assume that the `call' instruction can be used; this is the
     default.

`-m29050'
     Generate code for the Am29050.

`-m29000'
     Generate code for the Am29000.  This is the default.

`-mkernel-registers'
     Generate references to registers `gr64-gr95' instead of
     `gr96-gr127'.  This option can be used when compiling kernel code
     that wants a set of global registers disjoint from that used by
     user-mode code.

     Note that when this option is used, register names in `-f' flags
     must use the normal, user-mode, names.

`-muser-registers'
     Use the normal set of global registers, `gr96-gr127'.  This is the
     default.

`-mstack-check'
     Insert a call to `__msp_check' after each stack adjustment.  This
     is often used for kernel code.


@EndNode

@Node "M88K Options" "gcc.guide/M88K Options"
@Next "RS-6000 Options"
@Prev "AMD29K Options"
@Toc "Submodel Options"

M88K Options
------------

   These `-m' options are defined for Motorola 88K architectures:

`-m88000'
     Generate code that works well on both the m88100 and the m88110.

`-m88100'
     Generate code tha Generate code that works best for the m88100,
     but that also runs on the m88110.

`-m88110'
     Generate code that works best for the m88110, and may not run on
     the m88100.

`-midentify-revision'
     Include an `ident' directive in the assembler output recording the
     source file name, compiler name and version, timestamp, and
     compilation flags used.

`-mno-underscores'
     In assembler output, emit symbol names without adding an underscore
     character at the beginning of each name.  The default is to use an
     underscore as prefix on each name.

`-mocs-debug-info'
`-mno-ocs-debug-info'
     Include (or omit) additional debugging information (about
     registers used in each stack frame) as specified in the 88open
     Object Compatibility Standard, "OCS".  This extra information
     allows debugging of code that has had the frame pointer
     eliminated.  The default for DG/UX, SVr4, and Delta 88 SVr3.2 is
     to include this information; other 88k configurations omit this
     information by default.

`-mocs-frame-position'
     When emitting COFF debugging information for automatic variables
     and parameters stored on the stack, use the offset from the
     canonical frame address, which is the stack pointer (register 31)
     on entry to the function.  The DG/UX, SVr4, Delta88 SVr3.2, and
     BCS configurations use `-mocs-frame-position'; other 88k
     configurations have the default `-mno-ocs-frame-position'.

`-mno-ocs-frame-position'
     When emitting COFF debugging information for automatic variables
     and parameters stored on the stack, use the offset from the frame
     pointer register (register 30).  When this option is in effect,
     the frame pointer is not eliminated when debugging information is
     selected by the -g switch.

`-moptimize-arg-area'
`-mno-optimize-arg-area'
     Control how to store function arguments in stack frames.
     `-moptimize-arg-area' saves space, but was ruled illegal by 88open.
     `-mno-optimize-arg-area' conforms to the 88open standards.  By
     default GNU CC does not optimize the argument area.

`-mshort-data-NUM'
     Generate smaller data references by making them relative to `r0',
     which allows loading a value using a single instruction (rather
     than the usual two).  You control which data references are
     affected by specifying NUM with this option.  For example, if you
     specify `-mshort-data-512', then the data references affected are
     those involving displacements of less than 512 bytes.
     `-mshort-data-NUM' is not effective for NUM greater than 64K.

`-msvr4'
`-msvr3'
     Turn on (`-msvr4') or off (`-msvr3') compiler extensions related
     to System V release 4 (SVr4).  This controls the following:

       1. Which variant of the assembler syntax to emit (which you can
          select independently using `-mversion-03.00').

       2. `-msvr4' makes the C preprocessor recognize `#pragma weak'
          that is used on System V release 4.

       3. `-msvr4' makes GNU CC issue additional declaration directives
          used in SVr4.

     `-msvr3' is the default for all m88K configurations except the
     SVr4 configuration.

`-mversion-03.00'
     In the DG/UX configuration, there are two flavors of SVr4.  This
     option modifies `-msvr4' to select whether the hybrid-COFF or
     real-ELF flavor is used.  All other configurations ignore this
     option.

`-mno-check-zero-division'
`-mcheck-zero-division'
     Early models of the 88K architecture had problems with division by
     zero; in particular, many of them didn't trap.  Use these options
     to avoid including (or to include explicitly) additional code to
     detect division by zero and signal an exception.  All GNU CC
     configurations for the 88K use `-mcheck-zero-division' by default.

`-muse-div-instruction'
     Do not emit code to check both the divisor and dividend when doing
     signed integer division to see if either is negative, and adjust
     the signs so the divide is done using non-negative numbers. 
     Instead, rely on the operating system to calculate the correct
     value when the `div' instruction traps.  This results in different
     behavior when the most negative number is divided by -1, but is
     useful when most or all signed integer divisions are done with
     positive numbers.

`-mtrap-large-shift'
`-mhandle-large-shift'
     Include code to detect bit-shifts of more than 31 bits;
     respectively, trap such shifts or emit code to handle them
     properly.  By default GNU CC makes no special provision for large
     bit shifts.

`-mwarn-passed-structs'
     Warn when a function passes a struct as an argument or result.
     Structure-passing conventions have changed during the evolution of
     the C language, and are often the source of portability problems. 
     By default, GNU CC issues no such warning.


@EndNode

@Node "RS-6000 Options" "gcc.guide/RS-6000 Options"
@Next "RT Options"
@Prev "M88K Options"
@Toc "Submodel Options"

IBM RS/6000 Options
-------------------

   Only one pair of `-m' options is defined for the IBM RS/6000:

`-mfp-in-toc'
`-mno-fp-in-toc'
     Control whether or not floating-point constants go in the Table of
     Contents (TOC), a table of all global variable and function
     addresses.  By default GNU CC puts floating-point constants there;
     if the TOC overflows, `-mno-fp-in-toc' will reduce the size of the
     TOC, which may avoid the overflow.


@EndNode

@Node "RT Options" "gcc.guide/RT Options"
@Next "MIPS Options"
@Prev "RS-6000 Options"
@Toc "Submodel Options"

IBM RT Options
--------------

   These `-m' options are defined for the IBM RT PC:

`-min-line-mul'
     Use an in-line code sequence for integer multiplies.  This is the
     default.

`-mcall-lib-mul'
     Call `lmul$$' for integer multiples.

`-mfull-fp-blocks'
     Generate full-size floating point data blocks, including the
     minimum amount of scratch space recommended by IBM.  This is the
     default.

`-mminimum-fp-blocks'
     Do not include extra scratch space in floating point data blocks. 
     This results in smaller code, but slower execution, since scratch
     space must be allocated dynamically.

`-mfp-arg-in-fpregs'
     Use a calling sequence incompatible with the IBM calling
     convention in which floating point arguments are passed in
     floating point registers. Note that `varargs.h' and `stdargs.h'
     will not work with floating point operands if this option is
     specified.

`-mfp-arg-in-gregs'
     Use the normal calling convention for floating point arguments. 
     This is the default.

`-mhc-struct-return'
     Return structures of more than one word in memory, rather than in a
     register.  This provides compatibility with the MetaWare HighC (hc)
     compiler.  Use `-fpcc-struct-return' for compatibility with the
     Portable C Compiler (pcc).

`-mnohc-struct-return'
     Return some structures of more than one word in registers, when
     convenient.  This is the default.  For compatibility with the
     IBM-supplied compilers, use either `-fpcc-struct-return' or
     `-mhc-struct-return'.


@EndNode

@Node "MIPS Options" "gcc.guide/MIPS Options"
@Next "i386 Options"
@Prev "RT Options"
@Toc "Submodel Options"

MIPS Options
------------

   These `-m' options are defined for the MIPS family of computers:

`-mcpu=CPU TYPE'
     Assume the defaults for the machine type CPU TYPE when scheduling
     instructions.  The default CPU TYPE is `default', which picks the
     longest cycles times for any of the machines, in order that the
     code run at reasonable rates on all MIPS cpu's.  Other choices for
     CPU TYPE are `r2000', `r3000', `r4000', and `r6000'.  While
     picking a specific CPU TYPE will schedule things appropriately for
     that particular chip, the compiler will not generate any code that
     does not meet level 1 of the MIPS ISA (instruction set
     architecture) without the `-mips2' or `-mips3' switches being used.

`-mips2'
     Issue instructions from level 2 of the MIPS ISA (branch likely,
     square root instructions).  The `-mcpu=r4000' or `-mcpu=r6000'
     switch must be used in conjunction with `-mips2'.

`-mips3'
     Issue instructions from level 3 of the MIPS ISA (64 bit
     instructions). You must use the `-mcpu=r4000' switch along with
     `-mips3'.

`-mint64'
`-mlong64'
`-mlonglong128'
     These options don't work at present.

`-mmips-as'
     Generate code for the MIPS assembler, and invoke `mips-tfile' to
     add normal debug information.  This is the default for all
     platforms except for the OSF/1 reference platform, using the
     OSF/rose object format.  If the either of the `-gstabs' or
     `-gstabs+' switches are used, the `mips-tfile' program will
     encapsulate the stabs within MIPS ECOFF.

`-mgas'
     Generate code for the GNU assembler.  This is the default on the
     OSF/1 reference platform, using the OSF/rose object format.

`-mrnames'
`-mno-rnames'
     The `-mrnames' switch says to output code using the MIPS software
     names for the registers, instead of the hardware names (ie, A0
     instead of $4).  The GNU assembler does not support the `-mrnames'
     switch, and the MIPS assembler will be instructed to run the MIPS
     C preprocessor over the source file.  The `-mno-rnames' switch is
     default.

`-mgpopt'
`-mno-gpopt'
     The `-mgpopt' switch says to write all of the data declarations
     before the instructions in the text section, this allows the MIPS
     assembler to generate one word memory references instead of using
     two words for short global or static data items.  This is on by
     default if optimization is selected.

`-mstats'
`-mno-stats'
     For each non-inline function processed, the `-mstats' switch
     causes the compiler to emit one line to the standard error file to
     print statistics about the program (number of registers saved,
     stack size, etc.).

`-mmemcpy'
`-mno-memcpy'
     The `-mmemcpy' switch makes all block moves call the appropriate
     string function (`memcpy' or `bcopy') instead of possibly
     generating inline code.

`-mmips-tfile'
`-mno-mips-tfile'
     The `-mno-mips-tfile' switch causes the compiler not postprocess
     the object file with the `mips-tfile' program, after the MIPS
     assembler has generated it to add debug support.  If `mips-tfile'
     is not run, then no local variables will be available to the
     debugger.  In addition, `stage2' and `stage3' objects will have
     the temporary file names passed to the assembler embedded in the
     object file, which means the objects will not compare the same. 
     The `-mno-mips-tfile' switch should only be used when there are
     bugs in the `mips-tfile' program that prevents compilation.

`-msoft-float'
     Generate output containing library calls for floating point.
     *Warning:* the requisite libraries are not part of GNU CC.
     Normally the facilities of the machine's usual C compiler are
     used, but this can't be done directly in cross-compilation.  You
     must make your own arrangements to provide suitable library
     functions for cross-compilation.

`-mhard-float'
     Generate output containing floating point instructions.  This is
     the default if you use the unmodified sources.

`-mfp64'
     Assume that the FR bit in the status word is on, and that there
     are 32 64-bit floating point registers, instead of 32 32-bit
     floating point registers.  You must also specify the `-mcpu=r4000'
     and `-mips3' switches.

`-mfp32'
     Assume that there are 32 32-bit floating point registers.  This is
     the default.

`-mabicalls'
`-mno-abicalls'
     Emit the `.abicalls', `.cpload', and `.cprestore' pseudo
     operations that some System V.4 ports use for position independent
     code.

`-mhalf-pic'
`-mno-half-pic'
     Put pointers to extern references into the data section and load
     them up, rather than put the references in the text section. 
     These options do not work at present.

`-G NUM'
     Put global and static items less than or equal to NUM bytes into
     the small data or bss sections instead of the normal data or bss
     section.  This allows the assembler to emit one word memory
     reference instructions based on the global pointer (GP or $28),
     instead of the normal two words used.  By default, NUM is 8 when
     the MIPS assembler is used, and 0 when the GNU assembler is used. 
     The `-G NUM' switch is also passed to the assembler and linker.
     All modules should be compiled with the same `-G NUM' value.

`-nocpp'
     Tell the MIPS assembler to not run it's preprocessor over user
     assembler files (with a `.s' suffix) when assembling them.

   These options are defined by the macro `TARGET_SWITCHES' in the
machine description.  The default for the options is also defined by
that macro, which enables you to change the defaults.


@EndNode

@Node "i386 Options" "gcc.guide/i386 Options"
@Prev "MIPS Options"
@Toc "Submodel Options"

Intel 386 Options
-----------------

   These `-m' options are defined for the i386 family of computers:

`-m486'
`-mno486'
     Control whether or not code is optimized for a 486 instead of an
     386.  Code generated for an 486 will run on a 386 and vice versa.

`-msoft-float'
     Generate output containing library calls for floating point.
     *Warning:* the requisite libraries are not part of GNU CC.
     Normally the facilities of the machine's usual C compiler are
     used, but this can't be done directly in cross-compilation.  You
     must make your own arrangements to provide suitable library
     functions for cross-compilation.

     On machines where a function returnings float point results in the
     80387 register stack, some floating point opcodes may be emitted
     even if `-msoft-float' is used.


@EndNode

@Node "Code Gen Options" "gcc.guide/Code Gen Options"
@Next "Environment Variables"
@Prev "Submodel Options"
@Toc "Invoking GCC"

Options for Code Generation Conventions
=======================================

   These machine-independent options control the interface conventions
used in code generation.

   Most of them have both positive and negative forms; the negative form
of `-ffoo' would be `-fno-foo'.  In the table below, only one of the
forms is listed--the one which is not the default.  You can figure out
the other form by either removing `no-' or adding it.

`-fpcc-struct-return'
     Use the same convention for returning `struct' and `union' values
     that is used by the usual C compiler on your system.  This
     convention is less efficient for small structures, and on many
     machines it fails to be reentrant; but it has the advantage of
     allowing intercallability between GNU CC-compiled code and
     PCC-compiled code.

`-fshort-enums'
     Allocate to an `enum' type only as many bytes as it needs for the
     declared range of possible values.  Specifically, the `enum' type
     will be equivalent to the smallest integer type which has enough
     room.

`-fshort-double'
     Use the same size for `double' as for `float'.

`-fshared-data'
     Requests that the data and non-`const' variables of this
     compilation be shared data rather than private data.  The
     distinction makes sense only on certain operating systems, where
     shared data is shared between processes running the same program,
     while private data exists in one copy per process.

`-fno-common'
     Allocate even uninitialized global variables in the bss section of
     the object file, rather than generating them as common blocks. 
     This has the effect that if the same variable is declared (without
     `extern') in two different compilations, you will get an error
     when you link them. The only reason this might be useful is if you
     wish to verify that the program will work on other systems which
     always work this way.

`-fno-ident'
     Ignore the `#ident' directive.

`-fno-gnu-linker'
     Don't output global initializations such as C++ constructors and
     destructors in the form used by the GNU linker (on systems where
     the GNU linker is the standard method of handling them).  Use this
     option when you want to use a "collect" program and a non-GNU
     linker.

`-finhibit-size-directive'
     Don't output a `.size' assembler directive, or anything else that
     would cause trouble if the function is split in the middle, and the
     two halves are placed at locations far apart in memory.  This
     option is used when compiling `crtstuff.c'; you should not need to
     use it for anything else.

`-fverbose-asm'
     Put extra commentary information in the generated assembly code to
     make it more readable.  This option is generally only of use to
     those who actually need to read the generated assembly code
     (perhaps while debugging the compiler itself).

`-fvolatile'
     Consider all memory references through pointers to be volatile.

`-fpic'
     If supported for the target machines, generate position-independent
     code, suitable for use in a shared library.  All addresses will be
     accessed through a global offset table (GOT).  If the GOT size for
     the linked executable exceeds a machine-specific maximum size, you
     will get an error message from the linker indicating that `-fpic'
     does not work; recompile with `-fPIC' instead.  (These maximums
     are 16k on the m88k, 8k on the Sparc, and 32k on the m68k and
     RS/6000.  The 386 has no such limit.)

     Position-independent code requires special support, and therefore
     works only on certain machines.  Code generated for the IBM
     RS/6000 is always position-independent.

     The GNU assembler does not fully support PIC.  Currently, you must
     use some other assembler in order for PIC to work.  We would
     welcome volunteers to upgrade GAS to handle this; the first part
     of the job is to figure out what the assembler must do differently.

`-fPIC'
     If supported for the target machine, emit position-independent
     code, suitable for dynamic linking and avoiding any limit on the
     size of the global offset table.  This option makes a difference
     on the m68k, m88k and the Sparc.

     Position-independent code requires special support, and therefore
     works only on certain machines.

`-ffixed-REG'
     Treat the register named REG as a fixed register; generated code
     should never refer to it (except perhaps as a stack pointer, frame
     pointer or in some other fixed role).

     REG must be the name of a register.  The register names accepted
     are machine-specific and are defined in the `REGISTER_NAMES' macro
     in the machine description macro file.

     This flag does not have a negative form, because it specifies a
     three-way choice.

`-fcall-used-REG'
     Treat the register named REG as an allocatable register that is
     clobbered by function calls.  It may be allocated for temporaries
     or variables that do not live across a call.  Functions compiled
     this way will not save and restore the register REG.

     Use of this flag for a register that has a fixed pervasive role in
     the machine's execution model, such as the stack pointer or frame
     pointer, will produce disastrous results.

     This flag does not have a negative form, because it specifies a
     three-way choice.

`-fcall-saved-REG'
     Treat the register named REG as an allocatable register saved by
     functions.  It may be allocated even for temporaries or variables
     that live across a call.  Functions compiled this way will save
     and restore the register REG if they use it.

     Use of this flag for a register that has a fixed pervasive role in
     the machine's execution model, such as the stack pointer or frame
     pointer, will produce disastrous results.

     A different sort of disaster will result from the use of this flag
     for a register in which function values may be returned.

     This flag does not have a negative form, because it specifies a
     three-way choice.


@EndNode

@Node "Environment Variables" "gcc.guide/Environment Variables"
@Prev "Code Gen Options"
@Toc "Invoking GCC"

Environment Variables Affecting GNU CC
======================================

   This section describes several environment variables that affect how
GNU CC operates.  They work by specifying directories or prefixes to use
when searching for various kinds of files.

   Note that you can also specify places to search using options such as
`-B', `-I' and `-L' (see @{"Directory Options" Link "Directory Options"}).  These take precedence
over places specified using environment variables, which in turn take
precedence over those specified by the configuration of GNU CC.  See
@{"Driver" Link "Driver"}.

`TMPDIR'
     If `TMPDIR' is set, it specifies the directory to use for temporary
     files.  GNU CC uses temporary files to hold the output of one
     stage of compilation which is to be used as input to the next
     stage: for example, the output of the preprocessor, which is the
     input to the compiler proper.

`GCC_EXEC_PREFIX'
     If `GCC_EXEC_PREFIX' is set, it specifies a prefix to use in the
     names of the subprograms executed by the compiler.  No slash is
     added when this prefix is combined with the name of a subprogram,
     but you can specify a prefix that ends with a slash if you wish.

     If GNU CC cannot find the subprogram using the specified prefix, it
     tries looking in the usual places for the subprogram.

     Other prefixes specified with `-B' take precedence over this
     prefix.

     This prefix is also used for finding files such as `crt0.o' that
     are used for linking.

     In addition, the prefix is used in an unusual way in finding the
     directories to search for header files.  For each of the standard
     directories whose name normally begins with
     `/usr/local/lib/gcc-lib' (more precisely, with the value of
     `GCC_INCLUDE_DIR'), GNU CC tries replacing that beginning with the
     specified prefix to produce an alternate directory name.  Thus,
     with `-Bfoo/', GNU CC will search `foo/bar' where it would
     normally search `/usr/local/lib/bar'. These alternate directories
     are searched first; the standard directories come next.

`COMPILER_PATH'
     The value of `COMPILER_PATH' is a colon-separated list of
     directories, much like `PATH'.  GNU CC tries the directories thus
     specified when searching for subprograms, if it can't find the
     subprograms using `GCC_EXEC_PREFIX'.

`LIBRARY_PATH'
     The value of `LIBRARY_PATH' is a colon-separated list of
     directories, much like `PATH'.  GNU CC tries the directories thus
     specified when searching for special linker files, if it can't
     find them using `GCC_EXEC_PREFIX'.  Linking using GNU CC also uses
     these directories when searching for ordinary libraries for the
     `-l' option (but directories specified with `-L' come first).

`C_INCLUDE_PATH'
`CPLUS_INCLUDE_PATH'
`OBJC_INCLUDE_PATH'
     These environment variables pertain to particular languages.  Each
     variable's value is a colon-separated list of directories, much
     like `PATH'.  When GNU CC searches for header files, it tries the
     directories listed in the variable for the language you are using,
     after the directories specified with `-I' but before the standard
     header file directories.

`DEPENDENCIES_OUTPUT'
     If this variable is set, its value specifies how to output
     dependencies for Make based on the header files processed by the
     compiler.  This output looks much like the output from the `-M'
     option (see @{"Preprocessor Options" Link "Preprocessor Options"}), but it goes to a separate file,
     and is in addition to the usual results of compilation.

     The value of `DEPENDENCIES_OUTPUT' can be just a file name, in
     which case the Make rules are written to that file, guessing the
     target name from the source file name.  Or the value can have the
     form `FILE TARGET', in which case the rules are written to file
     FILE using TARGET as the target name.


@EndNode

@Node "Installation" "gcc.guide/Installation"
@Next "Extensions"
@Prev "Invoking GCC"
@Toc "Main"

Installing GNU CC
*****************

   Here is the procedure for installing GNU CC on a Unix system.


 @{" Other Dir " Link "Other Dir"}      Compiling in a separate directory (not where the source is).
 @{" Cross-Compiler " Link "Cross-Compiler"}    Building and installing a cross-compiler.
 @{" PA Install " Link "PA Install"}     See below for installation on the HP Precision Architecture.
 @{" Sun Install " Link "Sun Install"}    See below for installation on the Sun.
 @{" 3b1 Install " Link "3b1 Install"}    See below for installation on the 3b1.
 @{" Unos Install " Link "Unos Install"}   See below for installation on Unos (from CRDS).
 @{" VMS Install " Link "VMS Install"}    See below for installation on VMS.

  1. If you have built GNU CC previously in the same directory for a
     different target machine, do `make distclean' to delete all files
     that might be invalid.

  2. On a System V release 4 system, make sure `/usr/bin' precedes
     `/usr/ucb' in `PATH'.  The `cc' command in `/usr/ucb' uses
     libraries which have bugs.

  3. Specify the host and target machine configurations.  You do this by
     running the file `configure' with appropriate arguments.

     If you are building a compiler to produce code for the machine it
     runs on, specify just one machine type.  Use the `--target'
     option; the host type will default to be the same as the target. 
     (For information on building a cross-compiler, see
     @{"Cross-Compiler" Link "Cross-Compiler"}.)  The command looks like this:

          configure --target=sparc-sun-sunos4.1

     A configuration name may be canonical or it may be more or less
     abbreviated.

     A canonical configuration name has three parts, separated by
     dashes. It looks like this: `CPU-COMPANY-SYSTEM'. (The three parts
     may themselves contain dashes; `configure' can figure out which
     dashes serve which purpose.)  For example, `m68k-sun-sunos4.1'
     specifies a Sun 3.

     You can also replace parts of the configuration by nicknames or
     aliases. For example, `sun3' stands for `m68k-sun', so
     `sun3-sunos4.1' is another way to specify a Sun 3.  You can also
     use simply `sun3-sunos', since the version of SunOS is assumed by
     default to be version 4.  `sun3-bsd' also works, since `configure'
     knows that the only BSD variant on a Sun 3 is SunOS.

     You can specify a version number after any of the system types,
     and some of the CPU types.  In most cases, the version is
     irrelevant, and will be ignored.  So you might as well specify the
     version if you know it.

     Here are the possible CPU types:

          a29k, arm, cN, hppa1.0, hppa1.1, i386, i860, i960, m68000,
          m68k, m88k, mips, ns32k, romp, rs6000, sparc, vax, we32k.

     Here are the recognized company names.  As you can see, customary
     abbreviations are used rather than the longer official names.

          alliant, altos, apollo, att, convergent, convex, crds, dec,
          dg, encore, harris, hp, ibm, mips, motorola, ncr, next, ns,
          omron, sequent, sgi, sony, sun, tti, unicom.

     The company name is meaningful only to disambiguate when the rest
     of the information supplied is insufficient.  You can omit it,
     writing just `CPU-SYSTEM', if it is not needed.  For example,
     `vax-ultrix4.2' is equivalent to `vax-dec-ultrix4.2'.

     Here is a list of system types:

          bsd, sysv, mach, minix, genix, ultrix, vms, sco, isc, aix,
          sunos, hpux, unos, luna, dgux, newsos, osfrose, osf, dynix,
          aos, ctix.

     You can omit the system type; then `configure' guesses the
     operating system from the CPU and company.

     You can add a version number to the system type; this may or may
     not make a difference.  For example, you can write `bsd4.3' or
     `bsd4.4' to distinguish versions of BSD.  In practice, the version
     number is most needed for `sysv3' and `sysv4', which are often
     treated differently.

     If you specify an impossible combination such as `i860-dg-vms',
     then you may get an error message from `configure', or it may
     ignore part of the information and do the best it can with the
     rest. `configure' always prints the canonical name for the
     alternative that it used.

     Often a particular model of machine has a name.  Many machine
     names are recognized as aliases for CPU/company combinations. 
     Thus, the machine name `sun3', mentioned above, is an alias for
     `m68k-sun'. Sometimes we accept a company name as a machine name,
     when the name is popularly used for a particular machine.  Here is
     a table of the known machine names:

          3300, 3b1, 3bN, 7300, altos3068, altos, apollo68, att-7300,
          balance, convex-cN, crds, decstation-3100, decstation, delta,
          encore, fx2800, gmicro, hp7NN, hp8NN, hp9k2NN, hp9k3NN,
          hp9k7NN, hp9k8NN, iris4d, iris, isi68, m3230, magnum, merlin,
          miniframe, mmax, news-3600, news800, news, next, pbd, pc532,
          pmax, ps2, risc-news, rtpc, sun2, sun386i, sun386, sun3,
          sun4, symmetry, tower-32, tower.

     Remember that a machine name specifies both the cpu type and the
     company name.

     There are three additional options you can specify independently to
     describe variant hardware and software configurations.  These are
     `--with-gnu-as', `--with-gnu-ld', and `--nfp'.

    `--with-gnu-as'
          On certain systems, you must specify whether you want GNU CC
          to work with the usual compilation tools or with the GNU
          compilation tools (including GAS).  Use the `--with-gnu-as'
          argument when you run `configure', if you want to use the GNU
          tools.  (Specify `--with-gnu-ld' as well, since on these
          systems GAS works only with the GNU linker.)  The systems
          were this makes a difference are `i386-ANYTHING-sysv',
          `i860-ANYTHING-bsd', `m68k-hp-hpux', `m68k-sony-bsd',
          `m68k-altos-sysv', `m68000-hp-hpux', and `m68000-att-sysv'. 
          On any other system, `--with-gnu-as' has no effect.

    `--with-gnu-ld'
          Specify the option `--with-gnu-ld' if you plan to use the GNU
          linker.  This inhibits the installation of `collect2', a
          program which otherwise serves as a front-end for the
          system's linker on most configurations.

    `--nfp'
          On certain systems, you must specify whether the machine has
          a floating point unit.  These systems are `m68k-sun-sunosN'
          and `m68k-isi-bsd'.  On any other system, `--nfp' currently
          has no effect, though perhaps there are other systems where
          it could usefully make a difference.

     If you want to install your own homemade configuration files, you
     can use `local' as the company name to access them.  If you use
     configuration `CPU-local', the entire configuration name is used
     to form the configuration file names.

     Thus, if you specify `m68k-local', then the files used are
     `m68k-local.md', `m68k-local.h', `m68k-local.c',
     `xm-m68k-local.h', `t-m68k-local', and `x-m68k-local'.

     Here is a list of configurations that have special treatment or
     special things you must know:

    `i386-*-sco'
          Compilation with RCC is recommended, but it produces lots of
          spurious warnings.  They do not necessarily indicate that
          anything is wrong.

    `i386-sequent'
          Go to the Berkeley universe before compiling.  In addition,
          you probably need to create a file named `string.h'
          containing just one line: `#include <strings.h>'.

    `m68000-att'
          AT&T 3b1, a.k.a. 7300 PC.  Special procedures are needed to
          compile GNU CC with this machine's standard C compiler, due
          to bugs in that compiler.  See @{"3b1 Install" Link "3b1 Install"}.  You can
          bootstrap it more easily with previous versions of GNU CC if
          you have them.

    `m68000-hp-bsd'
          HP 9000 series 200 running BSD.  Note that the C compiler
          that comes with this system cannot compile GNU CC; contact
          `law@cs.utah.edu' to get binaries of GNU CC for bootstrapping.

    `m68k-altos'
          Altos 3068.  You must use the GNU assembler, linker and
          debugger, with COFF-encapsulation.  Also, you must fix a
          kernel bug.  Details in the file `README.ALTOS'.

    `m68k-hp-hpux'
          HP 9000 series 300 or 400 running HP-UX.  HP-UX version 8.0
          has a bug in the assembler that prevents compilation of GNU
          CC.  To fix it, get patch PHCO_0800 from HP.

          In addition, `--gas' does not currently work with this
          configuration.  Changes in HP-UX have broken the library
          conversion tool and the linker.

    `m68k-sun'
          Sun 3.  We do not provide a configuration file to use the Sun
          FPA by default, because programs that establish signal
          handlers for floating point traps inherently cannot work with
          the FPA.

    `m88k-svr3'
          Motorola m88k running the AT&T/Unisoft/Motorla V.3 reference
          port. These systems tend to use the Green Hills C, revision
          1.8.5, as the standard C compiler.  There are apparently bugs
          in this compiler that result in object files differences
          between stage 2 and stage 3.  If this happens, make the stage
          4 compiler and compare it to the stage 3 compiler.  If the
          stage 3 and stage 4 object files are identical, this suggests
          a problem with the standard C compiler.  It is best, however,
          to use an older version of GNU CC for bootstrapping.

    `m88k-dgux'
          Motorola m88k running DG/UX.  To build native or cross
          compilers on DG/UX, you must first change to the 88open BCS
          software development environment.  This is done by issuing
          this command:

               eval `sde-target m88kbcs`

    `mips-mips-bsd'
          MIPS machines running the MIPS operating system in BSD mode. 
          It's possible that some old versions of the system lack the
          functions `memcpy', `memcmp', and `memset'.  If your system
          lacks these, you must remove or undo the definition of
          `TARGET_MEM_FUNCTIONS' in `mips-bsd.h'.

    `mips-sony-sysv'
          Sony MIPS NEWS.  This works in NEWSOS 5.0.1, but not in 5.0.2
          (which uses ELF instead of COFF).  Support for 5.0.2 will
          probably be provided soon by volunteers.

    `ns32k-encore'
          Encore ns32000 system.  Encore systems are supported only
          under BSD.

    `ns32k-*-genix'
          National Semiconductor ns32000 system.  Genix has bugs in
          `alloca' and `malloc'; you must get the compiled versions of
          these from GNU Emacs.

    `ns32k-sequent'
          Go to the Berkeley universe before compiling.  In addition,
          you probably need to create a file named `string.h'
          containing just one line: `#include <strings.h>'.

    `ns32k-utek'
          UTEK ns32000 system ("merlin").  The C compiler that comes
          with this system cannot compile GNU CC; contact
          `tektronix!reed!mason' to get binaries of GNU CC for
          bootstrapping.

    `romp-*-aos'
    `romp-*-mach'
          The only operating systems supported for the IBM RT PC are
          AOS and MACH.  GNU CC does not support AIX running on the RT.

    `rs6000-*-aix'
          Read the file `README.RS6000' for information on how to get a
          fix for a problem in the IBM assembler that prevents use of
          GNU CC.

    `vax-dec-ultrix'
          Don't try compiling with Vax C (`vcc').  It produces
          incorrect code in some cases (for example, when `alloca' is
          used).

          Meanwhile, compiling `cp-parse.c' with pcc does not work
          because of an internal table size limitation in that
          compiler.  To avoid this problem, compile just the GNU C
          compiler first, and use it to recompile building all the
          languages that you want to run.

    `we32k-att-sysv'
          Don't use `-g' when compiling GNU CC.  The system's linker
          seems to be unable to handle such a large program with
          debugging information.

     Here we spell out what files will be set up by `configure'. 
     Normally you need not be concerned with these files.

        * A symbolic link named `config.h' is made to the top-level
          config file for the machine you will run the compiler on (see
          @{"Config" Link "Config"}). This file is responsible for defining information
          about the host machine.  It includes `tm.h'.

          The top-level config file is located in the subdirectory
          `config'. Its name is always `xm-SOMETHING.h'; usually
          `xm-MACHINE.h', but there are some exceptions.

          If your system does not support symbolic links, you might
          want to set up `config.h' to contain a `#include' command
          which refers to the appropriate file.

        * A symbolic link named `tconfig.h' is made to the top-level
          config file for your target machine.  This is used for
          compiling certain programs to run on that machine.

        * A symbolic link named `tm.h' is made to the
          machine-description macro file for your target machine.  It
          should be in the subdirectory `config' and its name is often
          `MACHINE.h'.

        * A symbolic link named `md' will be made to the machine
          description pattern file.  It should be in the `config'
          subdirectory and its name should be `MACHINE.md'; but MACHINE
          is often not the same as the name used in the `tm.h' file
          because the `md' files are more general.

        * A symbolic link named `aux-output.c' will be made to the
          output subroutine file for your machine.  It should be in the
          `config' subdirectory and its name should be `MACHINE.c'.

        * The command file `configure' also constructs `Makefile' by
          adding some text to the template file `Makefile.in'.  The
          additional text comes from files in the `config' directory,
          named `t-TARGET' and `h-HOST'.  If these files do not exist,
          it means nothing needs to be added for a given target or host.

  4. Make sure the Bison parser generator is installed.  (This is
     unnecessary if the Bison output files `c-parse.c' and `cexp.c' are
     more recent than `c-parse.y' and `cexp.y' and you do not plan to
     change the `.y' files.)

     Bison versions older than Sept 8, 1988 will produce incorrect
     output for `c-parse.c'.

  5. Build the compiler.  Just type `make LANGUAGES=c' in the compiler
     directory.

     `LANGUAGES=c' specifies that only the C compiler should be
     compiled.  The makefile normally builds compilers for all the
     supported languages; currently, C, C++ and Objective C.  However,
     C is the only language that is sure to work when you build with
     other non-GNU C compilers.  In addition, building anything but C
     at this stage is a waste of time.

     In general, you can specify the languages to build by typing the
     argument `LANGUAGES="LIST"', where LIST is one or more words from
     the list `c', `c++', and `objective-c'.

     Ignore any warnings you may see about "statement not reached" in
     `insn-emit.c'; they are normal.  Any other compilation errors may
     represent bugs in the port to your machine or operating system, and
     should be investigated and reported (see @{"Bugs" Link "Bugs"}).

     Some commercial compilers fail to compile GNU CC because they have
     bugs or limitations.  For example, the Microsoft compiler is said
     to run out of macro space.  Some Ultrix compilers run out of
     expression space; then you need to break up the statement where
     the problem happens.

     If you are building with a previous GNU C compiler, do not use
     `CC=gcc' on the make command or by editing the Makefile. Instead,
     use a full pathname to specify the compiler, such as
     `CC=/usr/local/bin/gcc'.  This is because make might execute the
     `gcc' in the current directory before all of the compiler
     components have been built.

  6. If you are using COFF-encapsulation, you must convert `libgcc.a' to
     a GNU-format library at this point.  See the file `README.ENCAP'
     in the directory containing the GNU binary file utilities, for
     directions.

  7. If you are building a cross-compiler, stop here.  See
     @{"Cross-Compiler" Link "Cross-Compiler"}.

  8. Move the first-stage object files and executables into a
     subdirectory with this command:

          make stage1

     The files are moved into a subdirectory named `stage1'. Once
     installation is complete, you may wish to delete these files with
     `rm -r stage1'.

  9. Recompile the compiler with itself, with this command:

          make CC="stage1/gcc -Bstage1/" CFLAGS="-g -O"

     This is called making the stage 2 compiler.

     The command shown above builds compilers for all the supported
     languages.  If you don't want them all, you can specify the
     languages to build by typing the argument `LANGUAGES="LIST"'.  LIST
     should contain one or more words from the list `c', `c++',
     `objective-c', and `proto'.  Separate the words with spaces.
     `proto' stands for the programs `protoize' and `unprotoize'; they
     are not a separate language, but you use `LANGUAGES' to enable or
     disable their installation.

     If you are going to build the stage 3 compiler, then you might
     want to build only the C language in stage 2.

     Once you have built the stage 2 compiler, if you are short of disk
     space, you can delete the subdirectory `stage1'.

     On a 68000 or 68020 system lacking floating point hardware, unless
     you have selected a `tm.h' file that expects by default that there
     is no such hardware, do this instead:

          make CC="stage1/gcc -Bstage1/" CFLAGS="-g -O -msoft-float"

 10. If you wish to test the compiler by compiling it with itself one
     more time, do this:

          make stage2
          make CC="stage2/gcc -Bstage2/" CFLAGS="-g -O"

     This is called making the stage 3 compiler.  Aside from the `-B'
     option, the options should be the same as when you made the stage 2
     compiler.

     The command shown above builds compilers for all the supported
     languages.  If you don't want them all, you can specify the
     languages to build by typing the argument `LANGUAGES="LIST"', as
     described above.

     Then compare the latest object files with the stage 2 object
     files--they ought to be identical, unless they contain time stamps.
     You can compare the files, disregarding the time stamps if any,
     like this:

          make compare

     This will mention any object files that differ between stage 2 and
     stage 3.  Any difference, no matter how innocuous, indicates that
     the stage 2 compiler has compiled GNU CC incorrectly, and is
     therefore a potentially serious bug which you should investigate
     and report (see @{"Bugs" Link "Bugs"}).

     If your system does not put time stamps in the object files, then
     this is a faster way to compare them (using the Bourne shell):

          for file in *.o; do
          cmp $file stage2/$file
          done

     If you have built the compiler with the `-mno-mips-tfile' option on
     MIPS machines, you will not be able to compare the files.

 11. Install the compiler driver, the compiler's passes and run-time
     support. You can use the following command:

          make CC="stage2/gcc -Bstage2/" CFLAGS="-g -O" install LANGUAGES="LIST"

     (Use the same value for `CC', `CFLAGS' and `LANGUAGES' that you
     used when compiling the files that are being installed.  One
     reason this is necessary is that some versions of Make have bugs
     and recompile files gratuitously when you do this step.  If you
     use the same variable values, those files will be recompiled
     properly.

     This copies the files `cc1', `cpp' and `libgcc.a' to files `cc1',
     `cpp' and `libgcc.a' in directory
     `/usr/local/lib/gcc-lib/TARGET/VERSION', which is where the
     compiler driver program looks for them.  Here TARGET is the target
     machine type specified when you ran `configure', and VERSION is
     the version number of GNU CC.  This naming scheme permits various
     versions and/or cross-compilers to coexist.

     It also copies the driver program `gcc' into the directory
     `/usr/local/bin', so that it appears in typical execution search
     paths.

     On some systems, this command will cause recompilation of some
     files. This is usually due to bugs in `make'.  You should either
     ignore this problem, or use GNU Make.

     *Warning: there is a bug in `alloca' in the Sun library.  To avoid
     this bug, be sure to install the executables of GNU CC that were
     compiled by GNU CC.  (That is, the executables from stage 2 or 3,
     not stage 1.)  They use `alloca' as a built-in function and never
     the one in the library.*

     (It is usually better to install GNU CC executables from stage 2
     or 3, since they usually run faster than the ones compiled with
     some other compiler.)

 12. Correct errors in the header files on your machine.

     Various system header files often contain constructs which are
     incompatible with ANSI C, and they will not work when you compile
     programs with GNU CC.  This behavior consists of substituting for
     macro argument names when they appear inside of character
     constants.  The most common offender is `ioctl.h'.

     You can overcome this problem when you compile by specifying the
     `-traditional' option.

     Alternatively, on Sun systems and 4.3BSD at least, you can correct
     the include files by running the shell script `fixincludes'.  This
     installs modified, corrected copies of the files `ioctl.h',
     `ttychars.h' and many others, in a special directory where only
     GNU CC will normally look for them.  This script will work on
     various systems because it chooses the files by searching all the
     system headers for the problem cases that we know about.

     Use the following command to do this:

          make install-fixincludes

     If you selected a different directory for GNU CC installation when
     you installed it, by specifying the Make variable `prefix' or
     `libdir', specify it the same way in this command.

     Note that some systems are starting to come with ANSI C system
     header files.  On these systems, don't run `fixincludes'; it may
     not work, and is certainly not necessary.

   If you cannot install the compiler's passes and run-time support in
`/usr/local/lib', you can alternatively use the `-B' option to specify
a prefix by which they may be found.  The compiler concatenates the
prefix with the names  `cpp', `cc1' and `libgcc.a'. Thus, you can put
the files in a directory `/usr/foo/gcc' and specify `-B/usr/foo/gcc/'
when you run GNU CC.

   Also, you can specify an alternative default directory for these
files by setting the Make variable `libdir' when you make GNU CC.


@EndNode

@Node "Other Dir" "gcc.guide/Other Dir"
@Next "Cross-Compiler"
@Toc "Installation"

Compilation in a Separate Directory
===================================

   If you wish to build the object files and executables in a directory
other than the one containing the source files, here is what you must
do differently:

  1. Make sure you have a version of Make that supports the `VPATH'
     feature.  (GNU Make supports it, as do Make versions on most BSD
     systems.)

  2. If you have ever run `configure' in the source directory, you must
     undo the configuration.  Do this by running:

          make distclean

  3. Go to the directory in which you want to build the compiler before
     running `configure':

          mkdir gcc-sun3
          cd gcc-sun3

     On systems that do not support symbolic links, this directory must
     be on the same file system as the source code directory.

  4. Specify where to find `configure' when you run it:

          ../gcc/configure ...

     This also tells `configure' where to find the compiler sources;
     `configure' takes the directory from the file name that was used to
     invoke it.  But if you want to be sure, you can specify the source
     directory with the `--srcdir' option, like this:

          ../gcc/configure --srcdir=../gcc sun3

     The directory you specify with `--srcdir' need not be the same as
     the one that `configure' is found in.

   Now, you can run `make' in that directory.  You need not repeat the
configuration steps shown above, when ordinary source files change.  You
must, however, run `configure' again when the configuration files
change, if your system does not support symbolic links.


@EndNode

@Node "Cross-Compiler" "gcc.guide/Cross-Compiler"
@Next "PA Install"
@Prev "Other Dir"
@Toc "Installation"

Building and Installing a Cross-Compiler
========================================

   GNU CC can function as a cross-compiler for many machines, but not
all.

   * Cross-compilers for the Mips as target do not work because the
     auxiliary programs `mips-tdump.c' and `mips-tfile.c' can't be
     compiled on anything but a Mips.

   * Cross-compilers to or from the Vax probably don't work completely
     because the Vax uses an incompatible floating point format (not
     IEEE format).

   Since GNU CC generates assembler code, you probably need a
cross-assembler that GNU CC can run, in order to produce object files.
If you want to link on other than the target machine, you need a
cross-linker as well.  You also need header files and libraries suitable
for the target machine that you can install on the host machine.

   To build GNU CC as a cross-compiler, you start out by running
`configure'.  You must specify two different configureations, the host
and the target.  Use the `--host=HOST' option for the host and
`--target=TARGET' to specify the target type.  For example, here is how
to configure for a cross-compiler that runs on a hypothetical Intel 386
system and produces code for an HP 68030 system running BSD:

     configure --target=m68k-hp-bsd4.3 --host=i386-bozotheclone-bsd4.3

   Next you should install the cross-assembler and cross-linker (and
`ar' and `ranlib').  Put them in the directory `/usr/local/TARGET'. 
The installation of GNU CC will find them there and copy or link them
to the proper place to find them when you run the cross-compiler later.

   If you want to install any additional libraries to use with the
cross-compiler, put them in the directory `/usr/local/TARGET/lib'; all
files in that subdirectory will be installed in the proper place when
you install the cross-compiler. Likewise, put the header files for the
target machine in `/usr/local/TARGET/include'.

   Then you can proceed just as for compiling a single-machine compiler
through the step of building stage 1.

   When you are using a cross-compiler configuration, building stage 1
does not compile all of GNU CC.  This is because one part of building,
the compilation of `libgcc2.c', requires use of the cross-compiler.

   However, when you type `make install' to install the bulk of the
cross-compiler, that will also compile `libgcc2.c' and install the
resulting `libgcc.a'.

   You will find it necessary to produce a substitute for `libgcc1.a'.
Normally this file is compiled with the "native compiler" for the
target machine; compiling it with GNU CC does not work.  But compiling
it with the host machine's compiler also doesn't work--that produces a
file that would run on the host, and you need it to run on the target.

   We can't give you any automatic way to produce this substitute.  For
some targets, the subroutines in `libgcc1.c' are not actually used. You
need not provide the ones that won't be used.  The ones that most
commonly are used are the multiplication, division and remainder
routines--many RISC machines rely on the library for this.  One way to
make them work is to define the appropriate `perform_...' macros for
the subroutines that you need.  If these definitions do not use the C
arithmetic operators that they are meant to implement, you might be
able to compile them with the cross-compiler you have just built.

   Do not try to build stage 2 for a cross-compiler.  It doesn't work to
rebuild GNU CC as a cross-compiler using the cross-compiler, because
that would produce a program that runs on the target machine, not on the
host.  For example, if you compile a 386-to-68030 cross-compiler with
itself, the result will not be right either for the 386 (because it was
compiled into 68030 code) or for the 68030 (because it was configured
for a 386 as the host).  If you want to compile GNU CC into 68030 code,
whether you compile it on a 68030 or with a cross-compiler on a 386, you
must specify a 68030 as the host when you configure it.


@EndNode

@Node "PA Install" "gcc.guide/PA Install"
@Next "Sun Install"
@Prev "Cross-Compiler"
@Toc "Installation"

Installing GNU CC on the HP Precision Architecture
==================================================

   There are two variants of this CPU, called 1.0 and 1.1, which have
different machine descriptions.  You must use the right one for your
machine.  All 7NN machines and 8N7 machines use 1.1, while all other
8NN machines use 1.0.

   The easiest way to handle this problem is to use `configure hpNNN'
or `configure hpNNN-hpux', where NNN is the model number of the
machine.  Then `configure' will figure out if the machine is a 1.0 or
1.1.  Use `uname -a' to find out the model number of your machine.

   `-g' does not work on HP-UX, since that system uses a peculiar
debugging format which GNU CC does not know about.  There is a
preliminary version available of some modified GNU tools including the
GDB debugger which do work with GNU CC for debugging.  You can get them
by anonymous ftp from `mancos.cs.utah.edu' in the `dist' subdirectory. 
You would need to install GAS in the file

     /usr/local/lib/gcc-lib/CONFIGURATION/GCCVERSION/as

where CONFIGURATION is the configuration name (perhaps `hpNNN-hpux')
and GCCVERSION is the GNU CC version number.

   If you do this, delete the line

     #undef DBX_DEBUGGING_INFO

from `tm.h' before you build GNU CC, to enable generation of debugging
information.


@EndNode

@Node "Sun Install" "gcc.guide/Sun Install"
@Next "3b1 Install"
@Prev "PA Install"
@Toc "Installation"

Installing GNU CC on the Sun
============================

   Make sure the environment variable `FLOAT_OPTION' is not set when
you compile `libgcc.a'.  If this option were set to `f68881' when
`libgcc.a' is compiled, the resulting code would demand to be linked
with a special startup file and would not link properly without special
pains.

   There is a bug in `alloca' in certain versions of the Sun library.
To avoid this bug, install the binaries of GNU CC that were compiled by
GNU CC.  They use `alloca' as a built-in function and never the one in
the library.

   Some versions of the Sun compiler crash when compiling GNU CC.  The
problem is a segmentation fault in cpp.  This problem seems to be due to
the bulk of data in the environment variables.  You may be able to avoid
it by using the following command to compile GNU CC with Sun CC:

     make CC="TERMCAP=x OBJS=x LIBFUNCS=x STAGESTUFF=x cc"


@EndNode

@Node "3b1 Install" "gcc.guide/3b1 Install"
@Next "Unos Install"
@Prev "Sun Install"
@Toc "Installation"

Installing GNU CC on the 3b1
============================

   Installing GNU CC on the 3b1 is difficult if you do not already have
GNU CC running, due to bugs in the installed C compiler.  However, the
following procedure might work.  We are unable to test it.

  1. Comment out the `#include "config.h"' line on line 37 of `cccp.c'
     and do `make cpp'.  This makes a preliminary version of GNU cpp.

  2. Save the old `/lib/cpp' and copy the preliminary GNU cpp to that
     file name.

  3. Undo your change in `cccp.c', or reinstall the original version,
     and do `make cpp' again.

  4. Copy this final version of GNU cpp into `/lib/cpp'.

  5. Replace every occurrence of `obstack_free' in the file `tree.c'
     with `_obstack_free'.

  6. Run `make' to get the first-stage GNU CC.

  7. Reinstall the original version of `/lib/cpp'.

  8. Now you can compile GNU CC with itself and install it in the normal
     fashion.


@EndNode

@Node "Unos Install" "gcc.guide/Unos Install"
@Next "VMS Install"
@Prev "3b1 Install"
@Toc "Installation"

Installing GNU CC on Unos
=========================

   Use `configure unos' for building on Unos.

   The Unos assembler is named `casm' instead of `as'.  For some
strange reason linking `/bin/as' to `/bin/casm' changes the behavior,
and does not work.  So, when installing GNU CC, you should install the
following script as `as' in the subdirectory where the passes of GCC
are installed:

     #!/bin/sh
     casm $*

   The default Unos library is named `libunos.a' instead of `libc.a'. 
To allow GNU CC to function, either change all references to `-lc' in
`gcc.c' to `-lunos' or link `/lib/libc.a' to `/lib/libunos.a'.

   When compiling GNU CC with the standard compiler, to overcome bugs in
the support of `alloca', do not use `-O' when making stage 2. Then use
the stage 2 compiler with `-O' to make the stage 3 compiler.  This
compiler will have the same characteristics as the usual stage 2
compiler on other systems.  Use it to make a stage 4 compiler and
compare that with stage 3 to verify proper compilation.

   (Perhaps simply defining `ALLOCA' in `x-crds' as described in the
comments there will make the above paragraph superfluous.  Please
inform us of whether this works.)

   Unos uses memory segmentation instead of demand paging, so you will
need a lot of memory.  5 Mb is barely enough if no other tasks are
running. If linking `cc1' fails, try putting the object files into a
library and linking from that library.


@EndNode

@Node "VMS Install" "gcc.guide/VMS Install"
@Prev "Unos Install"
@Toc "Installation"

Installing GNU CC on VMS
========================

   The VMS version of GNU CC is distributed in a backup saveset
containing both source code and precompiled binaries.

   To install the `gcc' command so you can use the compiler easily, in
the same manner as you use the VMS C compiler, you must install the VMS
CLD file for GNU CC as follows:

  1. Define the VMS logical names `GNU_CC' and `GNU_CC_INCLUDE' to
     point to the directories where the GNU CC executables (`gcc-cpp',
     `gcc-cc1', etc.) and the C include files are kept.  This should be
     done with the commands:

          $ assign /system /translation=concealed -
            disk:[gcc.] gnu_cc
          $ assign /system /translation=concealed -
            disk:[gcc.include.] gnu_cc_include

     with the appropriate disk and directory names.  These commands can
     be placed in your system startup file so they will be executed
     whenever the machine is rebooted.  You may, if you choose, do this
     via the `GCC_INSTALL.COM' script in the `[GCC]' directory.

  2. Install the `GCC' command with the command line:

          $ set command /table=sys$common:[syslib]dcltables -
            /output=sys$common:[syslib]dcltables gnu_cc:[000000]gcc
          $ install replace sys$common:[syslib]dcltables

  3. To install the help file, do the following:

          $ lib/help sys$library:helplib.hlb gcc.hlp

     Now you can invoke the compiler with a command like `gcc /verbose
     file.c', which is equivalent to the command `gcc -v -c file.c' in
     Unix.

   If you wish to use GNU C++ you must first install GNU CC, and then
perform the following steps:

  1. Define the VMS logical name `GNU_GXX_INCLUDE' to point to the
     directory where the preprocessor will search for the C++ header
     files. This can be done with the command:

          $ assign /system /translation=concealed -
            disk:[gcc.gxx_include.] gnu_gxx_include

     with the appropriate disk and directory name.  If you are going to
     be using libg++, this is where the libg++ install procedure will
     install the libg++ header files.

  2. Obtain the file `gcc-cc1plus.exe', and place this in the same
     directory that `gcc-cc1.exe' is kept.

     The GNU C++ compiler can be invoked with a command like `gcc /plus
     /verbose file.cc', which is equivalent to the command `g++ -v -c
     file.cc' in Unix.

   We try to put corresponding binaries and sources on the VMS
distribution tape.  But sometimes the binaries will be from an older
version that the sources, because we don't always have time to update
them.  (Use the `/version' option to determine the version number of
the binaries and compare it with the source file `version.c' to tell
whether this is so.)  In this case, you should use the binaries you get
to recompile the sources.  If you must recompile, here is how:

  1. Copy the file `vms.h' to `tm.h', `xm-vms.h' to `config.h',
     `vax.md' to `md.' and `vax.c' to `aux-output.c'.  The files to be
     copied are found in the subdirectory named `config'; they should
     be copied to the main directory of GNU CC.  If you wish, you may
     use the command file `config-gcc.com' to perform these steps for
     you.

  2. Setup the logical names and command tables as defined above.  In
     addition, define the VMS logical name `GNU_BISON' to point at the
     to the directories where the Bison executable is kept.  This
     should be done with the command:

          $ assign /system /translation=concealed -
            disk:[bison.] gnu_bison

     You may, if you choose, use the `INSTALL_BISON.COM' script in the
     `[BISON]' directory.

  3. Install the `BISON' command with the command line:

          $ set command /table=sys$common:[syslib]dcltables -
            /output=sys$common:[syslib]dcltables -
            gnu_bison:[000000]bison
          $ install replace sys$common:[syslib]dcltables

  4. Type `@make-gcc' to recompile everything (alternatively, you may
     submit the file `make-gcc.com' to a batch queue).  If you wish to
     build the GNU C++ compiler as well as the GNU CC compiler, you must
     first edit `make-gcc.com' and follow the instructions that appear
     in the comments.

  5. In order to use GCC, you need a library of functions which GCC
     compiled code will call to perform certain tasks, and these
     functions are defined in the file `libgcc2.c'.  To compile this
     you should use the command procedure `make-l2.com', which will
     generate the library `libgcc2.olb'. `libgcc2.olb' should be built
     using the compiler built from the same distribution that
     `libgcc2.c' came from, and `make-gcc.com' will automatically do
     all of this for you.

     To install the library, use the following commands:

          $ lib gnu_cc:[000000]gcclib/delete=(new,eprintf)
          $ lib libgcc2/extract=*/output=libgcc2.obj
          $ lib gnu_cc:[000000]gcclib libgcc2.obj

     The first command simply removes old modules that will be replaced
     with modules from libgcc2.  If the VMS librarian complains about
     those modules not being present, simply ignore the message and
     continue on with the next command.

     Whenever you update the compiler on your system, you should also
     update the library with the above procedure.

     You may wish to build GCC in such a way that no files are written
     to the directory where the source files reside.  An example would
     be the when the source files are on a read-only disk.  In these
     cases, execute the following DCL commands (substituting your
     actual path names):

          $ assign dua0:[gcc.build_dir.]tran=conc, -
                   dua1:[gcc.source_dir.]/tran=conc gcc_build
          $ set default gcc_build:[000000]

     where `dua1:[gcc.source_dir.]' contains the source code, and
     `dua0:[gcc.build_dir.]' is meant to contain all of the generated
     object files and executables.  Once you have done this, you can
     proceed building GCC as described above.  (Keep in mind that
     `gcc_build' is a rooted logical name, and thus the device names in
     each element of the search list must be an actual physical device
     name rather than another rooted logical name).

     *If you are building GNU CC with a previous version of GNU CC, you
     also should check to see that you have the newest version of the
     assembler*.  In particular, GNU CC version 2 treats global constant
     variables slightly differently from GNU CC version 1, and GAS
     version 1.38.1 does not have the patches required to work with GCC
     version 2. If you use GAS 1.38.1, then `extern const' variables
     will not have the read-only bit set, and the linker will generate
     warning messages about mismatched psect attributes for these
     variables.  These warning messages are merely a nuisance, and can
     safely be ignored.

     If you are compiling with a version of GNU CC older than 1.33,
     specify `/DEFINE=("inline=")' as an option in all the
     compilations.  This requires editing all the `gcc' commands in
     `make-cc1.com'. (The older versions had problems supporting
     `inline'.)  Once you have a working 1.33 or newer GNU CC, you can
     change this file back.

   Under previous versions of GNU CC, the generated code would
occasionally give strange results when linked to the sharable `VAXCRTL'
library. Now this should work.

   Even with this version, however, GNU CC itself should not be linked
to the sharable `VAXCRTL'.  The `qsort' routine supplied with `VAXCRTL'
has a bug which can cause a compiler crash.

   Similarly, the preprocessor should not be linked to the sharable
`VAXCRTL'.  The `strncat' routine supplied with `VAXCRTL' has a bug
which can cause the preprocessor to go into an infinite loop.

   If you attempt to link to the sharable `VAXCRTL', the VMS linker
will strongly resist any effort to force it to use the `qsort' and
`strncat' routines from `gcclib'.  Until the bugs in `VAXCRTL' have
been fixed, linking any of the compiler components to the sharable
VAXCRTL is not recommended.  (These routines can be bypassed by placing
duplicate copies of `qsort' and `strncat' in `gcclib' under different
names, and patching the compiler sources to use these routines).  Both
of the bugs in `VAXCRTL' are still present in VMS version 5.4-1, which
is the most recent version as of this writing.

   The executables that are generated by `make-cc1.com' and
`make-cccp.com' use the nonshared version of `VAXCRTL' (and thus use
the `qsort' and `strncat' routines from `gcclib.olb').


@EndNode

@Node "Extensions" "gcc.guide/Extensions"
@Next "Trouble"
@Prev "Installation"
@Toc "Main"

GNU Extensions to the C Language
********************************

   GNU C provides several language features not found in ANSI standard
C. (The `-pedantic' option directs GNU CC to print a warning message if
any of these features is used.)  To test for the availability of these
features in conditional compilation, check for a predefined macro
`__GNUC__', which is always defined under GNU CC.


 @{" Statement Exprs " Link "Statement Exprs"}      Putting statements and declarations inside expressions.
 @{" Local Labels " Link "Local Labels"}         Labels local to a statement-expression.
 @{" Labels as Values " Link "Labels as Values"}     Getting pointers to labels, and computed gotos.
 @{" Nested Functions " Link "Nested Functions"}     As in Algol and Pascal, lexical scoping of functions.
 @{" Naming Types " Link "Naming Types"}         Giving a name to the type of some expression.
 @{" Typeof " Link "Typeof"}               `typeof': referring to the type of an expression.
 @{" Lvalues " Link "Lvalues"}              Using `?:', `,' and casts in lvalues.
 @{" Conditionals " Link "Conditionals"}         Omitting the middle operand of a `?:' expression.
 @{" Long Long " Link "Long Long"} 		Double-word integers--`long long int'.
 @{" Zero Length " Link "Zero Length"}          Zero-length arrays.
 @{" Variable Length " Link "Variable Length"}      Arrays whose length is computed at run time.
 @{" Macro Varargs " Link "Macro Varargs"} 	Macros with variable number of arguments.
 @{" Subscripting " Link "Subscripting"}         Any array can be subscripted, even if not an lvalue.
 @{" Pointer Arith " Link "Pointer Arith"}        Arithmetic on `void'-pointers and function pointers.
 @{" Initializers " Link "Initializers"}         Non-constant initializers.
 @{" Constructors " Link "Constructors"}         Constructor expressions give structures, unions
                         or arrays as values.
 @{" Labeled Elements " Link "Labeled Elements"} 	Labeling elements of initializers.
 @{" Cast to Union " Link "Cast to Union"}        Casting to union type from any member of the union.
 @{" Case Ranges " Link "Case Ranges"} 		`case 1 ... 9' and such.
 @{" Function Attributes " Link "Function Attributes"}  Declaring that functions have no side effects,
                         or that they can never return.
 @{" Function Prototypes " Link "Function Prototypes"}  Prototype declarations and old-style definitions.
 @{" Dollar Signs " Link "Dollar Signs"}         Dollar sign is allowed in identifiers.
 @{" Character Escapes " Link "Character Escapes"}    `\e' stands for the character ESC.
 @{" Variable Attributes " Link "Variable Attributes"} 	Specifying attributes of variables.
 @{" Alignment " Link "Alignment"}            Inquiring about the alignment of a type or variable.
 @{" Inline " Link "Inline"}               Defining inline functions (as fast as macros).
 @{" Extended Asm " Link "Extended Asm"}         Assembler instructions with C expressions as operands.
                         (With them you can define "built-in" functions.)
 @{" Asm Labels " Link "Asm Labels"}           Specifying the assembler name to use for a C symbol.
 @{" Explicit Reg Vars " Link "Explicit Reg Vars"}    Defining variables residing in specified registers.
 @{" Alternate Keywords " Link "Alternate Keywords"}   `__const__', `__asm__', etc., for header files.
 @{" Incomplete Enums " Link "Incomplete Enums"}     `enum foo;', with details to follow.


@EndNode

@Node "Statement Exprs" "gcc.guide/Statement Exprs"
@Next "Local Labels"
@Toc "Extensions"

Statements and Declarations within Expressions
==============================================

   A compound statement enclosed in parentheses may appear as an
expression in GNU C.  This allows you to use loops, switches, and local
variables within an expression.

   Recall that a compound statement is a sequence of statements
surrounded by braces; in this construct, parentheses go around the
braces.  For example:

     ({ int y = foo (); int z;
        if (y > 0) z = y;
        else z = - y;
        z; })

is a valid (though slightly more complex than necessary) expression for
the absolute value of `foo ()'.

   The last thing in the compound statement should be an expression
followed by a semicolon; the value of this subexpression serves as the
value of the entire construct.  (If you use some other kind of statement
last within the braces, the construct has type `void', and thus
effectively no value.)

   This feature is especially useful in making macro definitions "safe"
(so that they evaluate each operand exactly once).  For example, the
"maximum" function is commonly defined as a macro in standard C as
follows:

     #define max(a,b) ((a) > (b) ? (a) : (b))

But this definition computes either A or B twice, with bad results if
the operand has side effects.  In GNU C, if you know the type of the
operands (here let's assume `int'), you can define the macro safely as
follows:

     #define maxint(a,b) \
       ({int _a = (a), _b = (b); _a > _b ? _a : _b; })

   Embedded statements are not allowed in constant expressions, such as
the value of an enumeration constant, the width of a bit field, or the
initial value of a static variable.

   If you don't know the type of the operand, you can still do this,
but you must use `typeof' (see @{"Typeof" Link "Typeof"}) or type naming (see
@{"Naming Types" Link "Naming Types"}).


@EndNode

@Node "Local Labels" "gcc.guide/Local Labels"
@Next "Labels as Values"
@Prev "Statement Exprs"
@Toc "Extensions"

Locally Declared Labels
=======================

   Each statement expression is a scope in which "local labels" can be
declared.  A local label is simply an identifier; you can jump to it
with an ordinary `goto' statement, but only from within the statement
expression it belongs to.

   A local label declaration looks like this:

     __label__ LABEL;

or

     __label__ LABEL1, LABEL2, ...;

   Local label declarations must come at the beginning of the statement
expression, right after the `({', before any ordinary declarations.

   The label declaration defines the label *name*, but does not define
the label itself.  You must do this in the usual way, with `LABEL:',
within the statements of the statement expression.

   The local label feature is useful because statement expressions are
often used in macros.  If the macro contains nested loops, a `goto' can
be useful for breaking out of them.  However, an ordinary label whose
scope is the whole function cannot be used: if the macro can be
expanded several times in one function, the label will be multiply
defined in that function.  A local label avoids this problem.  For
example:

     #define SEARCH(array, target)                     \
     ({                                               \
       __label__ found;                                \
       typeof (target) _SEARCH_target = (target);      \
       typeof (*(array)) *_SEARCH_array = (array);     \
       int i, j;                                       \
       int value;                                      \
       for (i = 0; i < max; i++)                       \
         for (j = 0; j < max; j++)                     \
           if (_SEARCH_array[i][j] == _SEARCH_target)  \
             { value = i; goto found; }              \
       value = -1;                                     \
      found:                                           \
       value;                                          \
     })


@EndNode

@Node "Labels as Values" "gcc.guide/Labels as Values"
@Next "Nested Functions"
@Prev "Local Labels"
@Toc "Extensions"

Labels as Values
================

   You can get the address of a label defined in the current function
(or a containing function) with the unary operator `&&'.  The value has
type `void *'.  This value is a constant and can be used wherever a
constant of that type is valid.  For example:

     void *ptr;
     ...
     ptr = &&foo;

   To use these values, you need to be able to jump to one.  This is
done with the computed goto statement(1), `goto *EXP;'.  For example,

     goto *ptr;

Any expression of type `void *' is allowed.

   One way of using these constants is in initializing a static array
that will serve as a jump table:

     static void *array[] = { &&foo, &&bar, &&hack };

   Then you can select a label with indexing, like this:

     goto *array[i];

Note that this does not check whether the subscript is in bounds--array
indexing in C never does that.

   Such an array of label values serves a purpose much like that of the
`switch' statement.  The `switch' statement is cleaner, so use that
rather than an array unless the problem does not fit a `switch'
statement very well.

   Another use of label values is in an interpreter for threaded code.
The labels within the interpreter function can be stored in the
threaded code for super-fast dispatching.

   You can use this mechanism to jump to code in a different function. 
If you do that, totally unpredictable things will happen.  The best way
to avoid this is to store the label address only in automatic variables
and never pass it as an argument.

   ---------- Footnotes ----------

   (1)  The analogous feature in Fortran is called an assigned goto,
but that name seems inappropriate in C, where one can do more than
simply store label addresses in label variables.


@EndNode

@Node "Nested Functions" "gcc.guide/Nested Functions"
@Next "Naming Types"
@Prev "Labels as Values"
@Toc "Extensions"

Nested Functions
================

   A "nested function" is a function defined inside another function.
The nested function's name is local to the block where it is defined.
For example, here we define a nested function named `square', and call
it twice:

     foo (double a, double b)
     {
       double square (double z) { return z * z; }
     
       return square (a) + square (b);
     }

   The nested function can access all the variables of the containing
function that are visible at the point of its definition.  This is
called "lexical scoping".  For example, here we show a nested function
which uses an inherited variable named `offset':

     bar (int *array, int offset, int size)
     {
       int access (int *array, int index)
         { return array[index + offset]; }
       int i;
       ...
       for (i = 0; i < size; i++)
         ... access (array, i) ...
     }

   It is possible to call the nested function from outside the scope of
its name by storing its address or passing the address to another
function:

     hack (int *array, int size)
     {
       void store (int index, int value)
         { array[index] = value; }
     
       intermediate (store, size);
     }

   Here, the function `intermediate' receives the address of `store' as
an argument.  If `intermediate' calls `store', the arguments given to
`store' are used to store into `array'.  But this technique works only
so long as the containing function (`hack', in this example) does not
exit.  If you try to call the nested function through its address after
the containing function has exited, all hell will break loose.

   A nested function can jump to a label inherited from a containing
function, provided the label was explicitly declared in the containing
function (see @{"Local Labels" Link "Local Labels"}).  Such a jump returns instantly to the
containing function, exiting the nested function which did the `goto'
and any intermediate functions as well.  Here is an example:

     bar (int *array, int offset, int size)
     {
       __label__ failure;
       int access (int *array, int index)
         {
           if (index > size)
             goto failure;
           return array[index + offset];
         }
       int i;
       ...
       for (i = 0; i < size; i++)
         ... access (array, i) ...
       ...
       return 0;
     
      /* Control comes here from `access'
         if it detects an error.  */
      failure:
       return -1;
     }

   A nested function always has internal linkage.  Declaring one with
`extern' is erroneous.  If you need to declare the nested function
before its definition, use `auto' (which is otherwise meaningless for
function declarations).

     bar (int *array, int offset, int size)
     {
       __label__ failure;
       auto int access (int *, int);
       ...
       int access (int *array, int index)
         {
           if (index > size)
             goto failure;
           return array[index + offset];
         }
       ...
     }


@EndNode

@Node "Naming Types" "gcc.guide/Naming Types"
@Next "Typeof"
@Prev "Nested Functions"
@Toc "Extensions"

Naming an Expression's Type
===========================

   You can give a name to the type of an expression using a `typedef'
declaration with an initializer.  Here is how to define NAME as a type
name for the type of EXP:

     typedef NAME = EXP;

   This is useful in conjunction with the statements-within-expressions
feature.  Here is how the two together can be used to define a safe
"maximum" macro that operates on any arithmetic type:

     #define max(a,b) \
       ({typedef _ta = (a), _tb = (b);  \
         _ta _a = (a); _tb _b = (b);     \
         _a > _b ? _a : _b; })

   The reason for using names that start with underscores for the local
variables is to avoid conflicts with variable names that occur within
the expressions that are substituted for `a' and `b'.  Eventually we
hope to design a new form of declaration syntax that allows you to
declare variables whose scopes start only after their initializers;
this will be a more reliable way to prevent such conflicts.


@EndNode

@Node "Typeof" "gcc.guide/Typeof"
@Next "Lvalues"
@Prev "Naming Types"
@Toc "Extensions"

Referring to a Type with `typeof'
=================================

   Another way to refer to the type of an expression is with `typeof'.
The syntax of using of this keyword looks like `sizeof', but the
construct acts semantically like a type name defined with `typedef'.

   There are two ways of writing the argument to `typeof': with an
expression or with a type.  Here is an example with an expression:

     typeof (x[0](1))

This assumes that `x' is an array of functions; the type described is
that of the values of the functions.

   Here is an example with a typename as the argument:

     typeof (int *)

Here the type described is that of pointers to `int'.

   If you are writing a header file that must work when included in
ANSI C programs, write `__typeof__' instead of `typeof'. See
@{"Alternate Keywords" Link "Alternate Keywords"}.

   A `typeof'-construct can be used anywhere a typedef name could be
used.  For example, you can use it in a declaration, in a cast, or
inside of `sizeof' or `typeof'.

   * This declares `y' with the type of what `x' points to.

          typeof (*x) y;

   * This declares `y' as an array of such values.

          typeof (*x) y[4];

   * This declares `y' as an array of pointers to characters:

          typeof (typeof (char *)[4]) y;

     It is equivalent to the following traditional C declaration:

          char *y[4];

     To see the meaning of the declaration using `typeof', and why it
     might be a useful way to write, let's rewrite it with these macros:

          #define pointer(T)  typeof(T *)
          #define array(T, N) typeof(T [N])

     Now the declaration can be rewritten this way:

          array (pointer (char), 4) y;

     Thus, `array (pointer (char), 4)' is the type of arrays of 4
     pointers to `char'.


@EndNode

@Node "Lvalues" "gcc.guide/Lvalues"
@Next "Conditionals"
@Prev "Typeof"
@Toc "Extensions"

Generalized Lvalues
===================

   Compound expressions, conditional expressions and casts are allowed
as lvalues provided their operands are lvalues.  This means that you
can take their addresses or store values into them.

   For example, a compound expression can be assigned, provided the last
expression in the sequence is an lvalue.  These two expressions are
equivalent:

     (a, b) += 5
     a, (b += 5)

   Similarly, the address of the compound expression can be taken. 
These two expressions are equivalent:

     &(a, b)
     a, &b

   A conditional expression is a valid lvalue if its type is not void
and the true and false branches are both valid lvalues.  For example,
these two expressions are equivalent:

     (a ? b : c) = 5
     (a ? b = 5 : (c = 5))

   A cast is a valid lvalue if its operand is an lvalue.  A simple
assignment whose left-hand side is a cast works by converting the
right-hand side first to the specified type, then to the type of the
inner left-hand side expression.  After this is stored, the value is
converted back to the specified type to become the value of the
assignment.  Thus, if `a' has type `char *', the following two
expressions are equivalent:

     (int)a = 5
     (int)(a = (char *)(int)5)

   An assignment-with-arithmetic operation such as `+=' applied to a
cast performs the arithmetic using the type resulting from the cast,
and then continues as in the previous case.  Therefore, these two
expressions are equivalent:

     (int)a += 5
     (int)(a = (char *)(int) ((int)a + 5))

   You cannot take the address of an lvalue cast, because the use of its
address would not work out coherently.  Suppose that `&(int)f' were
permitted, where `f' has type `float'.  Then the following statement
would try to store an integer bit-pattern where a floating point number
belongs:

     *&(int)f = 1;

   This is quite different from what `(int)f = 1' would do--that would
convert 1 to floating point and store it.  Rather than cause this
inconsistency, we think it is better to prohibit use of `&' on a cast.

   If you really do want an `int *' pointer with the address of `f',
you can simply write `(int *)&f'.


@EndNode

@Node "Conditionals" "gcc.guide/Conditionals"
@Next "Long Long"
@Prev "Lvalues"
@Toc "Extensions"

Conditional Expressions with Omitted Operands
=============================================

   The middle operand in a conditional expression may be omitted.  Then
if the first operand is nonzero, its value is the value of the
conditional expression.

   Therefore, the expression

     x ? : y

has the value of `x' if that is nonzero; otherwise, the value of `y'.

   This example is perfectly equivalent to

     x ? x : y

In this simple case, the ability to omit the middle operand is not
especially useful.  When it becomes useful is when the first operand
does, or may (if it is a macro argument), contain a side effect.  Then
repeating the operand in the middle would perform the side effect
twice.  Omitting the middle operand uses the value already computed
without the undesirable effects of recomputing it.


@EndNode

@Node "Long Long" "gcc.guide/Long Long"
@Next "Zero Length"
@Prev "Conditionals"
@Toc "Extensions"

Double-Word Integers
====================

   GNU C supports data types for integers that are twice as long as
`long int'.  Simply write `long long int' for a signed integer, or
`unsigned long long int' for an unsigned integer.

   You can use these types in arithmetic like any other integer types.
Addition, subtraction, and bitwise boolean operations on these types
are open-coded on all types of machines.  Multiplication is open-coded
if the machine supports fullword-to-doubleword a widening multiply
instruction.  Division and shifts are open-coded only on machines that
provide special support.  The operations that are not open-coded use
special library routines that come with GNU CC.

   There may be pitfalls when you use `long long' types for function
arguments, unless you declare function prototypes.  If a function
expects type `int' for its argument, and you pass a value of type `long
long int', confusion will result because the caller and the subroutine
will disagree about the number of bytes for the argument. Likewise, if
the function expects `long long int' and you pass `int'.  The best way
to avoid such problems is to use prototypes.


@EndNode

@Node "Zero Length" "gcc.guide/Zero Length"
@Next "Variable Length"
@Prev "Long Long"
@Toc "Extensions"

Arrays of Length Zero
=====================

   Zero-length arrays are allowed in GNU C.  They are very useful as
the last element of a structure which is really a header for a
variable-length object:

     struct line {
       int length;
       char contents[0];
     };
     
     {
       struct line *thisline = (struct line *)
         malloc (sizeof (struct line) + this_length);
       thisline->length = this_length;
     }

   In standard C, you would have to give `contents' a length of 1, which
means either you waste space or complicate the argument to `malloc'.


@EndNode

@Node "Variable Length" "gcc.guide/Variable Length"
@Next "Macro Varargs"
@Prev "Zero Length"
@Toc "Extensions"

Arrays of Variable Length
=========================

   Variable-length automatic arrays are allowed in GNU C.  These arrays
are declared like any other automatic arrays, but with a length that is
not a constant expression.  The storage is allocated at the point of
declaration and deallocated when the brace-level is exited.  For
example:

     FILE *
     concat_fopen (char *s1, char *s2, char *mode)
     {
       char str[strlen (s1) + strlen (s2) + 1];
       strcpy (str, s1);
       strcat (str, s2);
       return fopen (str, mode);
     }

   Jumping or breaking out of the scope of the array name deallocates
the storage.  Jumping into the scope is not allowed; you get an error
message for it.

   You can use the function `alloca' to get an effect much like
variable-length arrays.  The function `alloca' is available in many
other C implementations (but not in all).  On the other hand,
variable-length arrays are more elegant.

   There are other differences between these two methods.  Space
allocated with `alloca' exists until the containing *function* returns.
The space for a variable-length array is deallocated as soon as the
array name's scope ends.  (If you use both variable-length arrays and
`alloca' in the same function, deallocation of a variable-length array
will also deallocate anything more recently allocated with `alloca'.)

   You can also use variable-length arrays as arguments to functions:

     struct entry
     tester (int len, char data[len][len])
     {
       ...
     }

   The length of an array is computed once when the storage is allocated
and is remembered for the scope of the array in case you access it with
`sizeof'.

   If you want to pass the array first and the length afterward, you can
use a forward declaration in the parameter list--another GNU extension.

     struct entry
     tester (int len; char data[len][len], int len)
     {
       ...
     }

   The `int len' before the semicolon is a "parameter forward
declaration", and it serves the purpose of making the name `len' known
when the declaration of `data' is parsed.

   You can write any number of such parameter forward declarations in
the parameter list.  They can be separated by commas or semicolons, but
the last one must end with a semicolon, which is followed by the "real"
parameter declarations.  Each forward declaration must match a "real"
declaration in parameter name and data type.


@EndNode

@Node "Macro Varargs" "gcc.guide/Macro Varargs"
@Next "Subscripting"
@Prev "Variable Length"
@Toc "Extensions"

Macros with Variable Numbers of Arguments
=========================================

   In GNU C, a macro can accept a variable number of arguments, much as
a function can.  The syntax for defining the macro looks much like that
used for a function.  Here is an example:

     #define eprintf(format, args...)  \
      fprintf (stderr, format, ## args)

   Here `args' is a "rest argument": it takes in zero or more
arguments, as many as the call contains.  All of them plus the commas
between them form the value of `args', which is substituted into the
macro body where `args' is used.  Thus, we have these expansions:

     eprintf ("%s:%d: ", input_file_name, line_number)
     ==>
     fprintf (stderr, "%s:%d: ", input_file_name, line_number)

Note that the comma after the string constant comes from the definition
of `eprintf', whereas the last comma comes from the value of `args'.

   The reason for using `##' is to handle the case when `args' matches
no arguments at all.  In this case, `args' has an empty value.  In this
case, the second comma in the definition becomes an embarrassment: if
it got through to the expansion of the macro, we would get something
like this:

     fprintf (stderr, "success!\n", )

which is invalid C syntax.  `##' gets rid of the comma, so we get the
following instead:

     fprintf (stderr, "success!\n")

   This is a special feature of the GNU C preprocessor: `##' adjacent
to a rest argument discards the token on the other side of the `##', if
the rest argument value is empty.


@EndNode

@Node "Subscripting" "gcc.guide/Subscripting"
@Next "Pointer Arith"
@Prev "Macro Varargs"
@Toc "Extensions"

Non-Lvalue Arrays May Have Subscripts
=====================================

   Subscripting is allowed on arrays that are not lvalues, even though
the unary `&' operator is not.  For example, this is valid in GNU C
though not valid in other C dialects:

     struct foo {int a[4];};
     
     struct foo f();
     
     bar (int index)
     {
       return f().a[index];
     }


@EndNode

@Node "Pointer Arith" "gcc.guide/Pointer Arith"
@Next "Initializers"
@Prev "Subscripting"
@Toc "Extensions"

Arithmetic on `void'- and Function-Pointers
===========================================

   In GNU C, addition and subtraction operations are supported on
pointers to `void' and on pointers to functions.  This is done by
treating the size of a `void' or of a function as 1.

   A consequence of this is that `sizeof' is also allowed on `void' and
on function types, and returns 1.

   The option `-Wpointer-arith' requests a warning if these extensions
are used.


@EndNode

@Node "Initializers" "gcc.guide/Initializers"
@Next "Constructors"
@Prev "Pointer Arith"
@Toc "Extensions"

Non-Constant Initializers
=========================

   The elements of an aggregate initializer for an automatic variable
are not required to be constant expressions in GNU C.  Here is an
example of an initializer with run-time varying elements:

     foo (float f, float g)
     {
       float beat_freqs[2] = { f-g, f+g };
       ...
     }


@EndNode

@Node "Constructors" "gcc.guide/Constructors"
@Next "Labeled Elements"
@Prev "Initializers"
@Toc "Extensions"

Constructor Expressions
=======================

   GNU C supports constructor expressions.  A constructor looks like a
cast containing an initializer.  Its value is an object of the type
specified in the cast, containing the elements specified in the
initializer.

   Usually, the specified type is a structure.  Assume that `struct
foo' and `structure' are declared as shown:

     struct foo {int a; char b[2];} structure;

Here is an example of constructing a `struct foo' with a constructor:

     structure = ((struct foo) {x + y, 'a', 0});

This is equivalent to writing the following:

     {
       struct foo temp = {x + y, 'a', 0};
       structure = temp;
     }

   You can also construct an array.  If all the elements of the
constructor are (made up of) simple constant expressions, suitable for
use in initializers, then the constructor is an lvalue and can be
coerced to a pointer to its first element, as shown here:

     char **foo = (char *[]) { "x", "y", "z" };

   Array constructors whose elements are not simple constants are not
very useful, because the constructor is not an lvalue.  There are only
two valid ways to use it: to subscript it, or initialize an array
variable with it.  The former is probably slower than a `switch'
statement, while the latter does the same thing an ordinary C
initializer would do.  Here is an example of subscripting an array
constructor:

     output = ((int[]) { 2, x, 28 }) [input];

   Constructor expressions for scalar types and union types are is also
allowed, but then the constructor expression is equivalent to a cast.


@EndNode

@Node "Labeled Elements" "gcc.guide/Labeled Elements"
@Next "Cast to Union"
@Prev "Constructors"
@Toc "Extensions"

Labeled Elements in Initializers
================================

   Standard C requires the elements of an initializer to appear in a
fixed order, the same as the order of the elements in the array or
structure being initialized.

   In GNU C you can give the elements in any order, specifying the array
indices or structure field names they apply to.

   To specify an array index, write `[INDEX]' before the element value.
 For example,

     int a[6] = { [4] 29, [2] 15 };

is equivalent to

     int a[6] = { 0, 0, 15, 0, 29, 0 };

The index values must be constant expressions, even if the array being
initialized is automatic.

   In a structure initializer, specify the name of a field to initialize
with `FIELDNAME:' before the element value.  For example, given the
following structure,

     struct point { int x, y; };

the following initialization

     struct point p = { y: yvalue, x: xvalue };

is equivalent to

     struct point p = { xvalue, yvalue };

   You can also use an element label when initializing a union, to
specify which element of the union should be used.  For example,

     union foo { int i; double d; };
     
     union foo f = { d: 4 };

will convert 4 to a `double' to store it in the union using the second
element.  By contrast, casting 4 to type `union foo' would store it
into the union as the integer `i', since it is an integer.  (See
@{"Cast to Union" Link "Cast to Union"}.)

   You can combine this technique of naming elements with ordinary C
initialization of successive elements.  Each initializer element that
does not have a label applies to the next consecutive element of the
array or structure.  For example,

     int a[6] = { [1] v1, v2, [4] v4 };

is equivalent to

     int a[6] = { 0, v1, v2, 0, v4, 0 };

   Labeling the elements of an array initializer is especially useful
when the indices are characters or belong to an `enum' type. For
example:

     int whitespace[256]
       = { [' '] 1, ['\t'] 1, ['\h'] 1,
           ['\f'] 1, ['\n'] 1, ['\r'] 1 };


@EndNode

@Node "Case Ranges" "gcc.guide/Case Ranges"
@Next "Function Attributes"
@Prev "Cast to Union"
@Toc "Extensions"

Case Ranges
===========

   You can specify a range of consecutive values in a single `case'
label, like this:

     case LOW ... HIGH:

This has the same effect as the proper number of individual `case'
labels, one for each integer value from LOW to HIGH, inclusive.

   This feature is especially useful for ranges of ASCII character
codes:

     case 'A' ... 'Z':

   *Be careful:* Write spaces around the `...', for otherwise it may be
parsed wrong when you use it with integer values.  For example, write
this:

     case 1 ... 5:

rather than this:

     case 1...5:


@EndNode

@Node "Cast to Union" "gcc.guide/Cast to Union"
@Next "Case Ranges"
@Prev "Labeled Elements"
@Toc "Extensions"

Cast to a Union Type
====================

   A cast to union type is like any other cast, except that the type
specified is a union type.  You can specify the type either with `union
TAG' or with a typedef name.

   The types that may be cast to the union type are those of the members
of the union.  Thus, given the following union and variables:

     union foo { int i; double d; };
     int x;
     double y;

both `x' and `y' can be cast to type `union' foo.

   Using the cast as the right-hand side of an assignment to a variable
of union type is equivalent to storing in a member of the union:

     union foo u;
     ...
     u = (union foo) x  ==  u.i = x
     u = (union foo) y  ==  u.d = y

   You can also use the union cast as a function argument:

     void hack (union foo);
     ...
     hack ((union foo) x);


@EndNode

@Node "Function Attributes" "gcc.guide/Function Attributes"
@Next "Function Prototypes"
@Prev "Case Ranges"
@Toc "Extensions"

Declaring Attributes of Functions
=================================

   In GNU C, you declare certain things about functions called in your
program which help the compiler optimize function calls.

   A few standard library functions, such as `abort' and `exit', cannot
return.  GNU CC knows this automatically.  Some programs define their
own functions that never return.  You can declare them `volatile' to
tell the compiler this fact.  For example,

     extern void volatile fatal ();
     
     void
     fatal (...)
     {
       ... /* Print error message. */ ...
       exit (1);
     }

   The `volatile' keyword tells the compiler to assume that `fatal'
cannot return.  This makes slightly better code, but more importantly
it helps avoid spurious warnings of uninitialized variables.

   It does not make sense for a `volatile' function to have a return
type other than `void'.

   Many functions do not examine any values except their arguments, and
have no effects except the return value.  Such a function can be subject
to common subexpression elimination and loop optimization just as an
arithmetic operator would be.  These functions should be declared
`const'.  For example,

     extern int const square ();

says that the hypothetical function `square' is safe to call fewer
times than the program says.

   Note that a function that has pointer arguments and examines the data
pointed to must *not* be declared `const'.  Likewise, a function that
calls a non-`const' function usually must not be `const'.  It does not
make sense for a `const' function to return `void'.

   We recommend placing the keyword `const' after the function's return
type.  It makes no difference in the example above, but when the return
type is a pointer, it is the only way to make the function itself
const.  For example,

     const char *mincp (int);

says that `mincp' returns `const char *'--a pointer to a const object. 
To declare `mincp' const, you must write this:

     char * const mincp (int);

   Some people object to this feature, suggesting that ANSI C's
`#pragma' should be used instead.  There are two reasons for not doing
this.

  1. It is impossible to generate `#pragma' commands from a macro.

  2. The `#pragma' command is just as likely as these keywords to mean
     something else in another compiler.

   These two reasons apply to almost any application that might be
proposed for `#pragma'.  It is basically a mistake to use `#pragma' for
*anything*.


@EndNode

@Node "Function Prototypes" "gcc.guide/Function Prototypes"
@Next "Dollar Signs"
@Prev "Function Attributes"
@Toc "Extensions"

Prototypes and Old-Style Function Definitions
=============================================

   GNU C extends ANSI C to allow a function prototype to override a
later old-style non-prototype definition.  Consider the following
example:

     /* Use prototypes unless the compiler is old-fashioned.  */
     #if __STDC__
     #define P((x)) (x)
     #else
     #define P((x)) ()
     #endif
     
     /* Prototype function declaration.  */
     int isroot P((uid_t));
     
     /* Old-style function definition.  */
     int
     isroot (x)   /* ??? lossage here ??? */
          uid_t x;
     {
       return x == 0;
     }

   Suppose the type `uid_t' happens to be `short'.  ANSI C does not
allow this example, because subword arguments in old-style
non-prototype definitions are promoted.  Therefore in this example the
function definition's argument is really an `int', which does not match
the prototype argument type of `short'.

   This restriction of ANSI C makes it hard to write code that is
portable to traditional C compilers, because the programmer does not
know whether the `uid_t' type is `short', `int', or `long'.  Therefore,
in cases like these GNU C allows a prototype to override a later
old-style definition.  More precisely, in GNU C, a function prototype
argument type overrides the argument type specified by a later
old-style definition if the former type is the same as the latter type
before promotion.  Thus in GNU C the above example is equivalent to the
following:

     int isroot (uid_t);
     
     int
     isroot (uid_t x)
     {
       return x == 0;
     }


@EndNode

@Node "Dollar Signs" "gcc.guide/Dollar Signs"
@Next "Character Escapes"
@Prev "Function Prototypes"
@Toc "Extensions"

Dollar Signs in Identifier Names
================================

   In GNU C, you may use dollar signs in identifier names.  This is
because many traditional C implementations allow such identifiers.

   Dollar signs are allowed on certain machines if you specify
`-traditional'.  On a few systems they are allowed by default, even if
`-traditional' is not used.  But they are never allowed if you specify
`-ansi'.

   There are certain ANSI C programs (obscure, to be sure) that would
compile incorrectly if dollar signs were permitted in identifiers.  For
example:

     #define foo(a) #a
     #define lose(b) foo (b)
     #define test$
     lose (test)


@EndNode

@Node "Character Escapes" "gcc.guide/Character Escapes"
@Next "Variable Attributes"
@Prev "Dollar Signs"
@Toc "Extensions"

The Character ESC in Constants
==============================

   You can use the sequence `\e' in a string or character constant to
stand for the ASCII character ESC.


@EndNode

@Node "Alignment" "gcc.guide/Alignment"
@Next "Inline"
@Prev "Variable Attributes"
@Toc "Extensions"

Inquiring on Alignment of Types or Variables
============================================

   The keyword `__alignof__' allows you to inquire about how an object
is aligned, or the minimum alignment usually required by a type.  Its
syntax is just like `sizeof'.

   For example, if the target machine requires a `double' value to be
aligned on an 8-byte boundary, then `__alignof__ (double)' is 8. This
is true on many RISC machines.  On more traditional machine designs,
`__alignof__ (double)' is 4 or even 2.

   Some machines never actually require alignment; they allow reference
to any data type even at an odd addresses.  For these machines,
`__alignof__' reports the *recommended* alignment of a type.

   When the operand of `__alignof__' is an lvalue rather than a type,
the value is the largest alignment that the lvalue is known to have. 
It may have this alignment as a result of its data type, or because it
is part of a structure and inherits alignment from that structure. For
example, after this declaration:

     struct foo { int x; char y; } foo1;

the value of `__alignof__ (foo1.y)' is probably 2 or 4, the same as
`__alignof__ (int)', even though the data type of `foo1.y' does not
itself demand any alignment.


@EndNode

@Node "Variable Attributes" "gcc.guide/Variable Attributes"
@Next "Alignment"
@Prev "Character Escapes"
@Toc "Extensions"

Specifying Attributes of Variables
==================================

   The keyword `__attribute__' allows you to specify special attributes
of variables or structure fields.  The only attributes currently
defined are the `aligned' and `format' attributes.

   The `aligned' attribute specifies the alignment of the variable or
structure field.  For example, the declaration:

     int x __attribute__ ((aligned (16))) = 0;

causes the compiler to allocate the global variable `x' on a 16-byte
boundary.  On a 68000, this could be used in conjunction with an `asm'
expression to access the `move16' instruction which requires 16-byte
aligned operands.

   You can also specify the alignment of structure fields.  For
example, to create a double-word aligned `int' pair, you could write:

     struct foo { int x[2] __attribute__ ((aligned (8))); };

This is an alternative to creating a union with a `double' member that
forces the union to be double-word aligned.

   It is not possible to specify the alignment of functions; the
alignment of functions is determined by the machine's requirements and
cannot be changed.  You cannot specify alignment for a typedef name
because such a name is just an alias, not a distinct type.

   The `format' attribute specifies that a function takes `printf' or
`scanf' style arguments which should be type-checked against a format
string.  For example, the declaration:

     extern int
     my_printf (void *my_object, const char *my_format, ...)
           __attribute__ ((format (printf, 2, 3)));

causes the compiler to check the arguments in calls to `my_printf' for
consistency with the `printf' style format string argument `my_format'.

   The first parameter of the `format' attribute determines how the
format string is interpreted, and should be either `printf' or `scanf'.
 The second parameter specifies the number of the format string
argument (starting from 1).  The third parameter specifies the number
of the first argument which should be checked against the format
string.  For functions where the arguments are not available to be
checked (such as `vprintf'), specify the third parameter as zero.  In
this case the compiler only checks the format string for consistency.

   In the example above, the format string (`my_format') is the second
argument to `my_print' and the arguments to check start with the third
argument, so the correct parameters for the format attribute are 2 and
3.

   The `format' attribute allows you to identify your own functions
which take format strings as arguments, so that GNU CC can check the
calls to these functions for errors.  The compiler always checks
formats for the ANSI library functions `printf', `fprintf', `sprintf',
`scanf', `fscanf', `sscanf', `vprintf', `vfprintf' and `vsprintf'
whenever such warnings are requested (using `-Wformat'), so there is no
need to modify the header file `stdio.h'.


@EndNode

@Node "Inline" "gcc.guide/Inline"
@Next "Extended Asm"
@Prev "Alignment"
@Toc "Extensions"

An Inline Function is As Fast As a Macro
========================================

   By declaring a function `inline', you can direct GNU CC to integrate
that function's code into the code for its callers.  This makes
execution faster by eliminating the function-call overhead; in
addition, if any of the actual argument values are constant, their
known values may permit simplifications at compile time so that not all
of the inline function's code needs to be included.

   To declare a function inline, use the `inline' keyword in its
declaration, like this:

     inline int
     inc (int *a)
     {
       (*a)++;
     }

   (If you are writing a header file to be included in ANSI C programs,
write `__inline__' instead of `inline'.  See @{"Alternate Keywords" Link "Alternate Keywords"}.)

   You can also make all "simple enough" functions inline with the
option `-finline-functions'.  Note that certain usages in a function
definition can make it unsuitable for inline substitution.

   When a function is both inline and `static', if all calls to the
function are integrated into the caller, and the function's address is
never used, then the function's own assembler code is never referenced.
In this case, GNU CC does not actually output assembler code for the
function, unless you specify the option `-fkeep-inline-functions'. Some
calls cannot be integrated for various reasons (in particular, calls
that precede the function's definition cannot be integrated, and
neither can recursive calls within the definition).  If there is a
nonintegrated call, then the function is compiled to assembler code as
usual.  The function must also be compiled as usual if the program
refers to its address, because that can't be inlined.

   When an inline function is not `static', then the compiler must
assume that there may be calls from other source files; since a global
symbol can be defined only once in any program, the function must not
be defined in the other source files, so the calls therein cannot be
integrated. Therefore, a non-`static' inline function is always
compiled on its own in the usual fashion.

   If you specify both `inline' and `extern' in the function
definition, then the definition is used only for inlining.  In no case
is the function compiled on its own, not even if you refer to its
address explicitly.  Such an address becomes an external reference, as
if you had only declared the function, and had not defined it.

   This combination of `inline' and `extern' has almost the effect of a
macro.  The way to use it is to put a function definition in a header
file with these keywords, and put another copy of the definition
(lacking `inline' and `extern') in a library file. The definition in
the header file will cause most calls to the function to be inlined. 
If any uses of the function remain, they will refer to the single copy
in the library.


@EndNode

@Node "Extended Asm" "gcc.guide/Extended Asm"
@Next "Asm Labels"
@Prev "Inline"
@Toc "Extensions"

Assembler Instructions with C Expression Operands
=================================================

   In an assembler instruction using `asm', you can now specify the
operands of the instruction using C expressions.  This means no more
guessing which registers or memory locations will contain the data you
want to use.

   You must specify an assembler instruction template much like what
appears in a machine description, plus an operand constraint string for
each operand.

   For example, here is how to use the 68881's `fsinx' instruction:

     asm ("fsinx %1,%0" : "=f" (result) : "f" (angle));

Here `angle' is the C expression for the input operand while `result'
is that of the output operand.  Each has `"f"' as its operand
constraint, saying that a floating point register is required.  The `='
in `=f' indicates that the operand is an output; all output operands'
constraints must use `='.  The constraints use the same language used
in the machine description (see @{"Constraints" Link "Constraints"}).

Each operand is described by an operand-constraint string followed by
the C expression in parentheses.  A colon separates the assembler
template from the first output operand, and another separates the last
output operand from the first input, if any.  Commas separate output
operands and separate inputs.  The total number of operands is limited
to ten or to the maximum number of operands in any instruction pattern
in the machine description, whichever is greater.

   If there are no output operands, and there are input operands, then
there must be two consecutive colons surrounding the place where the
output operands would go.

   Output operand expressions must be lvalues; the compiler can check
this. The input operands need not be lvalues.  The compiler cannot
check whether the operands have data types that are reasonable for the
instruction being executed.  It does not parse the assembler
instruction template and does not know what it means, or whether it is
valid assembler input.  The extended `asm' feature is most often used
for machine instructions that the compiler itself does not know exist.

   The output operands must be write-only; GNU CC will assume that the
values in these operands before the instruction are dead and need not be
generated.  Extended asm does not support input-output or read-write
operands.  For this reason, the constraint character `+', which
indicates such an operand, may not be used.

   When the assembler instruction has a read-write operand, or an
operand in which only some of the bits are to be changed, you must
logically split its function into two separate operands, one input
operand and one write-only output operand.  The connection between them
is expressed by constraints which say they need to be in the same
location when the instruction executes.  You can use the same C
expression for both operands, or different expressions.  For example,
here we write the (fictitious) `combine' instruction with `bar' as its
read-only source operand and `foo' as its read-write destination:

     asm ("combine %2,%0" : "=r" (foo) : "0" (foo), "g" (bar));

The constraint `"0"' for operand 1 says that it must occupy the same
location as operand 0.  A digit in constraint is allowed only in an
input operand, and it must refer to an output operand.

   Only a digit in the constraint can guarantee that one operand will
be in the same place as another.  The mere fact that `foo' is the value
of both operands is not enough to guarantee that they will be in the
same place in the generated assembler code.  The following would not
work:

     asm ("combine %2,%0" : "=r" (foo) : "r" (foo), "g" (bar));

   Various optimizations or reloading could cause operands 0 and 1 to
be in different registers; GNU CC knows no reason not to do so.  For
example, the compiler might find a copy of the value of `foo' in one
register and use it for operand 1, but generate the output operand 0 in
a different register (copying it afterward to `foo''s own address).  Of
course, since the register for operand 1 is not even mentioned in the
assembler code, the result will not work, but GNU CC can't tell that.

   Some instructions clobber specific hard registers.  To describe
this, write a third colon after the input operands, followed by the
names of the clobbered hard registers (given as strings).  Here is a
realistic example for the Vax:

     asm volatile ("movc3 %0,%1,%2"
                   : /* no outputs */
                   : "g" (from), "g" (to), "g" (count)
                   : "r0", "r1", "r2", "r3", "r4", "r5");

   If you refer to a particular hardware register from the assembler
code, then you will probably have to list the register after the third
colon to tell the compiler that the register's value is modified.  In
many assemblers, the register names begin with `%'; to produce one `%'
in the assembler code, you must write `%%' in the input.

   If your assembler instruction can alter the condition code register,
add `cc' to the list of clobbered registers.  GNU CC on some machines
represents the condition codes as a specific hardware register; `cc'
serves to name this register.  On other machines, the condition code is
handled differently, and specifying `cc' has no effect.  But it is
valid no matter what the machine.

   You can put multiple assembler instructions together in a single
`asm' template, separated either with newlines (written as `\n') or with
semicolons if the assembler allows such semicolons.  The GNU assembler
allows semicolons and all Unix assemblers seem to do so.  The input
operands are guaranteed not to use any of the clobbered registers, and
neither will the output operands' addresses, so you can read and write
the clobbered registers as many times as you like.  Here is an example
of multiple instructions in a template; it assumes that the subroutine
`_foo' accepts arguments in registers 9 and 10:

     asm ("movl %0,r9;movl %1,r10;call _foo"
          : /* no outputs */
          : "g" (from), "g" (to)
          : "r9", "r10");

   Unless an output operand has the `&' constraint modifier, GNU CC may
allocate it in the same register as an unrelated input operand, on the
assumption that the inputs are consumed before the outputs are produced.
This assumption may be false if the assembler code actually consists of
more than one instruction.  In such a case, use `&' for each output
operand that may not overlap an input. See @{"Modifiers" Link "Modifiers"}.

   If you want to test the condition code produced by an assembler
instruction, you must include a branch and a label in the `asm'
construct, as follows:

     asm ("clr %0;frob %1;beq 0f;mov #1,%0;0:"
          : "g" (result)
          : "g" (input));

This assumes your assembler supports local labels, as the GNU assembler
and most Unix assemblers do.

   Usually the most convenient way to use these `asm' instructions is to
encapsulate them in macros that look like functions.  For example,

     #define sin(x)       \
     ({ double __value, __arg = (x);   \
        asm ("fsinx %1,%0": "=f" (__value): "f" (__arg));  \
        __value; })

Here the variable `__arg' is used to make sure that the instruction
operates on a proper `double' value, and to accept only those arguments
`x' which can convert automatically to a `double'.

   Another way to make sure the instruction operates on the correct
data type is to use a cast in the `asm'.  This is different from using a
variable `__arg' in that it converts more different types.  For
example, if the desired type were `int', casting the argument to `int'
would accept a pointer with no complaint, while assigning the argument
to an `int' variable named `__arg' would warn about using a pointer
unless the caller explicitly casts it.

   If an `asm' has output operands, GNU CC assumes for optimization
purposes that the instruction has no side effects except to change the
output operands.  This does not mean that instructions with a side
effect cannot be used, but you must be careful, because the compiler
may eliminate them if the output operands aren't used, or move them out
of loops, or replace two with one if they constitute a common
subexpression.  Also, if your instruction does have a side effect on a
variable that otherwise appears not to change, the old value of the
variable may be reused later if it happens to be found in a register.

   You can prevent an `asm' instruction from being deleted, moved
significantly, or combined, by writing the keyword `volatile' after the
`asm'.  For example:

     #define set_priority(x)  \
     asm volatile ("set_priority %0": /* no outputs */ : "g" (x))

An instruction without output operands will not be deleted or moved
significantly, regardless, unless it is unreachable.

   Note that even a volatile `asm' instruction can be moved in ways
that appear insignificant to the compiler, such as across jump
instructions.  You can't expect a sequence of volatile `asm'
instructions to remain perfectly consecutive.  If you want consecutive
output, use a single `asm'.

   It is a natural idea to look for a way to give access to the
condition code left by the assembler instruction.  However, when we
attempted to implement this, we found no way to make it work reliably. 
The problem is that output operands might need reloading, which would
result in additional following "store" instructions.  On most machines,
these instructions would alter the condition code before there was time
to test it.  This problem doesn't arise for ordinary "test" and
"compare" instructions because they don't have any output operands.

   If you are writing a header file that should be includable in ANSI C
programs, write `__asm__' instead of `asm'.  See @{"Alternate Keywords" Link "Alternate Keywords"}.


@EndNode

@Node "Asm Labels" "gcc.guide/Asm Labels"
@Next "Explicit Reg Vars"
@Prev "Extended Asm"
@Toc "Extensions"

Controlling Names Used in Assembler Code
========================================

   You can specify the name to be used in the assembler code for a C
function or variable by writing the `asm' (or `__asm__') keyword after
the declarator as follows:

     int foo asm ("myfoo") = 2;

This specifies that the name to be used for the variable `foo' in the
assembler code should be `myfoo' rather than the usual `_foo'.

   On systems where an underscore is normally prepended to the name of
a C function or variable, this feature allows you to define names for
the linker that do not start with an underscore.

   You cannot use `asm' in this way in a function *definition*; but you
can get the same effect by writing a declaration for the function
before its definition and putting `asm' there, like this:

     extern func () asm ("FUNC");
     
     func (x, y)
          int x, y;
     ...

   It is up to you to make sure that the assembler names you choose do
not conflict with any other assembler symbols.  Also, you must not use a
register name; that would produce completely invalid assembler code. 
GNU CC does not as yet have the ability to store static variables in
registers. Perhaps that will be added.


@EndNode

@Node "Explicit Reg Vars" "gcc.guide/Explicit Reg Vars"
@Next "Alternate Keywords"
@Prev "Asm Labels"
@Toc "Extensions"

Variables in Specified Registers
================================

   GNU C allows you to put a few global variables into specified
hardware registers.  You can also specify the register in which an
ordinary register variable should be allocated.

   * Global register variables reserve registers throughout the program.
     This may be useful in programs such as programming language
     interpreters which have a couple of global variables that are
     accessed very often.

   * Local register variables in specific registers do not reserve the
     registers.  The compiler's data flow analysis is capable of
     determining where the specified registers contain live values, and
     where they are available for other uses.

     These local variables are sometimes convenient for use with the
     extended `asm' feature (see @{"Extended Asm" Link "Extended Asm"}), if you want to write one
     output of the assembler instruction directly into a particular
     register. (This will work provided the register you specify fits
     the constraints specified for that operand in the `asm'.)


 @{" Global Reg Vars " Link "Global Reg Vars"} 
 @{" Local Reg Vars " Link "Local Reg Vars"} 


@EndNode

@Node "Global Reg Vars" "gcc.guide/Global Reg Vars"
@Next "Local Reg Vars"
@Toc "Explicit Reg Vars"

Defining Global Register Variables
----------------------------------

   You can define a global register variable in GNU C like this:

     register int *foo asm ("a5");

Here `a5' is the name of the register which should be used.  Choose a
register which is normally saved and restored by function calls on your
machine, so that library routines will not clobber it.

   Naturally the register name is cpu-dependent, so you would need to
conditionalize your program according to cpu type.  The register `a5'
would be a good choice on a 68000 for a variable of pointer type.  On
machines with register windows, be sure to choose a "global" register
that is not affected magically by the function call mechanism.

   In addition, operating systems on one type of cpu may differ in how
they name the registers; then you would need additional conditionals. 
For example, some 68000 operating systems call this register `%a5'.

   Eventually there may be a way of asking the compiler to choose a
register automatically, but first we need to figure out how it should
choose and how to enable you to guide the choice.  No solution is
evident.

   Defining a global register variable in a certain register reserves
that register entirely for this use, at least within the current
compilation. The register will not be allocated for any other purpose
in the functions in the current compilation.  The register will not be
saved and restored by these functions.  Stores into this register are
never deleted even if they would appear to be dead, but references may
be deleted or moved or simplified.

   It is not safe to access the global register variables from signal
handlers, or from more than one thread of control, because the system
library routines may temporarily use the register for other things
(unless you recompile them specially for the task at hand).

   It is not safe for one function that uses a global register variable
to call another such function `foo' by way of a third function `lose'
that was compiled without knowledge of this variable (i.e. in a
different source file in which the variable wasn't declared).  This is
because `lose' might save the register and put some other value there.
For example, you can't expect a global register variable to be
available in the comparison-function that you pass to `qsort', since
`qsort' might have put something else in that register.  (If you are
prepared to recompile `qsort' with the same global register variable,
you can solve this problem.)

   If you want to recompile `qsort' or other source files which do not
actually use your global register variable, so that they will not use
that register for any other purpose, then it suffices to specify the
compiler option `-ffixed-REG'.  You need not actually add a global
register declaration to their source code.

   A function which can alter the value of a global register variable
cannot safely be called from a function compiled without this variable,
because it could clobber the value the caller expects to find there on
return. Therefore, the function which is the entry point into the part
of the program that uses the global register variable must explicitly
save and restore the value which belongs to its caller.

   On most machines, `longjmp' will restore to each global register
variable the value it had at the time of the `setjmp'.  On some
machines, however, `longjmp' will not change the value of global
register variables.  To be portable, the function that called `setjmp'
should make other arrangements to save the values of the global register
variables, and to restore them in a `longjmp'.  This way, the same
thing will happen regardless of what `longjmp' does.

   All global register variable declarations must precede all function
definitions.  If such a declaration could appear after function
definitions, the declaration would be too late to prevent the register
from being used for other purposes in the preceding functions.

   Global register variables may not have initial values, because an
executable file has no means to supply initial contents for a register.

   On the Sparc, there are reports that g3 ... g7 are suitable
registers, but certain library functions, such as `getwd', as well as
the subroutines for division and remainder, modify g3 and g4.  g1 and
g2 are local temporaries.

   On the 68000, a2 ... a5 should be suitable, as should d2 ... d7. Of
course, it will not do to use more than a few of those.


@EndNode

@Node "Local Reg Vars" "gcc.guide/Local Reg Vars"
@Prev "Global Reg Vars"
@Toc "Explicit Reg Vars"

Specifying Registers for Local Variables
----------------------------------------

   You can define a local register variable with a specified register
like this:

     register int *foo asm ("a5");

Here `a5' is the name of the register which should be used.  Note that
this is the same syntax used for defining global register variables,
but for a local variable it would appear within a function.

   Naturally the register name is cpu-dependent, but this is not a
problem, since specific registers are most often useful with explicit
assembler instructions (see @{"Extended Asm" Link "Extended Asm"}).  Both of these things
generally require that you conditionalize your program according to cpu
type.

   In addition, operating systems on one type of cpu may differ in how
they name the registers; then you would need additional conditionals. 
For example, some 68000 operating systems call this register `%a5'.

   Eventually there may be a way of asking the compiler to choose a
register automatically, but first we need to figure out how it should
choose and how to enable you to guide the choice.  No solution is
evident.

   Defining such a register variable does not reserve the register; it
remains available for other uses in places where flow control determines
the variable's value is not live.  However, these registers are made
unavailable for use in the reload pass.  I would not be surprised if
excessive use of this feature leaves the compiler too few available
registers to compile certain functions.


@EndNode

@Node "Alternate Keywords" "gcc.guide/Alternate Keywords"
@Next "Incomplete Enums"
@Prev "Explicit Reg Vars"
@Toc "Extensions"

Alternate Keywords
==================

   The option `-traditional' disables certain keywords; `-ansi'
disables certain others.  This causes trouble when you want to use GNU C
extensions, or ANSI C features, in a general-purpose header file that
should be usable by all programs, including ANSI C programs and
traditional ones.  The keywords `asm', `typeof' and `inline' cannot be
used since they won't work in a program compiled with `-ansi', while
the keywords `const', `volatile', `signed', `typeof' and `inline' won't
work in a program compiled with `-traditional'.

   The way to solve these problems is to put `__' at the beginning and
end of each problematical keyword.  For example, use `__asm__' instead
of `asm', `__const__' instead of `const', and `__inline__' instead of
`inline'.

   Other C compilers won't accept these alternative keywords; if you
want to compile with another compiler, you can define the alternate
keywords as macros to replace them with the customary keywords.  It
looks like this:

     #ifndef __GNUC__
     #define __asm__ asm
     #endif

   `-pedantic' causes warnings for many GNU C extensions.  You can
prevent such warnings within one expression by writing `__extension__'
before the expression.  `__extension__' has no effect aside from this.


@EndNode

@Node "Incomplete Enums" "gcc.guide/Incomplete Enums"
@Prev "Alternate Keywords"
@Toc "Extensions"

Incomplete `enum' Types
=======================

   You can define an `enum' tag without specifying its possible values.
This results in an incomplete type, much like what you get if you write
`struct foo' without describing the elements.  A later declaration
which does specify the possible values completes the type.

   You can't allocate variables or storage using the type while it is
incomplete.  However, you can work with pointers to that type.

   This extension may not be very useful, but it makes the handling of
`enum' more consistent with the way `struct' and `union' are handled.


@EndNode

@Node "Trouble" "gcc.guide/Trouble"
@Next "Bugs"
@Prev "Extensions"
@Toc "Main"

Known Causes of Trouble with GNU CC
***********************************

   This section describes known problems that affect users of GNU CC. 
Most of these are not GNU CC bugs per se--if they were, we would fix
them. But the result for a user may be like the result of a bug.

   Some of these problems are due to bugs in other software, some are
missing features that are too much work to add, and some are places
where people's opinions differ as to what is best.


 @{" Actual Bugs " Link "Actual Bugs"} 		      Bugs we will fix later.
 @{" Installation Problems " Link "Installation Problems"}      Problems that manifest when you install GNU CC.
 @{" Cross-Compiler Problems " Link "Cross-Compiler Problems"}    Common problems of cross compiling with GNU CC.
 @{" Interoperation " Link "Interoperation"}       Problems using GNU CC with other compilers,
			   and with certain linkers, assemblers and debuggers.
 @{" Incompatibilities " Link "Incompatibilities"}    GNU CC is incompatible with traditional C.
 @{" Disappointments " Link "Disappointments"}      Regrettable things we can't change, but not quite bugs.
 @{" Non-bugs " Link "Non-bugs"} 		Things we think are right, but some others disagree.


@EndNode

@Node "Actual Bugs" "gcc.guide/Actual Bugs"
@Next "Installation Problems"
@Toc "Trouble"

Actual Bugs We Haven't Fixed Yet
================================

   * Loop unrolling doesn't work properly for certain programs.  This is
     because of difficulty in updating the debugging information within
     the loop being unrolled.  We plan to revamp the representation of
     debugging information so that this will work properly, but we have
     not done this in version 2.2 because we don't want to delay it any
     further.

   * There is a bug in producing DBX output which outputs a structure
     tag even when a structure doesn't have a tag.  The reason we
     aren't fixing this now is that a clean fix requires
     reorganizations that seem risky. We will do them after 2.2 is
     released.


@EndNode

@Node "Installation Problems" "gcc.guide/Installation Problems"
@Next "Cross-Compiler Problems"
@Prev "Actual Bugs"
@Toc "Trouble"

Installation Problems
=====================

   This is a list of problems (and some apparent problems which don't
really mean anything is wrong) that show up during installation of GNU
CC.

   * On certain systems, defining certain environment variables such as
     `CC' can interfere with the functioning of `make'.

   * If you encounter seemingly strange errors when trying to build the
     compiler in a directory other than the source directory, it could
     be because you have previously configured the compiler in the
     source directory.  Make sure you have done all the necessary
     preparations. See @{"Other Dir" Link "Other Dir"}.

   * In previous versions of GNU CC, the `gcc' driver program looked for
     `as' and `ld' in various places such as files beginning with
     `/usr/local/lib/gcc-'.  GNU CC version 2 looks for them in the
     directory `/usr/local/lib/gcc-lib/TARGET/VERSION'.

     Thus, to use a version of `as' or `ld' that is not the system
     default, for example `gas' or GNU `ld', you must put them in that
     directory (or make links to them from that directory).

   * Some commands executed when making the compiler may fail (return a
     non-zero status) and be ignored by `make'.  These failures, which
     are often due to files that were not found, are expected, and can
     safely be ignored.

   * It is normal to have warnings in compiling certain files about
     unreachable code and about enumeration type clashes.  These files'
     names begin with `insn-'.

   * Sometimes `make' recompiles parts of the compiler when installing
     the compiler.  In one case, this was traced down to a bug in
     `make'.  Either ignore the problem or switch to GNU Make.

   * Sometimes on a Sun 4 you may observe a crash in the program
     `genflags' or `genoutput' while building GCC.  This is said to be
     due to a bug in `sh'.  You can probably get around it by running
     `genflags' or `genoutput' manually and then retrying the `make'.

   * On some versions of Ultrix, the system supplied compiler cannot
     compile `cp-parse.c' because it cannot handle so many cases in a
     `switch' statement.  You can avoid this problem by specifying
     `LANGUAGES=c' when you compile GNU CC with the Ultrix compiler.
     Then you can compile the entire GNU compiler with GNU CC.

   * If you use the 1.31 version of the MIPS assembler (such as was
     shipped with Ultrix 3.1), you will need to use the
     -fno-delayed-branch switch when optimizing floating point code. 
     Otherwise, the assembler will complain when the GCC compiler fills
     a branch delay slot with a floating point instruction, such as
     add.d.

   * Users have reported some problems with version 2.0 of the MIPS
     compiler tools that were shipped with Ultrix 4.1.  Version 2.10
     which came with Ultrix 4.2 seems to work fine.

   * On HP 9000 series 300 or 400 running HP-UX release 8.0, there is a
     bug in the assembler that must be fixed before GNU CC can be
     built.  This bug manifests itself during the first stage of
     compilation, while building `libgcc2.a':

          _floatdisf
          cc1: warning: `-g' option not supported on this version of GCC
          cc1: warning: `-g1' option not supported on this version of GCC
          ./gcc: Internal compiler error: program as got fatal signal 11

     A patched version of the assembler is available by anonymous ftp
     from `altdorf.ai.mit.edu' as the file
     `archive/cph/hpux-8.0-assembler'.  If you have HP software support,
     the patch can also be obtained directly from HP, as described in
     the following note:

          This is the patched assembler, to patch SR#1653-010439, where
          the assembler aborts on floating point constants.

          The bug is not really in the assembler, but in the shared
          library version of the function "cvtnum(3c)".  The bug on
          "cvtnum(3c)" is SR#4701-078451.  Anyway, the attached
          assembler uses the archive library version of "cvtnum(3c)"
          and thus does not exhibit the bug.

     This patch is also known as PHCO_0800.

   * Another assembler problem on the HP PA results in an error message
     like this while compiling part of `libgcc2.a':

          as: /usr/tmp/cca08196.s @line#30 [err#1060]
            Argument 1 or 3 in FARG upper
                   - lookahead = RTNVAL=GR

     This happens because HP changed the assembler syntax after system
     release 8.02.  GNU CC assumes the newer syntax; if your assembler
     wants the older syntax, comment out this line in the file
     `pa1-hpux.h':

          #define HP_FP_ARG_DESCRIPTOR_REVERSED

   * Some versions of the Pyramid C compiler are reported to be unable
     to compile GNU CC.  You must use an older version of GNU CC for
     bootstrapping.  One indication of this problem is if you get a
     crash when GNU CC compiles the function `muldi3' in file
     `libgcc2.c'.

     You may be able to succeed by getting GNU CC version 1, installing
     it, and using it to compile GNU CC version 2.  The bug in the
     Pyramid C compiler does not seem to affect GNU CC version 1.

   * On the Tower models 4N0 and 6N0, by default a process is not
     allowed to have more than one megabyte of memory.  GNU CC cannot
     compile itself (or many other programs) with `-O' in that much
     memory.

     To solve this problem, reconfigure the kernel adding the following
     line to the configuration file:

          MAXUMEM = 4096

   * On the Altos 3068, programs compiled with GNU CC won't work unless
     you fix a kernel bug.  This happens using system versions V.2.2
     1.0gT1 and V.2.2 1.0e and perhaps later versions as well.  See the
     file `README.ALTOS'.


@EndNode

@Node "Cross-Compiler Problems" "gcc.guide/Cross-Compiler Problems"
@Next "Interoperation"
@Prev "Installation Problems"
@Toc "Trouble"

Cross-Compiler Problems
=======================

   * Cross compilation can run into trouble for certain machines because
     some target machines' assemblers require floating point numbers to
     be written as *integer* constants in certain contexts.

     The compiler writes these integer constants by examining the
     floating point value as an integer and printing that integer,
     because this is simple to write and independent of the details of
     the floating point representation.  But this does not work if the
     compiler is running on a different machine with an incompatible
     floating point format, or even a different byte-ordering.

     In addition, correct constant folding of floating point values
     requires representing them in the target machine's format. (The C
     standard does not quite require this, but in practice it is the
     only way to win.)

     It is now possible to overcome these problems by defining macros
     such as `REAL_VALUE_TYPE'.  But doing so is a substantial amount of
     work for each target machine.  See @{"Cross-compilation" Link "Cross-compilation"}.

   * At present, the program `mips-tfile' which adds debug support to
     object files on MIPS systems does not work in a cross compile
     environment.


@EndNode

@Node "Interoperation" "gcc.guide/Interoperation"
@Next "Incompatibilities"
@Prev "Cross-Compiler Problems"
@Toc "Trouble"

Interoperation
==============

   This section lists various difficulties encountered in using GNU C or
GNU C++ together with other compilers or with the assemblers, linkers
and debuggers on certain systems.

   * GNU C normally compiles functions to return small structures and
     unions in registers.  Most other compilers arrange to return them
     just like larger structures and unions.  This can lead to trouble
     when you link together code compiled by different compilers. To
     avoid the problem, you can use the option `-fpcc-struct-value'
     when compiling with GNU CC.

   * GNU C++ does not do name mangling in the same way as other C++
     compilers.  This means that object files compiled with one compiler
     cannot be used with another.

     GNU C++ also uses different techniques for arranging virtual
     function tables and the layout of class instances.  In general,
     therefore, linking code compiled with different C++ compilers does
     not work.

   * Older GDB versions sometimes fail to read the output of GNU CC
     version 2.  If you have trouble, get GDB version 4.4 or later.

   * DBX rejects some files produced by GNU CC, though it accepts
     similar constructs in output from PCC.  Until someone can supply a
     coherent description of what is valid DBX input and what is not,
     there is nothing I can do about these problems.  You are on your
     own.

   * The GNU assembler (GAS) does not support PIC.  To generate PIC
     code, you must use some other assembler, such as `/bin/as'.

   * On some BSD systems including some versions of Ultrix, use of
     profiling causes static variable destructors (currently used only
     in C++) not to be run.

   * On a Sun, linking using GNU CC fails to find a shared library and
     reports that the library doesn't exist at all.

     This happens if you are using the GNU linker, because it does only
     static linking and looks only for unshared libraries.  If you have
     a shared library with no unshared counterpart, the GNU linker
     won't find anything.

     We hope to make a linker which supports Sun shared libraries, but
     please don't ask when it will be finished--we don't know.

   * Sun forgot to include a static version of `libdl.a' with some
     versions of SunOS (mainly 4.1).  This results in undefined symbols
     when linking static binaries (that is, if you use `-static').  If
     you see undefined symbols `_dlclose', `_dlsym' or `_dlopen' when
     linking, compile and link against the file `mit/util/misc/dlsym.c'
     from the MIT version of X windows.

   * On the HP PA machine, ADB sometimes fails to work on functions
     compiled with GNU CC.  Specifically, it fails to work on functions
     that use `alloca' or variable-size arrays.  This is because GNU CC
     doesn't generate HPUX unwind descriptors for such functions.  It
     may even be impossible to generate them.

   * Profiling is not supported on the HP PA machine.  Neither is
     debugging (`-g'), unless you use the preliminary GNU tools (see
     @{"Installation" Link "Installation"}).

   * GNU CC on the HP PA handles variadic function arguments using a
     calling convention incompatible with the HP compiler.  This is
     only a problem for routines that take `va_list' as parameters,
     such as `vprintf'.  This may be fixed eventually.

   * The current version of the assembler (`/bin/as') for the RS/6000
     has certain problems that prevent the `-g' option in GCC from
     working.

     IBM has produced a fixed version of the assembler.  The replacement
     assembler is not a standard component of either AIX 3.1.5 or AIX
     3.2, but is expected to become standard in a future distribution. 
     This assembler is available from IBM as APAR IX22829.  Yet more
     bugs have been fixed in a newer assembler, which will shortly be
     available as APAR IX26107.  See the file `README.RS6000' for more
     details on these assemblers.

   * On the IBM RS/6000, compiling code of the form

          extern int foo;
          
          ... foo ...
          
          static int foo;

     will cause the linker to report an undefined symbol `foo'.
     Although this behavior differs from most other systems, it is not a
     bug because redefining an `extern' variable as `static' is
     undefined in ANSI C.

   * On VMS, GAS versions 1.38.1 and earlier may cause spurious warning
     messages from the linker.  These warning messages complain of
     mismatched psect attributes.  You can ignore them.  See
     @{"VMS Install" Link "VMS Install"}.

   * On the Alliant, the system's own convention for returning
     structures and unions is unusual, and is not compatible with GNU
     CC no matter what options are used.

   * On the IBM RT PC, the MetaWare HighC compiler (hc) uses yet another
     convention for structure and union returning.  Use
     `-mhc-struct-return' to tell GNU CC to use a convention compatible
     with it.

   * On Ultrix, the Fortran compiler expects registers 2 through 5 to
     be saved by function calls.  However, the C compiler uses
     conventions compatible with BSD Unix: registers 2 through 5 may be
     clobbered by function calls.

     GNU CC uses the same convention as the Ultrix C compiler.  You can
     use these options to produce code compatible with the Fortran
     compiler:

          -fcall-saved-r2 -fcall-saved-r3 -fcall-saved-r4 -fcall-saved-r5


@EndNode

@Node "Incompatibilities" "gcc.guide/Incompatibilities"
@Next "Disappointments"
@Prev "Interoperation"
@Toc "Trouble"

Incompatibilities of GNU CC
===========================

   There are several noteworthy incompatibilities between GNU C and most
existing (non-ANSI) versions of C.  The `-traditional' option
eliminates many of these incompatibilities, *but not all*, by telling
GNU C to behave like the other C compilers.

   * GNU CC normally makes string constants read-only.  If several
     identical-looking string constants are used, GNU CC stores only one
     copy of the string.

     One consequence is that you cannot call `mktemp' with a string
     constant argument.  The function `mktemp' always alters the string
     its argument points to.

     Another consequence is that `sscanf' does not work on some systems
     when passed a string constant as its format control string or
     input. This is because `sscanf' incorrectly tries to write into
     the string constant.  Likewise `fscanf' and `scanf'.

     The best solution to these problems is to change the program to use
     `char'-array variables with initialization strings for these
     purposes instead of string constants.  But if this is not possible,
     you can use the `-fwritable-strings' flag, which directs GNU CC to
     handle string constants the same way most C compilers do.
     `-traditional' also has this effect, among others.

   * `-2147483648' is positive.

     This is because 2147483648 cannot fit in the type `int', so
     (following the ANSI C rules) its data type is `unsigned long int'.
     Negating this value yields 2147483648 again.

   * GNU CC does not substitute macro arguments when they appear inside
     of string constants.  For example, the following macro in GNU CC

          #define foo(a) "a"

     will produce output `"a"' regardless of what the argument A is.

     The `-traditional' option directs GNU CC to handle such cases
     (among others) in the old-fashioned (non-ANSI) fashion.

   * When you use `setjmp' and `longjmp', the only automatic variables
     guaranteed to remain valid are those declared `volatile'.  This is
     a consequence of automatic register allocation.  Consider this
     function:

          jmp_buf j;
          
          foo ()
          {
            int a, b;
          
            a = fun1 ();
            if (setjmp (j))
              return a;
          
            a = fun2 ();
            /* `longjmp (j)' may occur in `fun3'. */
            return a + fun3 ();
          }

     Here `a' may or may not be restored to its first value when the
     `longjmp' occurs.  If `a' is allocated in a register, then its
     first value is restored; otherwise, it keeps the last value stored
     in it.

     If you use the `-W' option with the `-O' option, you will get a
     warning when GNU CC thinks such a problem might be possible.

     The `-traditional' option directs GNU C to put variables in the
     stack by default, rather than in registers, in functions that call
     `setjmp'.  This results in the behavior found in traditional C
     compilers.

   * Programs that use preprocessor directives in the middle of macro
     arguments do not work with GNU CC.  For example, a program like
     this will not work:

          foobar (
          #define luser
                  hack)

     ANSI C does not permit such a construct.  It would make sense to
     support it when `-traditional' is used, but it is too much work to
     implement.

   * Declarations of external variables and functions within a block
     apply only to the block containing the declaration.  In other
     words, they have the same scope as any other declaration in the
     same place.

     In some other C compilers, a `extern' declaration affects all the
     rest of the file even if it happens within a block.

     The `-traditional' option directs GNU C to treat all `extern'
     declarations as global, like traditional compilers.

   * In traditional C, you can combine `long', etc., with a typedef
     name, as shown here:

          typedef int foo;
          typedef long foo bar;

     In ANSI C, this is not allowed: `long' and other type modifiers
     require an explicit `int'.  Because this criterion is expressed by
     Bison grammar rules rather than C code, the `-traditional' flag
     cannot alter it.

   * PCC allows typedef names to be used as function parameters.  The
     difficulty described immediately above applies here too.

   * PCC allows whitespace in the middle of compound assignment
     operators such as `+='.  GNU CC, following the ANSI standard, does
     not allow this.  The difficulty described immediately above
     applies here too.

   * GNU CC will flag unterminated character constants inside of
     preprocessor conditionals that fail.  Some programs have English
     comments enclosed in conditionals that are guaranteed to fail; if
     these comments contain apostrophes, GNU CC will probably report an
     error.  For example, this code would produce an error:

          #if 0
          You can't expect this to work.
          #endif

     The best solution to such a problem is to put the text into an
     actual C comment delimited by `/*...*/'.  However, `-traditional'
     suppresses these error messages.

   * When compiling functions that return `float', PCC converts it to a
     double.  GNU CC actually returns a `float'.  If you are concerned
     with PCC compatibility, you should declare your functions to return
     `double'; you might as well say what you mean.

   * When compiling functions that return structures or unions, GNU CC
     output code normally uses a method different from that used on most
     versions of Unix.  As a result, code compiled with GNU CC cannot
     call a structure-returning function compiled with PCC, and vice
     versa.

     The method used by GNU CC is as follows: a structure or union
     which is 1, 2, 4 or 8 bytes long is returned like a scalar.  A
     structure or union with any other size is stored into an address
     supplied by the caller (usually in a special, fixed register, but
     on some machines it is passed on the stack).  The
     machine-description macros `STRUCT_VALUE' and
     `STRUCT_INCOMING_VALUE' tell GNU CC where to pass this address.

     By contrast, PCC on most target machines returns structures and
     unions of any size by copying the data into an area of static
     storage, and then returning the address of that storage as if it
     were a pointer value. The caller must copy the data from that
     memory area to the place where the value is wanted.  GNU CC does
     not use this method because it is slower and nonreentrant.

     On some newer machines, PCC uses a reentrant convention for all
     structure and union returning.  GNU CC on most of these machines
     uses a compatible convention when returning structures and unions
     in memory, but still returns small structures and unions in
     registers.

     You can tell GNU CC to use a compatible convention for all
     structure and union returning with the option
     `-fpcc-struct-return'.


@EndNode

@Node "Disappointments" "gcc.guide/Disappointments"
@Next "Non-bugs"
@Prev "Incompatibilities"
@Toc "Trouble"

Disappointments and Misunderstandings
=====================================

   These problems are perhaps regrettable, but we don't know any
practical way around them.

   * Certain local variables aren't recognized by debuggers when you
     compile with optimization.

     This occurs because sometimes GNU CC optimizes the variable out of
     existence.  There is no way to tell the debugger how to compute the
     value such a variable "would have had", and it is not clear that
     would be desirable anyway.  So GNU CC simply does not mention the
     eliminated variable when it writes debugging information.

     You have to expect a certain amount of disagreement between the
     executable and your source code, when you use optimization.

   * Users often think it is a bug when GNU CC reports an error for code
     like this:

          int foo (struct mumble *);
          
          struct mumble { ... };
          
          int foo (struct mumble *x)
          { ... }

     This code really is erroneous, because the scope of `struct
     mumble' the prototype is limited to the argument list containing
     it. It does not refer to the `struct mumble' defined with file
     scope immediately below--they are two unrelated types with similar
     names in different scopes.

     But in the definition of `foo', the file-scope type is used
     because that is available to be inherited.  Thus, the definition
     and the prototype do not match, and you get an error.

     This behavior may seem silly, but it's what the ANSI standard
     specifies. It is easy enough for you to make your code work by
     moving the definition of `struct mumble' above the prototype. 
     It's not worth being incompatible with ANSI C just to avoid an
     error for the example shown above.


@EndNode

@Node "Non-bugs" "gcc.guide/Non-bugs"
@Prev "Disappointments"
@Toc "Trouble"

Certain Changes We Don't Want to Make
=====================================

   This section lists changes that people frequently request, but which
we do not make because we think GNU CC is better without them.

   * Checking the number and type of arguments to a function which has
     an old-fashioned definition and no prototype.

     Such a feature would work only occasionally--only for calls that
     appear in the same file as the called function, following the
     definition.  The only way to check all calls reliably is to add a
     prototype for the function.  But adding a prototype eliminates the
     motivation for this feature.  So the feature is not worthwhile.

   * Warning about using an expression whose type is signed as a shift
     count.

     Shift count operands are probably signed more often than unsigned.
     Warning about this would cause far more annoyance than good.

   * Warning about assigning a signed value to an unsigned variable.

     Such assignments must be very common; warning about them would
     cause more annoyance than good.

   * Warning when a non-void function value is ignored.

     Coming as I do from a Lisp background, I balk at the idea that
     there is something dangerous about discarding a value.  There are
     functions that return values which some callers may find useful;
     it makes no sense to clutter the program with a cast to `void'
     whenever the value isn't useful.

   * Assuming (for optimization) that the address of an external symbol
     is never zero.

     This assumption is false on certain systems when `#pragma weak' is
     used.

   * Making `-fshort-enums' the default.

     This would cause storage layout to be incompatible with most other
     C compilers.  And it doesn't seem very important, given that you
     can get the same result in other ways.  The case where it matters
     most is when the enumeration-valued object is inside a structure,
     and in that case you can specify a field width explicitly.

   * Making bitfields unsigned by default on particular machines where
     "the ABI standard" says to do so.

     The ANSI C standard leaves it up to the implementation whether a
     bitfield declared plain `int' is signed or not.  This in effect
     creates two alternative dialects of C.

     The GNU C compiler supports both dialects; you can specify the
     dialect you want with the option `-fsigned-bitfields' or
     `-funsigned-bitfields'.  However, this leaves open the question of
     which dialect to use by default.

     Currently, the preferred dialect makes plain bitfields signed,
     because this is simplest.  Since `int' is the same as `signed int'
     in every other context, it is cleanest for them to be the same in
     bitfields as well.

     Some computer manufacturers have published Application Binary
     Interface standards which specify that plain bitfields should be
     unsigned.  It is a mistake, however, to say anything about this
     issue in an ABI.  This is because the handling of plain bitfields
     distinguishes two dialects of C. Both dialects are meaningful on
     every type of machine.  Whether a particular object file was
     compiled using signed bitfields or unsigned is of no concern to
     other object files, even if they access the same bitfields in the
     same data structures.

     A given program is written in one or the other of these two
     dialects. The program stands a chance to work on most any machine
     if it is compiled with the proper dialect.  It is unlikely to work
     at all if compiled with the wrong dialect.

     Many users appreciate the GNU C compiler because it provides an
     environment that is uniform across machines.  These users would be
     inconvenienced if the compiler treated plain bitfields differently
     on certain machines.

     Occasionally users write programs intended only for a particular
     machine type.  On these occasions, the users would benefit if the
     GNU C compiler were to support by default the same dialect as the
     other compilers on that machine.  But such applications are rare. 
     And users writing a program to run on more than one type of
     machine cannot possibly benefit from this kind of compatibility.

     This is why GNU CC does and will treat plain bitfields in the same
     fashion on all types of machines (by default).

     There are some arguments for making bitfields unsigned by default
     on all machines.  If, for example, this becomes a universal de
     facto standard, it would make sense for GNU CC to go along with
     it.  This is something to be considered in the future.

     (Of course, users strongly concerned about portability should
     indicate explicitly in each bitfield whether it is signed or not. 
     In this way, they write programs which have the same meaning in
     both C dialects.)

   * Undefining `__STDC__' when `-ansi' is not used.

     Currently, GNU CC defines `__STDC__' as long as you don't use
     `-traditional'.  This provides good results in practice.

     Programmers normally use conditionals on `__STDC__' to ask whether
     it is safe to use certain features of ANSI C, such as function
     prototypes or ANSI token concatenation.  Since plain `gcc' supports
     all the features of ANSI C, the correct answer to these questions
     is "yes".

     Some users try to use `__STDC__' to check for the availability of
     certain library facilities.  This is actually incorrect usage in
     an ANSI C program, because the ANSI C standard says that a
     conforming freestanding implementation should define `__STDC__'
     even though it does not have the library facilities.  `gcc -ansi
     -pedantic' is a conforming freestanding implementation, and it is
     therefore required to define `__STDC__', even though it does not
     come with an ANSI C library.

     Sometimes people say that defining `__STDC__' in a compiler that
     does not completely conform to the ANSI C standard somehow
     violates the standard.  This is illogical.  The standard is a
     standard for compilers that claim to support ANSI C, such as `gcc
     -ansi'--not for other compilers such as plain `gcc'.  Whatever the
     ANSI C standard says is relevant to the design of plain `gcc'
     without `-ansi' only for pragmatic reasons, not as a requirement.

   * Undefining `__STDC__' in C++.

     Programs written to compile with C++-to-C translators get the
     value of `__STDC__' that goes with the C compiler that is
     subsequently used.  These programs must test `__STDC__' to
     determine what kind of C preprocessor that compiler uses: whether
     they should concatenate tokens in the ANSI C fashion or in the
     traditional fashion.

     These programs work properly with GNU C++ if `__STDC__' is defined.
     They would not work otherwise.

     In addition, many header files are written to provide prototypes
     in ANSI C but not in traditional C.  Many of these header files
     can work without change in C++ provided `__STDC__' is defined.  If
     `__STDC__' is not defined, they will all fail, and will all need
     to be changed to test explicitly for C++ as well.

   * Deleting "empty" loops.

     GNU CC does not delete "empty" loops because the most likely reason
     you would put one in a program is to have a delay.  Deleting them
     will not make real programs run any faster, so it would be
     pointless.

     It would be different if optimization of a nonempty loop could
     produce an empty one.  But this generally can't happen.


@EndNode

@Node "Bugs" "gcc.guide/Bugs"
@Next "Service"
@Prev "Trouble"
@Toc "Main"

Reporting Bugs
**************

   Your bug reports play an essential role in making GNU CC reliable.

   When you encounter a problem, the first thing to do is to see if it
is already known.  See @{"Trouble" Link "Trouble"}.  If it isn't known, then you should
report the problem.

   Reporting a bug may help you by bringing a solution to your problem,
or it may not.  (If it does not, look in the service directory; see
@{"Service" Link "Service"}.)  In any case, the principal function of a bug report is to
help the entire community by making the next version of GNU CC work
better.  Bug reports are your contribution to the maintenance of GNU CC.

   In order for a bug report to serve its purpose, you must include the
information that makes for fixing the bug.


 @{" Criteria " Link "Bug Criteria"}                  Have you really found a bug?
 @{" Where " Link "Bug Lists"}           	     Where to send your bug report.
 @{" Reporting " Link "Bug Reporting"}                 How to report a bug effectively.
 @{" Patches " Link "Sending Patches"}                   How to send a patch for GNU CC.
 @{" Known " Link "Trouble"}                     Known problems.
 @{" Help " Link "Service"}                      Where to ask for help.


@EndNode

@Node "Bug Criteria" "gcc.guide/Bug Criteria"
@Next "Bug Lists"
@Toc "Bugs"

Have You Found a Bug?
=====================

   If you are not sure whether you have found a bug, here are some
guidelines:

   * If the compiler gets a fatal signal, for any input whatever, that
     is a compiler bug.  Reliable compilers never crash.

   * If the compiler produces invalid assembly code, for any input
     whatever (except an `asm' statement), that is a compiler bug,
     unless the compiler reports errors (not just warnings) which would
     ordinarily prevent the assembler from being run.

   * If the compiler produces valid assembly code that does not
     correctly execute the input source code, that is a compiler bug.

     However, you must double-check to make sure, because you may have
     run into an incompatibility between GNU C and traditional C (see
     @{"Incompatibilities" Link "Incompatibilities"}).  These incompatibilities might be considered
     bugs, but they are inescapable consequences of valuable features.

     Or you may have a program whose behavior is undefined, which
     happened by chance to give the desired results with another C or
     C++ compiler.

     For example, in many nonoptimizing compilers, you can write `x;'
     at the end of a function instead of `return x;', with the same
     results.  But the value of the function is undefined if `return'
     is omitted; it is not a bug when GNU CC produces different results.

     Problems often result from expressions with two increment
     operators, as in `f (*p++, *p++)'.  Your previous compiler might
     have interpreted that expression the way you intended; GNU CC might
     interpret it another way.  Neither compiler is wrong.  The bug is
     in your code.

     After you have localized the error to a single source line, it
     should be easy to check for these things.  If your program is
     correct and well defined, you have found a compiler bug.

   * If the compiler produces an error message for valid input, that is
     a compiler bug.

   * If the compiler does not produce an error message for invalid
     input, that is a compiler bug.  However, you should note that your
     idea of "invalid input" might be my idea of "an extension" or
     "support for traditional practice".

   * If you are an experienced user of C or C++ compilers, your
     suggestions for improvement of GNU CC or GNU C++ are welcome in
     any case.


@EndNode

@Node "Bug Lists" "gcc.guide/Bug Lists"
@Next "Bug Reporting"
@Prev "Bug Criteria"
@Toc "Bugs"

Where to Report Bugs
====================

   Send bug reports for GNU C to one of these addresses:

     bug-gcc@prep.ai.mit.edu
     {ucbvax|mit-eddie|uunet}!prep.ai.mit.edu!bug-gcc

   Send bug reports for GNU C++ to one of these addresses:

     bug-g++@prep.ai.mit.edu
     {ucbvax|mit-eddie|uunet}!prep.ai.mit.edu!bug-g++

   *Do not send bug reports to `help-gcc', or to the newsgroup
`gnu.gcc.help'.*  Most users of GNU CC do not want to receive bug
reports.  Those that do, have asked to be on `bug-gcc' and/or `bug-g++'.

   The mailing lists `bug-gcc' and `bug-g++' both have newsgroups which
serve as repeaters: `gnu.gcc.bug' and `gnu.g++.bug'. Each mailing list
and its newsgroup carry exactly the same messages.

   Often people think of posting bug reports to the newsgroup instead of
mailing them.  This appears to work, but it has one problem which can be
crucial: a newsgroup posting does not contain a mail path back to the
sender.  Thus, if maintaners need more information, they may be unable
to reach you.  For this reason, you should always send bug reports by
mail to the proper mailing list.

   As a last resort, send bug reports on paper to:

     GNU Compiler Bugs
     Free Software Foundation
     675 Mass Ave
     Cambridge, MA 02139


@EndNode

@Node "Bug Reporting" "gcc.guide/Bug Reporting"
@Next "Sending Patches"
@Prev "Bug Lists"
@Toc "Bugs"

How to Report Bugs
==================

   The fundamental principle of reporting bugs usefully is this:
*report all the facts*.  If you are not sure whether to state a fact or
leave it out, state it!

   Often people omit facts because they think they know what causes the
problem and they conclude that some details don't matter.  Thus, you
might assume that the name of the variable you use in an example does
not matter. Well, probably it doesn't, but one cannot be sure.  Perhaps
the bug is a stray memory reference which happens to fetch from the
location where that name is stored in memory; perhaps, if the name were
different, the contents of that location would fool the compiler into
doing the right thing despite the bug.  Play it safe and give a
specific, complete example.  That is the easiest thing for you to do,
and the most helpful.

   Keep in mind that the purpose of a bug report is to enable someone to
fix the bug if it is not known.  It isn't very important what happens if
the bug is already known.  Therefore, always write your bug reports on
the assumption that the bug is not known.

   Sometimes people give a few sketchy facts and ask, "Does this ring a
bell?"  This cannot help us fix a bug, so it is basically useless.  We
respond by asking for enough details to enable us to investigate. You
might as well expedite matters by sending them to begin with.

   Try to make your bug report self-contained.  If we have to ask you
for more information, it is best if you include all the previous
information in your response, as well as the information that was
missing.

   To enable someone to investigate the bug, you should include all
these things:

   * The version of GNU CC.  You can get this by running it with the
     `-v' option.

     Without this, we won't know whether there is any point in looking
     for the bug in the current version of GNU CC.

   * A complete input file that will reproduce the bug.  If the bug is
     in the C preprocessor, send a source file and any header files
     that it requires.  If the bug is in the compiler proper (`cc1'),
     run your source file through the C preprocessor by doing `gcc -E
     SOURCEFILE > OUTFILE', then include the contents of OUTFILE in the
     bug report.  (When you do this, use the same `-I', `-D' or `-U'
     options that you used in actual compilation.)

     A single statement is not enough of an example.  In order to
     compile it, it must be embedded in a function definition; and the
     bug might depend on the details of how this is done.

     Without a real example one can compile, all anyone can do about
     your bug report is wish you luck.  It would be futile to try to
     guess how to provoke the bug.  For example, bugs in register
     allocation and reloading frequently depend on every little detail
     of the function they happen in.

   * The command arguments you gave GNU CC or GNU C++ to compile that
     example and observe the bug.  For example, did you use `-O'?  To
     guarantee you won't omit something important, list all the options.

     If we were to try to guess the arguments, we would probably guess
     wrong and then we would not encounter the bug.

   * The type of machine you are using, and the operating system name
     and version number.

   * The operands you gave to the `configure' command when you installed
     the compiler.

   * A complete list of any modifications you have made to the compiler
     source.  (We don't promise to investigate the bug unless it
     happens in an unmodified compiler.  But if you've made
     modifications and don't tell us, then you are sending us on a wild
     goose chase.)

     Be precise about these changes--show a context diff for them.

     Adding files of your own (such as a machine description for a
     machine we don't support) is a modification of the compiler source.

   * Details of any other deviations from the standard procedure for
     installing GNU CC.

   * A description of what behavior you observe that you believe is
     incorrect.  For example, "The compiler gets a fatal signal," or,
     "The assembler instruction at line 208 in the output is incorrect."

     Of course, if the bug is that the compiler gets a fatal signal,
     then one can't miss it.  But if the bug is incorrect output, the
     maintainer might not notice unless it is glaringly wrong.  None of
     us has time to study all the assembler code from a 50-line C
     program just on the chance that one instruction might be wrong. 
     We need `you' to do this part!

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of the compiler is out of synch, or you have
     encountered a bug in the C library on your system.  (This has
     happened!)  Your copy might crash and the copy here would not.  If
     you said to expect a crash, then when the compiler here fails to
     crash, we would know that the bug was not happening.  If you don't
     say to expect a crash, then we would not know whether the bug was
     happening.  We would not be able to draw any conclusion from our
     observations.

     Often the observed symptom is incorrect output when your program
     is run. Sad to say, this is not enough information unless the
     program is short and simple.  None of us has time to study a large
     program to figure out how it would work if compiled correctly,
     much less which line of it was compiled wrong.  So you will have
     to do that.  Tell us which source line it is, and what incorrect
     result happens when that line is executed.  A person who
     understands the program can find this as easily as finding a bug
     in the program itself.

   * If you send examples of assembler code output from GNU CC or GNU
     C++, please use `-g' when you make them.  The debugging information
     includes source line numbers which are essential for correlating
     the output with the input.

   * If you wish to suggest changes to the GNU CC source, send them as
     context diffs.  If you even discuss something in the GNU CC source,
     refer to it by context, not by line number.

     The line numbers in the development sources don't match those in
     your sources.  Your line numbers would convey no useful
     information to the maintainers.

   * Additional information from a debugger might enable someone to
     find a problem on a machine which he does not have available. 
     However, you need to think when you collect this information if
     you want it to have any chance of being useful.

     For example, many people send just a backtrace, but that is never
     useful by itself.  A simple backtrace with arguments conveys little
     about GNU CC because the compiler is largely data-driven; the same
     functions are called over and over for different RTL insns, doing
     different things depending on the details of the insn.

     Most of the arguments listed in the backtrace are useless because
     they are pointers to RTL list structure.  The numeric values of the
     pointers, which the debugger prints in the backtrace, have no
     significance whatever; all that matters is the contents of the
     objects they point to (and most of the contents are other such
     pointers).

     In addition, most compiler passes consist of one or more loops that
     scan the RTL insn sequence.  The most vital piece of information
     about such a loop--which insn it has reached--is usually in a
     local variable, not in an argument.

     What you need to provide in addition to a backtrace are the values
     of the local variables for several stack frames up.  When a local
     variable or an argument is an RTX, first print its value and then
     use the GDB command `pr' to print the RTL expression that it points
     to.  (If GDB doesn't run on your machine, use your debugger to call
     the function `debug_rtx' with the RTX as an argument.)  In
     general, whenever a variable is a pointer, its value is no use
     without the data it points to.

     In addition, include a debugging dump from just before the pass in
     which the crash happens.  Most bugs involve a series of insns, not
     just one.

   Here are some things that are not necessary:

   * A description of the envelope of the bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and which
     changes will not affect it.

     This is often time consuming and not very useful, because the way
     we will find the bug is by running a single example under the
     debugger with breakpoints, not by pure deduction from a series of
     examples.  You might as well save your time for something else.

     Of course, if you can find a simpler example to report *instead* of
     the original one, that is a convenience.  Errors in the output
     will be easier to spot, running under the debugger will take less
     time, etc. Most GNU CC bugs involve just one function, so the most
     straightforward way to simplify an example is to delete all the
     function definitions except the one where the bug occurs.  Those
     earlier in the file may be replaced by external declarations if
     the crucial function depends on them.  (Exception: inline
     functions may affect compilation of functions defined later in the
     file.)

     However, simplification is not vital; if you don't want to do this,
     report the bug anyway and send the entire test case you used.

   * A patch for the bug.

     A patch for the bug is useful if it is a good one.  But don't omit
     the necessary information, such as the test case, on the
     assumption that a patch is all we need.  We might see problems
     with your patch and decide to fix the problem another way, or we
     might not understand it at all.

     Sometimes with a program as complicated as GNU CC it is very hard
     to construct an example that will make the program follow a
     certain path through the code.  If you don't send the example, we
     won't be able to construct one, so we won't be able to verify that
     the bug is fixed.

     And if we can't understand what bug you are trying to fix, or why
     your patch should be an improvement, we won't install it.  A test
     case will help us to understand.

     See @{"Sending Patches" Link "Sending Patches"}, for guidelines on how to make it easy for us
     to understand and install your patches.

   * A guess about what the bug is or what it depends on.

     Such guesses are usually wrong.  Even I can't guess right about
     such things without first using the debugger to find the facts.


@EndNode

@Node "Sending Patches" "gcc.guide/Sending Patches"
@Prev "Bug Reporting"
@Toc "Bugs"

Sending Patches for GNU CC
==========================

   If you would like to write bug fixes or improvements for the GNU C
compiler, that is very helpful.  When you send your changes, please
follow these guidelines to avoid causing extra work for us in studying
the patches.

   If you don't follow these guidelines, your information might still be
useful, but using it will take extra work.  Maintaining GNU C is a lot
of work in the best of circumstances, and we can't keep up unless you do
your best to help.

   * Send an explanation with your changes of what problem they fix or
     what improvement they bring about.  For a bug fix, just include a
     copy of the bug report, and explain why the change fixes the bug.

     (Referring to a bug report is not as good as including it, because
     then we will have to look it up, and we have probably already
     deleted it if we've already fixed the bug.)

   * Always include a proper bug report for the problem you think you
     have fixed.  We need to convince ourselves that the change is
     right before installing it.  Even if it is right, we might have
     trouble judging it if we don't have a way to reproduce the problem.

   * Include all the comments that are appropriate to help people
     reading the source in the future understand why this change was
     needed.

   * Don't mix together changes made for different reasons. Send them
     *individually*.

     If you make two changes for separate reasons, then we might not
     want to install them both.  We might want to install just one.  If
     you send them all jumbled together in a single set of diffs, we
     have to do extra work to disentangle them--to figure out which
     parts of the change serve which purpose.  If we don't have time
     for this, we might have to ignore your changes entirely.

     If you send each change as soon as you have written it, with its
     own explanation, then the two changes never get tangled up, and we
     can consider each one properly without any extra work to
     disentangle them.

     Ideally, each change you send should be impossible to subdivide
     into parts that we might want to consider separately, because each
     of its parts gets its motivation from the other parts.

   * Send each change as soon as that change is finished.  Sometimes
     people think they are helping us by accumulating many changes to
     send them all together.  As explained above, this is absolutely
     the worst thing you could do.

     Since you should send each change separately, you might as well
     send it right away.  That gives us the option of installing it
     immediately if it is important.

   * Use `diff -c' to make your diffs.  Diffs without context are hard
     for us to install reliably.  More than that, they make it hard for
     us to study the diffs to decide whether we want to install them. 
     Unidiff format is better than contextless diffs, but not as easy
     to read as `-c' format.

     If you have GNU diff, use `diff -cp', which shows the name of the
     function that each change occurs in.

   * Write the change log entries for your changes.  We get lots of
     changes, and we don't have time to do all the change log writing
     ourselves.

     Read the `ChangeLog' file to see what sorts of information to put
     in, and to learn the style that we use.  The purpose of the change
     log is to show people where to find what was changed.  So you need
     to be specific about what functions you changed; in large
     functions, it's often helpful to indicate where within the
     function the change was.

     On the other hand, once you have shown people where to find the
     change, you need not explain its purpose. Thus, if you add a new
     function, all you need to say about it is that it is new.  If you
     feel that the purpose needs explaining, it probably does--but the
     explanation will be much more useful if you put it in comments in
     the code.

     If you would like your name to appear in the header line for who
     made the change, send us the header line.

   * When you write the fix, keep in mind that I can't install a change
     that would break other systems.

     People often suggest fixing a problem by changing
     machine-independent files such as `toplev.c' to do something
     special that a particular system needs.  Sometimes it is totally
     obvious that such changes would break GNU CC for almost all users.
      We can't possibly make a change like that.  At best it might tell
     us how to write another patch that would solve the problem
     acceptably.

     Sometimes people send fixes that *might* be an improvement in
     general--but it is hard to be sure of this.  It's hard to install
     such changes because we have to study them very carefully.  Of
     course, a good explanation of the reasoning by which you concluded
     the change was correct can help convince us.

     The safest changes are changes to the configuration files for a
     particular machine.  These are safe because they can't create new
     bugs on other machines.

     Please help us keep up with the workload by designing the patch in
     a form that is good to install.


@EndNode

@Node "Service" "gcc.guide/Service"
@Next "VMS"
@Prev "Bugs"
@Toc "Main"

How To Get Help with GNU CC
***************************

   If you need help installing, using or changing GNU CC, there are two
ways to find it:

   * Send a message to a suitable network mailing list.  First try
     `bug-gcc@prep.ai.mit.edu', and if that brings no response, try
     `help-gcc@prep.ai.mit.edu'.

   * Look in the service directory for someone who might help you for a
     fee. The service directory is found in the file named `SERVICE' in
     the GNU CC distribution.


@EndNode

@Node "VMS" "gcc.guide/VMS"
@Next "Portability"
@Prev "Service"
@Toc "Main"

Using GNU CC on VMS
*******************


 @{" Include Files and VMS " Link "Include Files and VMS"}   Where the preprocessor looks for the include files.
 @{" Global Declarations " Link "Global Declarations"}     How to do globaldef, globalref and globalvalue with
                           GNU CC.
 @{" VMS Misc " Link "VMS Misc"} 		   Misc information.


@EndNode

@Node "Include Files and VMS" "gcc.guide/Include Files and VMS"
@Next "Global Declarations"
@Toc "VMS"

Include Files and VMS
=====================

   Due to the differences between the filesystems of Unix and VMS, GNU
CC attempts to translate file names in `#include' into names that VMS
will understand.  The basic strategy is to prepend a prefix to the
specification of the include file, convert the whole filename to a VMS
filename, and then try to open the file.  GNU CC tries various prefixes
one by one until one of them succeeds:

  1. The first prefix is the `GNU_CC_INCLUDE:' logical name: this is
     where GNU C header files are traditionally stored.  If you wish to
     store header files in non-standard locations, then you can assign
     the logical `GNU_CC_INCLUDE' to be a search list, where each
     element of the list is suitable for use with a rooted logical.

  2. The next prefix tried is `SYS$SYSROOT:[SYSLIB.]'.  This is where
     VAX-C header files are traditionally stored.

  3. If the include file specification by itself is a valid VMS
     filename, the preprocessor then uses this name with no prefix in
     an attempt to open the include file.

  4. If the file specification is not a valid VMS filename (i.e. does
     not contain a device or a directory specifier, and contains a `/'
     character), the preprocessor tries to convert it from Unix syntax
     to VMS syntax.

     Conversion works like this: the first directory name becomes a
     device, and the rest of the directories are converted into
     VMS-format directory names.  For example, `X11/foobar.h' is
     translated to `X11:[000000]foobar.h' or `X11:foobar.h', whichever
     one can be opened.  This strategy allows you to assign a logical
     name to point to the actual location of the header files.

  5. If none of these strategies succeeds, the `#include' fails.

   Include directives of the form:

     #include foobar

are a common source of incompatibility between VAX-C and GNU CC.  VAX-C
treats this much like a standard `#include <foobar.h>' directive. That
is incompatible with the ANSI C behavior implemented by GNU CC: to
expand the name `foobar' as a macro.  Macro expansion should eventually
yield one of the two standard formats for `#include':

     #include "FILE"
     #include <FILE>

   If you have this problem, the best solution is to modify the source
to convert the `#include' directives to one of the two standard forms.
That will work with either compiler.  If you want a quick and dirty fix,
define the file names as macros with the proper expansion, like this:

     #define stdio <stdio.h>

This will work, as long as the name doesn't conflict with anything else
in the program.

   Another source of incompatibility is that VAX-C assumes that:

     #include "foobar"

is actually asking for the file `foobar.h'.  GNU CC does not make this
assumption, and instead takes what you ask for literally; it tries to
read the file `foobar'.  The best way to avoid this problem is to
always specify the desired file extension in your include directives.

   GNU CC for VMS is distributed with a set of include files that is
sufficient to compile most general purpose programs.  Even though the
GNU CC distribution does not contain header files to define constants
and structures for some VMS system-specific functions, there is no
reason why you cannot use GNU CC with any of these functions.  You first
may have to generate or create header files, either by using the public
domain utility `UNSDL' (which can be found on a DECUS tape), or by
extracting the relevant modules from one of the system macro libraries,
and using an editor to construct a C header file.


@EndNode

@Node "Global Declarations" "gcc.guide/Global Declarations"
@Next "VMS Misc"
@Prev "Include Files and VMS"
@Toc "VMS"

Global Declarations and VMS
===========================

   GNU CC does not provide the `globalref', `globaldef' and
`globalvalue' keywords of VAX-C.  You can get the same effect with an
obscure feature of GAS, the GNU assembler.  (This requires GAS version
1.39 or later.)  The following macros allow you to use this feature in
a fairly natural way:

     #ifdef __GNUC__
     #define GLOBALREF(TYPE,NAME)                      \
       TYPE NAME                                       \
       asm ("_$$PsectAttributes_GLOBALSYMBOL$$" #NAME)
     #define GLOBALDEF(TYPE,NAME,VALUE)                \
       TYPE NAME                                       \
       asm ("_$$PsectAttributes_GLOBALSYMBOL$$" #NAME) \
         = VALUE
     #define GLOBALVALUEREF(TYPE,NAME)                 \
       const TYPE NAME[1]                              \
       asm ("_$$PsectAttributes_GLOBALVALUE$$" #NAME)
     #define GLOBALVALUEDEF(TYPE,NAME,VALUE)           \
       const TYPE NAME[1]                              \
       asm ("_$$PsectAttributes_GLOBALVALUE$$" #NAME)  \
         = {VALUE}
     #else
     #define GLOBALREF(TYPE,NAME) \
       globalref TYPE NAME
     #define GLOBALDEF(TYPE,NAME,VALUE) \
       globaldef TYPE NAME = VALUE
     #define GLOBALVALUEDEF(TYPE,NAME,VALUE) \
       globalvalue TYPE NAME = VALUE
     #define GLOBALVALUEREF(TYPE,NAME) \
       globalvalue TYPE NAME
     #endif

(The `_$$PsectAttributes_GLOBALSYMBOL' prefix at the start of the name
is removed by the assembler, after it has modified the attributes of
the symbol).  These macros are provided in the VMS binaries
distribution in a header file `GNU_HACKS.H'.  An example of the usage
is:

     GLOBALREF (int, ijk);
     GLOBALDEF (int, jkl, 0);

   The macros `GLOBALREF' and `GLOBALDEF' cannot be used
straightforwardly for arrays, since there is no way to insert the array
dimension into the declaration at the right place.  However, you can
declare an array with these macros if you first define a typedef for the
array type, like this:

     typedef int intvector[10];
     GLOBALREF (intvector, foo);

   Array and structure initializers will also break the macros; you can
define the initializer to be a macro of its own, or you can expand the
`GLOBALDEF' macro by hand.  You may find a case where you wish to use
the `GLOBALDEF' macro with a large array, but you are not interested in
explicitly initializing each element of the array.  In such cases you
can use an initializer like: `{0,}', which will initialize the entire
array to `0'.

   A shortcoming of this implementation is that a variable declared with
`GLOBALVALUEREF' or `GLOBALVALUEDEF' is always an array.  For example,
the declaration:

     GLOBALVALUEREF(int, ijk);

declares the variable `ijk' as an array of type `int [1]'. This is done
because a globalvalue is actually a constant; its "value" is what the
linker would normally consider an address.  That is not how an integer
value works in C, but it is how an array works.  So treating the symbol
as an array name gives consistent results--with the exception that the
value seems to have the wrong type.  *Don't try to access an element of
the array.*  It doesn't have any elements. The array "address" may not
be the address of actual storage.

   The fact that the symbol is an array may lead to warnings where the
variable is used.  Insert type casts to avoid the warnings.  Here is an
example; it takes advantage of the ANSI C feature allowing macros that
expand to use the same name as the macro itself.

     GLOBALVALUEREF (int, ss$_normal);
     GLOBALVALUEDEF (int, xyzzy,123);
     #ifdef __GNUC__
     #define ss$_normal ((int) ss$_normal)
     #define xyzzy ((int) xyzzy)
     #endif

   Don't use `globaldef' or `globalref' with a variable whose type is
an enumeration type; this is not implemented.  Instead, make the
variable an integer, and use a `globalvaluedef' for each of the
enumeration values.  An example of this would be:

     #ifdef __GNUC__
     GLOBALDEF (int, color, 0);
     GLOBALVALUEDEF (int, RED, 0);
     GLOBALVALUEDEF (int, BLUE, 1);
     GLOBALVALUEDEF (int, GREEN, 3);
     #else
     enum globaldef color {RED, BLUE, GREEN = 3};
     #endif


@EndNode

@Node "VMS Misc" "gcc.guide/VMS Misc"
@Prev "Global Declarations"
@Toc "VMS"

Other VMS Issues
================

   GNU CC automatically arranges for `main' to return 1 by default if
you fail to specify an explicit return value.  This will be interpreted
by VMS as a status code indicating a normal successful completion.
Version 1 of GNU CC did not provide this default.

   GNU CC on VMS works only with the GNU assembler, GAS.  You need
version 1.37 or later of GAS in order to produce value debugging
information for the VMS debugger.  Use the ordinary VMS linker with the
object files produced by GAS.

   Under previous versions of GNU CC, the generated code would
occasionally give strange results when linked to the sharable `VAXCRTL'
library. Now this should work.

   A caveat for use of `const' global variables: the `const' modifier
must be specified in every external declaration of the variable in all
of the source files that use that variable.  Otherwise the linker will
issue warnings about conflicting attributes for the variable.  Your
program will still work despite the warnings, but the variable will be
placed in writable storage.

   The VMS linker does not distinguish between upper and lower case
letters in function and variable names.  However, usual practice in C
is to distinguish case.  Normally GNU CC (by means of the assembler GAS)
implements usual C behavior by augmenting each name that is not all
lower-case.  A name is augmented by truncating it to at most 23
characters and then adding more characters at the end which encode the
case pattern the rest.

   Name augmentation yields bad results for programs that use
precompiled libraries (such as Xlib) which were generated by another
compiler.  You can use the compiler option `/NOCASE_HACK' to inhibit
augmentation; it makes external C functions and variables
case-independent as is usual on VMS.  Alternatively, you could write
all references to the functions and variables in such libraries using
lower case; this will work on VMS, but is not portable to other systems.

   Function and variable names are handled somewhat differently with GNU
C++.  The GNU C++ compiler performs "name mangling" on function names,
which means that it adds information to the function name to describe
the data types of the arguments that the function takes. One result of
this is that the name of a function can become very long. Since the VMS
linker only recognizes the first 31 characters in a name, special
action is taken to ensure that each function and variable has a unique
name that can be represented in 31 characters.

   If the name (plus a name augmentation, if required) is less than 32
characters in length, then no special action is performed. If the name
is longer than 31 characters, the assembler (GAS) will generate a hash
string based upon the function name, truncate the function name to 23
characters, and append the hash string to the truncated name.  If the
`/VERBOSE' compiler option is used, the assembler will print both the
full and truncated names of each symbol that is truncated.

   The `/NOCASE_HACK' compiler option should not be used when you are
compiling programs that use libg++. libg++ has several instances of
objects (i.e.  `Filebuf' and `filebuf') which become indistinguishable
in a case-insensitive environment.  This leads to cases where you need
to inhibit augmentation selectively (if you were using libg++ and Xlib
in the same program, for example).  There is no special feature for
doing this, but you can get the result by defining a macro for each
mixed case symbol for which you wish to inhibit augmentation.  The
macro should expand into the lower case equivalent of itself.  For
example:

     #define StuDlyCapS studlycaps

   These macro definitions can be placed in a header file to minimize
the number of changes to your source code.


@EndNode

@Node "Portability" "gcc.guide/Portability"
@Next "Interface"
@Prev "VMS"
@Toc "Main"

GNU CC and Portability
**********************

   The main goal of GNU CC was to make a good, fast compiler for
machines in the class that the GNU system aims to run on: 32-bit
machines that address 8-bit bytes and have several general registers. 
Elegance, theoretical power and simplicity are only secondary.

   GNU CC gets most of the information about the target machine from a
machine description which gives an algebraic formula for each of the
machine's instructions.  This is a very clean way to describe the
target.  But when the compiler needs information that is difficult to
express in this fashion, I have not hesitated to define an ad-hoc
parameter to the machine description.  The purpose of portability is to
reduce the total work needed on the compiler; it was not of interest
for its own sake.

   GNU CC does not contain machine dependent code, but it does contain
code that depends on machine parameters such as endianness (whether the
most significant byte has the highest or lowest address of the bytes in
a word) and the availability of autoincrement addressing.  In the
RTL-generation pass, it is often necessary to have multiple strategies
for generating code for a particular kind of syntax tree, strategies
that are usable for different combinations of parameters.  Often I have
not tried to address all possible cases, but only the common ones or
only the ones that I have encountered. As a result, a new target may
require additional strategies.  You will know if this happens because
the compiler will call `abort'.  Fortunately, the new strategies can be
added in a machine-independent fashion, and will affect only the target
machines that need them.


@EndNode

@Node "Interface" "gcc.guide/Interface"
@Next "Passes"
@Prev "Portability"
@Toc "Main"

Interfacing to GNU CC Output
****************************

   GNU CC is normally configured to use the same function calling
convention normally in use on the target system.  This is done with the
machine-description macros described (see @{"Target Macros" Link "Target Macros"}).

   However, returning of structure and union values is done differently
on some target machines.  As a result, functions compiled with PCC
returning such types cannot be called from code compiled with GNU CC,
and vice versa.  This does not cause trouble often because few Unix
library routines return structures or unions.

   GNU CC code returns structures and unions that are 1, 2, 4 or 8 bytes
long in the same registers used for `int' or `double' return values. 
(GNU CC typically allocates variables of such types in registers also.)
 Structures and unions of other sizes are returned by storing them into
an address passed by the caller (usually in a register).  The
machine-description macros `STRUCT_VALUE' and `STRUCT_INCOMING_VALUE'
tell GNU CC where to pass this address.

   By contrast, PCC on most target machines returns structures and
unions of any size by copying the data into an area of static storage,
and then returning the address of that storage as if it were a pointer
value. The caller must copy the data from that memory area to the place
where the value is wanted.  This is slower than the method used by GNU
CC, and fails to be reentrant.

   On some target machines, such as RISC machines and the 80386, the
standard system convention is to pass to the subroutine the address of
where to return the value.  On these machines, GNU CC has been
configured to be compatible with the standard compiler, when this method
is used.  It may not be compatible for structures of 1, 2, 4 or 8 bytes.

   GNU CC uses the system's standard convention for passing arguments. 
On some machines, the first few arguments are passed in registers; in
others, all are passed on the stack.  It would be possible to use
registers for argument passing on any machine, and this would probably
result in a significant speedup.  But the result would be complete
incompatibility with code that follows the standard convention.  So this
change is practical only if you are switching to GNU CC as the sole C
compiler for the system.  We may implement register argument passing on
certain machines once we have a complete GNU system so that we can
compile the libraries with GNU CC.

   On some machines (particularly the Sparc), certain types of arguments
are passed "by invisible reference".  This means that the value is
stored in memory, and the address of the memory location is passed to
the subroutine.

   If you use `longjmp', beware of automatic variables.  ANSI C says
that automatic variables that are not declared `volatile' have undefined
values after a `longjmp'.  And this is all GNU CC promises to do,
because it is very difficult to restore register variables correctly,
and one of GNU CC's features is that it can put variables in registers
without your asking it to.

   If you want a variable to be unaltered by `longjmp', and you don't
want to write `volatile' because old C compilers don't accept it, just
take the address of the variable.  If a variable's address is ever
taken, even if just to compute it and ignore it, then the variable
cannot go in a register:

     {
       int careful;
       &careful;
       ...
     }

   Code compiled with GNU CC may call certain library routines.  Most of
them handle arithmetic for which there are no instructions.  This
includes multiply and divide on some machines, and floating point
operations on any machine for which floating point support is disabled
with `-msoft-float'.  Some standard parts of the C library, such as
`bcopy' or `memcpy', are also called automatically.  The usual function
call interface is used for calling the library routines.

   These library routines should be defined in the library `libgcc.a',
which GNU CC automatically searches whenever it links a program.  On
machines that have multiply and divide instructions, if hardware
floating point is in use, normally `libgcc.a' is not needed, but it is
searched just in case.

   Each arithmetic function is defined in `libgcc1.c' to use the
corresponding C arithmetic operator.  As long as the file is compiled
with another C compiler, which supports all the C arithmetic operators,
this file will work portably.  However, `libgcc1.c' does not work if
compiled with GNU CC, because each arithmetic function would compile
into a call to itself!


@EndNode

@Node "Passes" "gcc.guide/Passes"
@Next "RTL"
@Prev "Interface"
@Toc "Main"

Passes and Files of the Compiler
********************************

   The overall control structure of the compiler is in `toplev.c'.  This
file is responsible for initialization, decoding arguments, opening and
closing files, and sequencing the passes.

   The parsing pass is invoked only once, to parse the entire input. 
The RTL intermediate code for a function is generated as the function
is parsed, a statement at a time.  Each statement is read in as a
syntax tree and then converted to RTL; then the storage for the tree
for the statement is reclaimed.  Storage for types (and the expressions
for their sizes), declarations, and a representation of the binding
contours and how they nest, remain until the function is finished being
compiled; these are all needed to output the debugging information.

   Each time the parsing pass reads a complete function definition or
top-level declaration, it calls the function `rest_of_compilation' or
`rest_of_decl_compilation' in `toplev.c', which are responsible for all
further processing necessary, ending with output of the assembler
language.  All other compiler passes run, in sequence, within
`rest_of_compilation'. When that function returns from compiling a
function definition, the storage used for that function definition's
compilation is entirely freed, unless it is an inline function (see
@{"Inline" Link "Inline"}).

   Here is a list of all the passes of the compiler and their source
files. Also included is a description of where debugging dumps can be
requested with `-d' options.

   * Parsing.  This pass reads the entire text of a function definition,
     constructing partial syntax trees.  This and RTL generation are no
     longer truly separate passes (formerly they were), but it is
     easier to think of them as separate.

     The tree representation does not entirely follow C syntax, because
     it is intended to support other languages as well.

     Language-specific data type analysis is also done in this pass,
     and every tree node that represents an expression has a data type
     attached. Variables are represented as declaration nodes.

     Constant folding and some arithmetic simplifications are also done
     during this pass.

     The language-independent source files for parsing are
     `stor-layout.c', `fold-const.c', and `tree.c'. There are also
     header files `tree.h' and `tree.def' which define the format of
     the tree representation.

     The source files for parsing C are `c-parse.y', `c-decl.c',
     `c-typeck.c', `c-convert.c', `c-lang.c', and `c-aux-info.c' along
     with header files `c-lex.h', and `c-tree.h'.

     The source files for parsing C++ are `cp-parse.y', `cp-class.c',
     `cp-cvt.c',
     `cp-decl.c', `cp-decl.c', `cp-decl2.c', `cp-dem.c', `cp-except.c',
     `cp-expr.c', `cp-init.c', `cp-lex.c', `cp-method.c', `cp-ptree.c',
     `cp-search.c', `cp-tree.c', `cp-type2.c', and `cp-typeck.c', along
     with header files `cp-tree.def', `cp-tree.h', and `cp-decl.h'.

     The special source files for parsing Objective C are
     `objc-parse.y', `objc-actions.c', `objc-tree.def', and
     `objc-actions.h'.  Certain C-specific files are used for this as
     well.

     The file `c-common.c' is also used for all of the above languages.

   * RTL generation.  This is the conversion of syntax tree into RTL
     code. It is actually done statement-by-statement during parsing,
     but for most purposes it can be thought of as a separate pass.

     This is where the bulk of target-parameter-dependent code is found,
     since often it is necessary for strategies to apply only when
     certain standard kinds of instructions are available.  The purpose
     of named instruction patterns is to provide this information to
     the RTL generation pass.

     Optimization is done in this pass for `if'-conditions that are
     comparisons, boolean operations or conditional expressions.  Tail
     recursion is detected at this time also.  Decisions are made about
     how best to arrange loops and how to output `switch' statements.

     The source files for RTL generation include `stmt.c',
     `function.c', `expr.c', `calls.c', `explow.c', `expmed.c',
     `optabs.c' and `emit-rtl.c'.  Also, the file `insn-emit.c',
     generated from the machine description by the program `genemit',
     is used in this pass.  The header file `expr.h' is used for
     communication within this pass.

     The header files `insn-flags.h' and `insn-codes.h', generated from
     the machine description by the programs `genflags' and `gencodes',
     tell this pass which standard names are available for use and
     which patterns correspond to them.

     Aside from debugging information output, none of the following
     passes refers to the tree structure representation of the function
     (only part of which is saved).

     The decision of whether the function can and should be expanded
     inline in its subsequent callers is made at the end of rtl
     generation.  The function must meet certain criteria, currently
     related to the size of the function and the types and number of
     parameters it has.  Note that this function may contain loops,
     recursive calls to itself (tail-recursive functions can be
     inlined!), gotos, in short, all constructs supported by GNU CC. 
     The file `integrate.c' contains the code to save a function's rtl
     for later inlining and to inline that rtl when the function is
     called.  The header file `integrate.h' is also used for this
     purpose.

     The option `-dr' causes a debugging dump of the RTL code after
     this pass.  This dump file's name is made by appending `.rtl' to
     the input file name.

   * Jump optimization.  This pass simplifies jumps to the following
     instruction, jumps across jumps, and jumps to jumps.  It deletes
     unreferenced labels and unreachable code, except that unreachable
     code that contains a loop is not recognized as unreachable in this
     pass. (Such loops are deleted later in the basic block analysis.) 
     It also converts some code originally written with jumps into
     sequences of instructions that directly set values from the
     results of comparisons, if the machine has such instructions.

     Jump optimization is performed two or three times.  The first time
     is immediately following RTL generation.  The second time is after
     CSE, but only if CSE says repeated jump optimization is needed. 
     The last time is right before the final pass.  That time,
     cross-jumping and deletion of no-op move instructions are done
     together with the optimizations described above.

     The source file of this pass is `jump.c'.

     The option `-dj' causes a debugging dump of the RTL code after
     this pass is run for the first time.  This dump file's name is
     made by appending `.jump' to the input file name.

   * Register scan.  This pass finds the first and last use of each
     register, as a guide for common subexpression elimination.  Its
     source is in `regclass.c'.

   * Jump threading.  This pass detects a condition jump that branches
     to an identical or inverse test.  Such jumps can be `threaded'
     through the second conditional test.  The source code for this
     pass is in `jump.c'.  This optimization is only performed if
     `-fthread-jumps' is enabled.

   * Common subexpression elimination.  This pass also does constant
     propagation.  Its source file is `cse.c'.  If constant propagation
     causes conditional jumps to become unconditional or to become
     no-ops, jump optimization is run again when CSE is finished.

     The option `-ds' causes a debugging dump of the RTL code after
     this pass.  This dump file's name is made by appending `.cse' to
     the input file name.

   * Loop optimization.  This pass moves constant expressions out of
     loops, and optionally does strength-reduction and loop unrolling
     as well. Its source files are `loop.c' and `unroll.c', plus the
     header `loop.h' used for communication between them.  Loop
     unrolling uses some functions in `integrate.c' and the header
     `integrate.h'.

     The option `-dL' causes a debugging dump of the RTL code after
     this pass.  This dump file's name is made by appending `.loop' to
     the input file name.

   * If `-frerun-cse-after-loop' was enabled, a second common
     subexpression elimination pass is performed after the loop
     optimization pass.  Jump threading is also done again at this time
     if it was specified.

     The option `-dt' causes a debugging dump of the RTL code after
     this pass.  This dump file's name is made by appending `.cse2' to
     the input file name.

   * Stupid register allocation is performed at this point in a
     nonoptimizing compilation.  It does a little data flow analysis as
     well.  When stupid register allocation is in use, the next pass
     executed is the reloading pass; the others in between are skipped.
     The source file is `stupid.c'.

   * Data flow analysis (`flow.c').  This pass divides the program into
     basic blocks (and in the process deletes unreachable loops); then
     it computes which pseudo-registers are live at each point in the
     program, and makes the first instruction that uses a value point at
     the instruction that computed the value.

     This pass also deletes computations whose results are never used,
     and combines memory references with add or subtract instructions
     to make autoincrement or autodecrement addressing.

     The option `-df' causes a debugging dump of the RTL code after
     this pass.  This dump file's name is made by appending `.flow' to
     the input file name.  If stupid register allocation is in use, this
     dump file reflects the full results of such allocation.

   * Instruction combination (`combine.c').  This pass attempts to
     combine groups of two or three instructions that are related by
     data flow into single instructions.  It combines the RTL
     expressions for the instructions by substitution, simplifies the
     result using algebra, and then attempts to match the result
     against the machine description.

     The option `-dc' causes a debugging dump of the RTL code after
     this pass.  This dump file's name is made by appending `.combine'
     to the input file name.

   * Instruction scheduling (`sched.c').  This pass looks for
     instructions whose output will not be available by the time that
     it is used in subsequent instructions.  (Memory loads and floating
     point instructions often have this behavior on RISC machines).  It
     re-orders instructions within a basic block to try to separate the
     definition and use of items that otherwise would cause pipeline
     stalls.

     Instruction scheduling is performed twice.  The first time is
     immediately after instruction combination and the second is
     immediately after reload.

     The option `-dS' causes a debugging dump of the RTL code after this
     pass is run for the first time.  The dump file's name is made by
     appending `.sched' to the input file name.

   * Register class preferencing.  The RTL code is scanned to find out
     which register class is best for each pseudo register.  The source
     file is `regclass.c'.

   * Local register allocation (`local-alloc.c').  This pass allocates
     hard registers to pseudo registers that are used only within one
     basic block.  Because the basic block is linear, it can use fast
     and powerful techniques to do a very good job.

     The option `-dl' causes a debugging dump of the RTL code after
     this pass.  This dump file's name is made by appending `.lreg' to
     the input file name.

   * Global register allocation (`global-alloc.c').  This pass
     allocates hard registers for the remaining pseudo registers (those
     whose life spans are not contained in one basic block).

   * Reloading.  This pass renumbers pseudo registers with the hardware
     registers numbers they were allocated.  Pseudo registers that did
     not get hard registers are replaced with stack slots.  Then it
     finds instructions that are invalid because a value has failed to
     end up in a register, or has ended up in a register of the wrong
     kind.  It fixes up these instructions by reloading the
     problematical values temporarily into registers.  Additional
     instructions are generated to do the copying.

     The reload pass also optionally eliminates the frame pointer and
     inserts instructions to save and restore call-clobbered registers
     around calls.

     Source files are `reload.c' and `reload1.c', plus the header
     `reload.h' used for communication between them.

     The option `-dg' causes a debugging dump of the RTL code after
     this pass.  This dump file's name is made by appending `.greg' to
     the input file name.

   * Instruction scheduling is repeated here to try to avoid pipeline
     stalls due to memory loads generated for spilled pseudo registers.

     The option `-dR' causes a debugging dump of the RTL code after
     this pass.  This dump file's name is made by appending `.sched2'
     to the input file name.

   * Jump optimization is repeated, this time including cross-jumping
     and deletion of no-op move instructions.

     The option `-dJ' causes a debugging dump of the RTL code after
     this pass.  This dump file's name is made by appending `.jump2' to
     the input file name.

   * Delayed branch scheduling.  This optional pass attempts to find
     instructions that can go into the delay slots of other
     instructions, usually jumps and calls.  The source file name is
     `reorg.c'.

     The option `-dd' causes a debugging dump of the RTL code after
     this pass.  This dump file's name is made by appending `.dbr' to
     the input file name.

   * Conversion from usage of some hard registers to usage of a register
     stack may be done at this point.  Currently, this is supported only
     for the floating-point registers of the Intel 80387 coprocessor.  
     The source file name is `reg-stack.c'.

     The options `-dk' causes a debugging dump of the RTL code after
     this pass.  This dump file's name is made by appending `.stack' to
     the input file name.

   * Final.  This pass outputs the assembler code for the function.  It
     is also responsible for identifying spurious test and compare
     instructions.  Machine-specific peephole optimizations are
     performed at the same time.  The function entry and exit sequences
     are generated directly as assembler code in this pass; they never
     exist as RTL.

     The source files are `final.c' plus `insn-output.c'; the latter is
     generated automatically from the machine description by the tool
     `genoutput'.  The header file `conditions.h' is used for
     communication between these files.

   * Debugging information output.  This is run after final because it
     must output the stack slot offsets for pseudo registers that did
     not get hard registers.  Source files are `dbxout.c' for DBX
     symbol table format, `sdbout.c' for SDB symbol table format, and
     `dwarfout.c' for DWARF symbol table format.

   Some additional files are used by all or many passes:

   * Every pass uses `machmode.def' and `machmode.h' which define the
     machine modes.

   * Several passes use `real.h', which defines the default
     representation of floating point constants and how to operate on
     them.

   * All the passes that work with RTL use the header files `rtl.h' and
     `rtl.def', and subroutines in file `rtl.c'.  The tools `gen*' also
     use these files to read and work with the machine description RTL.

   * Several passes refer to the header file `insn-config.h' which
     contains a few parameters (C macro definitions) generated
     automatically from the machine description RTL by the tool
     `genconfig'.

   * Several passes use the instruction recognizer, which consists of
     `recog.c' and `recog.h', plus the files `insn-recog.c' and
     `insn-extract.c' that are generated automatically from the machine
     description by the tools `genrecog' and `genextract'.

   * Several passes use the header files `regs.h' which defines the
     information recorded about pseudo register usage, and
     `basic-block.h' which defines the information recorded about basic
     blocks.

   * `hard-reg-set.h' defines the type `HARD_REG_SET', a bit-vector
     with a bit for each hard register, and some macros to manipulate
     it. This type is just `int' if the machine has few enough hard
     registers; otherwise it is an array of `int' and some of the
     macros expand into loops.

   * Several passes use instruction attributes.  A definition of the
     attributes defined for a particular machine is in file
     `insn-attr.h', which is generated from the machine description by
     the program `genattr'.  The file `insn-attrtab.c' contains
     subroutines to obtain the attribute values for insns.  It is
     generated from the machine description by the program `genattrtab'.


@EndNode

@Node "RTL" "gcc.guide/RTL"
@Next "Machine Desc"
@Prev "Passes"
@Toc "Main"

RTL Representation
******************

   Most of the work of the compiler is done on an intermediate
representation called register transfer language.  In this language,
the instructions to be output are described, pretty much one by one, in
an algebraic form that describes what the instruction does.

   RTL is inspired by Lisp lists.  It has both an internal form, made
up of structures that point at other structures, and a textual form
that is used in the machine description and in printed debugging dumps.
 The textual form uses nested parentheses to indicate the pointers in
the internal form.


 @{" RTL Objects " Link "RTL Objects"}        Expressions vs vectors vs strings vs integers.
 @{" Accessors " Link "Accessors"}          Macros to access expression operands or vector elts.
 @{" Flags " Link "Flags"}              Other flags in an RTL expression.
 @{" Machine Modes " Link "Machine Modes"}      Describing the size and format of a datum.
 @{" Constants " Link "Constants"}          Expressions with constant values.
 @{" Regs and Memory " Link "Regs and Memory"}    Expressions representing register contents or memory.
 @{" Arithmetic " Link "Arithmetic"}         Expressions representing arithmetic on other expressions.
 @{" Comparisons " Link "Comparisons"}        Expressions representing comparison of expressions.
 @{" Bit Fields " Link "Bit Fields"}         Expressions representing bit-fields in memory or reg.
 @{" Conversions " Link "Conversions"}        Extending, truncating, floating or fixing.
 @{" RTL Declarations " Link "RTL Declarations"}   Declaring volatility, constancy, etc.
 @{" Side Effects " Link "Side Effects"}       Expressions for storing in registers, etc.
 @{" Incdec " Link "Incdec"}             Embedded side-effects for autoincrement addressing.
 @{" Assembler " Link "Assembler"}          Representing `asm' with operands.
 @{" Insns " Link "Insns"}              Expression types for entire insns.
 @{" Calls " Link "Calls"}              RTL representation of function call insns.
 @{" Sharing " Link "Sharing"}            Some expressions are unique; others *must* be copied.


@EndNode

@Node "RTL Objects" "gcc.guide/RTL Objects"
@Next "Accessors"
@Prev "RTL"
@Toc "RTL"

RTL Object Types
================

   RTL uses four kinds of objects: expressions, integers, strings and
vectors. Expressions are the most important ones.  An RTL expression
("RTX", for short) is a C structure, but it is usually referred to with
a pointer; a type that is given the typedef name `rtx'.

   An integer is simply an `int'; their written form uses decimal
digits.

   A string is a sequence of characters.  In core it is represented as a
`char *' in usual C fashion, and it is written in C syntax as well.
However, strings in RTL may never be null.  If you write an empty
string in a machine description, it is represented in core as a null
pointer rather than as a pointer to a null character.  In certain
contexts, these null pointers instead of strings are valid.  Within RTL
code, strings are most commonly found inside `symbol_ref' expressions,
but they appear in other contexts in the RTL expressions that make up
machine descriptions.

   A vector contains an arbitrary number of pointers to expressions. 
The number of elements in the vector is explicitly present in the
vector. The written form of a vector consists of square brackets
(`[...]') surrounding the elements, in sequence and with whitespace
separating them.  Vectors of length zero are not created; null pointers
are used instead.

   Expressions are classified by "expression codes" (also called RTX
codes).  The expression code is a name defined in `rtl.def', which is
also (in upper case) a C enumeration constant.  The possible expression
codes and their meanings are machine-independent.  The code of an RTX
can be extracted with the macro `GET_CODE (X)' and altered with
`PUT_CODE (X, NEWCODE)'.

   The expression code determines how many operands the expression
contains, and what kinds of objects they are.  In RTL, unlike Lisp, you
cannot tell by looking at an operand what kind of object it is. 
Instead, you must know from its context--from the expression code of
the containing expression. For example, in an expression of code
`subreg', the first operand is to be regarded as an expression and the
second operand as an integer.  In an expression of code `plus', there
are two operands, both of which are to be regarded as expressions.  In
a `symbol_ref' expression, there is one operand, which is to be
regarded as a string.

   Expressions are written as parentheses containing the name of the
expression type, its flags and machine mode if any, and then the
operands of the expression (separated by spaces).

   Expression code names in the `md' file are written in lower case,
but when they appear in C code they are written in upper case.  In this
manual, they are shown as follows: `const_int'.

   In a few contexts a null pointer is valid where an expression is
normally wanted.  The written form of this is `(nil)'.


@EndNode

@Node "Accessors" "gcc.guide/Accessors"
@Next "Flags"
@Prev "RTL Objects"
@Toc "RTL"

Access to Operands
==================

   For each expression type `rtl.def' specifies the number of contained
objects and their kinds, with four possibilities: `e' for expression
(actually a pointer to an expression), `i' for integer, `s' for string,
and `E' for vector of expressions.  The sequence of letters for an
expression code is called its "format".  Thus, the format of `subreg'
is `ei'.

   A few other format characters are used occasionally:

`u'
     `u' is equivalent to `e' except that it is printed differently in
     debugging dumps.  It is used for pointers to insns.

`n'
     `n' is equivalent to `i' except that it is printed differently in
     debugging dumps.  It is used for the line number or code number of
     a `note' insn.

`S'
     `S' indicates a string which is optional.  In the RTL objects in
     core, `S' is equivalent to `s', but when the object is read, from
     an `md' file, the string value of this operand may be omitted. An
     omitted string is taken to be the null string.

`V'
     `V' indicates a vector which is optional.  In the RTL objects in
     core, `V' is equivalent to `E', but when the object is read from
     an `md' file, the vector value of this operand may be omitted. An
     omitted vector is effectively the same as a vector of no elements.

`0'
     `0' means a slot whose contents do not fit any normal category.
     `0' slots are not printed at all in dumps, and are often used in
     special ways by small parts of the compiler.

   There are macros to get the number of operands, the format, and the
class of an expression code:

`GET_RTX_LENGTH (CODE)'
     Number of operands of an RTX of code CODE.

`GET_RTX_FORMAT (CODE)'
     The format of an RTX of code CODE, as a C string.

`GET_RTX_CLASS (CODE)'
     A single character representing the type of RTX operation that code
     CODE performs.

     The following classes are defined:

    `o'
          An RTX code that represents an actual object, such as `reg' or
          `mem'.  `subreg' is not in this class.

    `<'
          An RTX code for a comparison.  The codes in this class are
          `NE', `EQ', `LE', `LT', `GE', `GT', `LEU', `LTU', `GEU',
          `GTU'.

    `1'
          An RTX code for a unary arithmetic operation, such as `neg'.

    `c'
          An RTX code for a commutative binary operation, other than
          `NE' and `EQ' (which have class `<').

    `2'
          An RTX code for a noncommutative binary operation, such as
          `MINUS'.

    `b'
          An RTX code for a bitfield operation (`ZERO_EXTRACT' and
          `SIGN_EXTRACT').

    `3'
          An RTX code for other three input operations, such as
          `IF_THEN_ELSE'.

    `i'
          An RTX code for a machine insn (`INSN', `JUMP_INSN', and
          `CALL_INSN').

    `m'
          An RTX code for something that matches in insns, such as
          `MATCH_DUP'.

    `x'
          All other RTX codes.

   Operands of expressions are accessed using the macros `XEXP', `XINT'
and `XSTR'.  Each of these macros takes two arguments: an
expression-pointer (RTX) and an operand number (counting from zero).
Thus,

     XEXP (X, 2)

accesses operand 2 of expression X, as an expression.

     XINT (X, 2)

accesses the same operand as an integer.  `XSTR', used in the same
fashion, would access it as a string.

   Any operand can be accessed as an integer, as an expression or as a
string. You must choose the correct method of access for the kind of
value actually stored in the operand.  You would do this based on the
expression code of the containing expression.  That is also how you
would know how many operands there are.

   For example, if X is a `subreg' expression, you know that it has two
operands which can be correctly accessed as `XEXP (X, 0)' and `XINT (X,
1)'.  If you did `XINT (X, 0)', you would get the address of the
expression operand but cast as an integer; that might occasionally be
useful, but it would be cleaner to write `(int) XEXP (X, 0)'.  `XEXP
(X, 1)' would also compile without error, and would return the second,
integer operand cast as an expression pointer, which would probably
result in a crash when accessed.  Nothing stops you from writing `XEXP
(X, 28)' either, but this will access memory past the end of the
expression with unpredictable results.

   Access to operands which are vectors is more complicated.  You can
use the macro `XVEC' to get the vector-pointer itself, or the macros
`XVECEXP' and `XVECLEN' to access the elements and length of a vector.

`XVEC (EXP, IDX)'
     Access the vector-pointer which is operand number IDX in EXP.

`XVECLEN (EXP, IDX)'
     Access the length (number of elements) in the vector which is in
     operand number IDX in EXP.  This value is an `int'.

`XVECEXP (EXP, IDX, ELTNUM)'
     Access element number ELTNUM in the vector which is in operand
     number IDX in EXP.  This value is an RTX.

     It is up to you to make sure that ELTNUM is not negative and is
     less than `XVECLEN (EXP, IDX)'.

   All the macros defined in this section expand into lvalues and
therefore can be used to assign the operands, lengths and vector
elements as well as to access them.


@EndNode

@Node "Flags" "gcc.guide/Flags"
@Next "Machine Modes"
@Prev "Accessors"
@Toc "RTL"

Flags in an RTL Expression
==========================

   RTL expressions contain several flags (one-bit bit-fields) that are
used in certain types of expression.  Most often they are accessed with
the following macros:

`MEM_VOLATILE_P (X)'
     In `mem' expressions, nonzero for volatile memory references.
     Stored in the `volatil' field and printed as `/v'.

`MEM_IN_STRUCT_P (X)'
     In `mem' expressions, nonzero for reference to an entire
     structure, union or array, or to a component of one.  Zero for
     references to a scalar variable or through a pointer to a scalar.
     Stored in the `in_struct' field and printed as `/s'.

`REG_LOOP_TEST_P'
     In `reg' expressions, nonzero if this register's entire life is
     contained in the exit test code for some loop.  Stored in the
     `in_struct' field and printed as `/s'.

`REG_USERVAR_P (X)'
     In a `reg', nonzero if it corresponds to a variable present in the
     user's source code.  Zero for temporaries generated internally by
     the compiler.  Stored in the `volatil' field and printed as `/v'.

`REG_FUNCTION_VALUE_P (X)'
     Nonzero in a `reg' if it is the place in which this function's
     value is going to be returned.  (This happens only in a hard
     register.)  Stored in the `integrated' field and printed as `/i'.

     The same hard register may be used also for collecting the values
     of functions called by this one, but `REG_FUNCTION_VALUE_P' is zero
     in this kind of use.

`RTX_UNCHANGING_P (X)'
     Nonzero in a `reg' or `mem' if the value is not changed. (This
     flag is not set for memory references via pointers to constants.
     Such pointers only guarantee that the object will not be changed
     explicitly by the current function.  The object might be changed by
     other functions or by aliasing.)  Stored in the `unchanging' field
     and printed as `/u'.

`RTX_INTEGRATED_P (INSN)'
     Nonzero in an insn if it resulted from an in-line function call.
     Stored in the `integrated' field and printed as `/i'.  This may be
     deleted; nothing currently depends on it.

`SYMBOL_REF_USED (X)'
     In a `symbol_ref', indicates that X has been used.  This is
     normally only used to ensure that X is only declared external
     once.  Stored in the `used' field.

`SYMBOL_REF_FLAG (X)'
     In a `symbol_ref', this is used as a flag for machine-specific
     purposes. Stored in the `volatil' field and printed as `/v'.

`LABEL_OUTSIDE_LOOP_P'
     In `label_ref' expressions, nonzero if this is a reference to a
     label that is outside the innermost loop containing the reference
     to the label.  Stored in the `in_struct' field and printed as `/s'.

`INSN_DELETED_P (INSN)'
     In an insn, nonzero if the insn has been deleted.  Stored in the
     `volatil' field and printed as `/v'.

`INSN_ANNULLED_BRANCH_P (INSN)'
     In an `insn' in the delay slot of a branch insn, indicates that an
     annulling branch should be used.  See the discussion under
     `sequence' below.  Stored in the `unchanging' field and printed as
     `/u'.

`INSN_FROM_TARGET_P (INSN)'
     In an `insn' in a delay slot of a branch, indicates that the insn
     is from the target of the branch.  If the branch insn has
     `INSN_ANNULLED_BRANCH_P' set, this insn should only be executed if
     the branch is taken.  For annulled branches with this bit clear,
     the insn should be executed only if the branch is not taken. 
     Stored in the `in_struct' field and printed as `/s'.

`CONSTANT_POOL_ADDRESS_P (X)'
     Nonzero in a `symbol_ref' if it refers to part of the current
     function's "constants pool".  These are addresses close to the
     beginning of the function, and GNU CC assumes they can be addressed
     directly (perhaps with the help of base registers).  Stored in the
     `unchanging' field and printed as `/u'.

`CONST_CALL_P (X)'
     In a `call_insn', indicates that the insn represents a call to a
     const function.  Stored in the `unchanging' field and printed as
     `/u'.

`LABEL_PRESERVE_P (X)'
     In a `code_label', indicates that the label can never be deleted.
     Labels referenced by a a non-local goto will have this bit set. 
     Stored in the `in_struct' field and printed as `/s'.

`SCHED_GROUP_P (INSN)'
     During instruction scheduling, in an insn, indicates that the
     previous insn must be scheduled together with this insn.  This is
     used to ensure that certain groups of instructions will not be
     split up by the instruction scheduling pass, for example, `use'
     insns before a `call_insn' may not be separated from the
     `call_insn'.  Stored in the `in_struct' field and printed as `/s'.

   These are the fields which the above macros refer to:

`used'
     Normally, this flag is used only momentarily, at the end of RTL
     generation for a function, to count the number of times an
     expression appears in insns.  Expressions that appear more than
     once are copied, according to the rules for shared structure (see
     @{"Sharing" Link "Sharing"}).

     In a `symbol_ref', it indicates that an external declaration for
     the symbol has already been written.

     In a `reg', it is used by the leaf register renumbering code to
     ensure that each register is only renumbered once.

`volatil'
     This flag is used in `mem',`symbol_ref' and `reg' expressions and
     in insns.  In RTL dump files, it is printed as `/v'.

     In a `mem' expression, it is 1 if the memory reference is volatile.
     Volatile memory references may not be deleted, reordered or
     combined.

     In a `symbol_ref' expression, it is used for machine-specific
     purposes.

     In a `reg' expression, it is 1 if the value is a user-level
     variable. 0 indicates an internal compiler temporary.

     In an insn, 1 means the insn has been deleted.

`in_struct'
     In `mem' expressions, it is 1 if the memory datum referred to is
     all or part of a structure or array; 0 if it is (or might be) a
     scalar variable.  A reference through a C pointer has 0 because
     the pointer might point to a scalar variable.  This information
     allows the compiler to determine something about possible cases of
     aliasing.

     In an insn in the delay slot of a branch, 1 means that this insn
     is from the target of the branch.

     During instruction scheduling, in an insn, 1 means that this insn
     must be scheduled as part of a group together with the previous
     insn.

     In `reg' expressions, it is 1 if the register has its entire life
     contained within the test expression of some loopl.

     In `label_ref' expressions, 1 means that the referenced label is
     outside the innermost loop containing the insn in which the
     `label_ref' was found.

     In `code_label' expressions, it is 1 if the label may never be
     deleted. This is used for labels which are the target of non-local
     gotos.

     In an RTL dump, this flag is represented as `/s'.

`unchanging'
     In `reg' and `mem' expressions, 1 means that the value of the
     expression never changes.

     In an insn, 1 means that this is an annulling branch.

     In a `symbol_ref' expression, 1 means that this symbol addresses
     something in the per-function constants pool.

     In a `call_insn', 1 means that this instruction is a call to a
     const function.

     In an RTL dump, this flag is represented as `/u'.

`integrated'
     In some kinds of expressions, including insns, this flag means the
     rtl was produced by procedure integration.

     In a `reg' expression, this flag indicates the register containing
     the value to be returned by the current function.  On machines
     that pass parameters in registers, the same register number may be
     used for parameters as well, but this flag is not set on such uses.


@EndNode

@Node "Machine Modes" "gcc.guide/Machine Modes"
@Next "Constants"
@Prev "Flags"
@Toc "RTL"

Machine Modes
=============

   A machine mode describes a size of data object and the
representation used for it.  In the C code, machine modes are
represented by an enumeration type, `enum machine_mode', defined in
`machmode.def'.  Each RTL expression has room for a machine mode and so
do certain kinds of tree expressions (declarations and types, to be
precise).

   In debugging dumps and machine descriptions, the machine mode of an
RTL expression is written after the expression code with a colon to
separate them.  The letters `mode' which appear at the end of each
machine mode name are omitted.  For example, `(reg:SI 38)' is a `reg'
expression with machine mode `SImode'.  If the mode is `VOIDmode', it
is not written at all.

   Here is a table of machine modes.  The term "byte" below refers to an
object of `BITS_PER_UNIT' bits (see @{"Storage Layout" Link "Storage Layout"}).

`QImode'
     "Quarter-Integer" mode represents a single byte treated as an
     integer.

`HImode'
     "Half-Integer" mode represents a two-byte integer.

`PSImode'
     "Partial Single Integer" mode represents an integer which occupies
     four bytes but which doesn't really use all four.  On some
     machines, this is the right mode to use for pointers.

`SImode'
     "Single Integer" mode represents a four-byte integer.

`PDImode'
     "Partial Double Integer" mode represents an integer which occupies
     eight bytes but which doesn't really use all eight.  On some
     machines, this is the right mode to use for certain pointers.

`DImode'
     "Double Integer" mode represents an eight-byte integer.

`TImode'
     "Tetra Integer" (?) mode represents a sixteen-byte integer.

`SFmode'
     "Single Floating" mode represents a single-precision (four byte)
     floating point number.

`DFmode'
     "Double Floating" mode represents a double-precision (eight byte)
     floating point number.

`XFmode'
     "Extended Floating" mode represents a triple-precision (twelve
     byte) floating point number.  This mode is used for IEEE extended
     floating point.

`TFmode'
     "Tetra Floating" mode represents a quadruple-precision (sixteen
     byte) floating point number.

`CCmode'
     "Condition Code" mode represents the value of a condition code,
     which is a machine-specific set of bits used to represent the
     result of a comparison operation.  Other machine-specific modes
     may also be used for the condition code.  These modes are not used
     on machines that use `cc0' (see see @{"Condition Code" Link "Condition Code"}).

`BLKmode'
     "Block" mode represents values that are aggregates to which none of
     the other modes apply.  In RTL, only memory references can have
     this mode, and only if they appear in string-move or vector
     instructions.  On machines which have no such instructions,
     `BLKmode' will not appear in RTL.

`VOIDmode'
     Void mode means the absence of a mode or an unspecified mode. For
     example, RTL expressions of code `const_int' have mode `VOIDmode'
     because they can be taken to have whatever mode the context
     requires.  In debugging dumps of RTL, `VOIDmode' is expressed by
     the absence of any mode.

`SCmode, DCmode, XCmode, TCmode'
     These modes stand for a complex number represented as a pair of
     floating point values.  The values are in `SFmode', `DFmode',
     `XFmode', and `TFmode', respectively.  Since C does not support
     complex numbers, these machine modes are only partially
     implemented.

   The machine description defines `Pmode' as a C macro which expands
into the machine mode used for addresses.  Normally this is the mode
whose size is `BITS_PER_WORD', `SImode' on 32-bit machines.

   The only modes which a machine description must support are
`QImode', and the modes corresponding to `BITS_PER_WORD',
`FLOAT_TYPE_SIZE' and `DOUBLE_TYPE_SIZE'. The compiler will attempt to
use `DImode' for 8-byte structures and unions, but this can be
prevented by overriding the definition of `MAX_FIXED_MODE_SIZE'. 
Alternatively, you can have the compiler use `TImode' for 16-byte
structures and unions.  Likewise, you can arrange for the C type `short
int' to avoid using `HImode'.

   Very few explicit references to machine modes remain in the compiler
and these few references will soon be removed.  Instead, the machine
modes are divided into mode classes.  These are represented by the
enumeration type `enum mode_class' defined in `machmode.h'.  The
possible mode classes are:

`MODE_INT'
     Integer modes.  By default these are `QImode', `HImode', `SImode',
     `DImode', and `TImode'.

`MODE_PARTIAL_INT'
     The "partial integer" modes, `PSImode' and `PDImode'.

`MODE_FLOAT'
     floating point modes.  By default these are `SFmode', `DFmode',
     `XFmode' and `TFmode'.

`MODE_COMPLEX_INT'
     Complex integer modes.  (These are not currently implemented).

`MODE_COMPLEX_FLOAT'
     Complex floating point modes.  By default these are `SCmode',
     `DCmode', `XCmode', and `TCmode'.

`MODE_FUNCTION'
     Algol or Pascal function variables including a static chain.
     (These are not currently implemented).

`MODE_CC'
     Modes representing condition code values.  These are `CCmode' plus
     any modes listed in the `EXTRA_CC_MODES' macro.  See @{"Jump Patterns" Link "Jump Patterns"},
     also see @{"Condition Code" Link "Condition Code"}.

`MODE_RANDOM'
     This is a catchall mode class for modes which don't fit into the
     above classes.  Currently `VOIDmode' and `BLKmode' are in
     `MODE_RANDOM'.

   Here are some C macros that relate to machine modes:

`GET_MODE (X)'
     Returns the machine mode of the RTX X.

`PUT_MODE (X, NEWMODE)'
     Alters the machine mode of the RTX X to be NEWMODE.

`NUM_MACHINE_MODES'
     Stands for the number of machine modes available on the target
     machine.  This is one greater than the largest numeric value of any
     machine mode.

`GET_MODE_NAME (M)'
     Returns the name of mode M as a string.

`GET_MODE_CLASS (M)'
     Returns the mode class of mode M.

`GET_MODE_WIDER_MODE (M)'
     Returns the next wider natural mode.  E.g.,
     `GET_WIDER_MODE(QImode)' returns `HImode'.

`GET_MODE_SIZE (M)'
     Returns the size in bytes of a datum of mode M.

`GET_MODE_BITSIZE (M)'
     Returns the size in bits of a datum of mode M.

`GET_MODE_MASK (M)'
     Returns a bitmask containing 1 for all bits in a word that fit
     within mode M.  This macro can only be used for modes whose
     bitsize is less than or equal to `HOST_BITS_PER_INT'.

`GET_MODE_ALIGNMENT (M))'
     Return the required alignment, in bits, for an object of mode M.

`GET_MODE_UNIT_SIZE (M)'
     Returns the size in bytes of the subunits of a datum of mode M.
     This is the same as `GET_MODE_SIZE' except in the case of complex
     modes.  For them, the unit size is the size of the real or
     imaginary part.

`GET_MODE_NUNITS (M)'
     Returns the number of units contained in a mode, i.e.,
     `GET_MODE_SIZE' divided by `GET_MODE_UNIT_SIZE'.

`GET_CLASS_NARROWEST_MODE (C)'
     Returns the narrowest mode in mode class C.

   The global variables `byte_mode' and `word_mode' contain modes whose
classes are `MODE_INT' and whose bitsizes are `BITS_PER_UNIT' or
`BITS_PER_WORD', respectively.  On 32-bit machines, these are `QImode'
and `SImode', respectively.


@EndNode

@Node "Constants" "gcc.guide/Constants"
@Next "Regs and Memory"
@Prev "Machine Modes"
@Toc "RTL"

Constant Expression Types
=========================

   The simplest RTL expressions are those that represent constant
values.

`(const_int I)'
     This type of expression represents the integer value I.  I is
     customarily accessed with the macro `INTVAL' as in `INTVAL (EXP)',
     which is equivalent to `XINT (EXP, 0)'.

     Keep in mind that the result of `INTVAL' is an integer on the host
     machine.  If the host machine has more bits in an `int' than the
     target machine has in the mode in which the constant will be used,
     then some of the bits you get from `INTVAL' will be superfluous. 
     In many cases, for proper results, you must carefully disregard
     the values of those bits.

     There is only one expression object for the integer value zero; it
     is the value of the variable `const0_rtx'.  Likewise, the only
     expression for integer value one is found in `const1_rtx', the only
     expression for integer value two is found in `const2_rtx', and the
     only expression for integer value negative one is found in
     `constm1_rtx'.  Any attempt to create an expression of code
     `const_int' and value zero, one, two or negative one will return
     `const0_rtx', `const1_rtx', `const2_rtx' or `constm1_rtx' as
     appropriate.

     Similarly, there is only one object for the integer whose value is
     `STORE_FLAG_VALUE'.  It is found in `const_true_rtx'.  If
     `STORE_FLAG_VALUE' is one, `const_true_rtx' and `const1_rtx' will
     point to the same object.  If `STORE_FLAG_VALUE' is -1,
     `const_true_rtx' and `constm1_rtx' will point to the same object.

`(const_double:M ADDR I0 I1 ...)'
     Represents either a floating-point constant of mode M or an
     integer constant that is too large to fit into `HOST_BITS_PER_INT'
     bits but small enough to fit within twice that number of bits (GNU
     CC does not provide a mechanism to represent even larger
     constants).  In the latter case, M will be `VOIDmode'.

     ADDR is used to contain the `mem' expression that corresponds to
     the location in memory that at which the constant can be found.  If
     it has not been allocated a memory location, but is on the chain
     of all `const_double' expressions in this compilation (maintained
     using an undisplayed field), ADDR contains `const0_rtx'.  If it is
     not on the chain, ADDR contains `cc0_rtx'.  ADDR is customarily
     accessed with the macro `CONST_DOUBLE_MEM' and the chain field via
     `CONST_DOUBLE_CHAIN'.

     If M is `VOIDmode', the bits of the value are stored in I0 and I1.
      I0 is customarily accessed with the macro `CONST_DOUBLE_LOW' and
     I1 with `CONST_DOUBLE_HIGH'.

     If the constant is floating point (either single or double
     precision), then the number of integers used to store the value
     depends on the size of `REAL_VALUE_TYPE' (see @{"Cross-compilation" Link "Cross-compilation"}). 
     The integers represent a `double'.  To convert them to a `double',
     do

          union real_extract u;
          bcopy (&CONST_DOUBLE_LOW (x), &u, sizeof u);

     and then refer to `u.d'.

     The macro `CONST0_RTX (MODE)' refers to an expression with value 0
     in mode MODE. If mode MODE is of mode class `MODE_INT', it returns
     `const0_rtx'.  Otherwise, it returns a `CONST_DOUBLE' expression
     in mode MODE.  Similarly, the macro `CONST1_RTX (MODE)' refers to
     an expression with value 1 in mode MODE and similarly for
     `CONST2_RTX'.

`(const_string STR)'
     Represents a constant string with value STR.  Currently this is
     used only for insn attributes (see @{"Insn Attributes" Link "Insn Attributes"}) since constant
     strings in C are placed in memory.

`(symbol_ref:MODE SYMBOL)'
     Represents the value of an assembler label for data.  SYMBOL is a
     string that describes the name of the assembler label.  If it
     starts with a `*', the label is the rest of SYMBOL not including
     the `*'.  Otherwise, the label is SYMBOL, usually prefixed with
     `_'.

     The `symbol_ref' contains a mode, which is usually `Pmode'.
     Usually that is the only mode for which a symbol is directly valid.

`(label_ref LABEL)'
     Represents the value of an assembler label for code.  It contains
     one operand, an expression, which must be a `code_label' that
     appears in the instruction sequence to identify the place where
     the label should go.

     The reason for using a distinct expression type for code label
     references is so that jump optimization can distinguish them.

`(const:M EXP)'
     Represents a constant that is the result of an assembly-time
     arithmetic computation.  The operand, EXP, is an expression that
     contains only constants (`const_int', `symbol_ref' and `label_ref'
     expressions) combined with `plus' and `minus'.  However, not all
     combinations are valid, since the assembler cannot do arbitrary
     arithmetic on relocatable symbols.

     M should be `Pmode'.

`(high:M EXP)'
     Represents the high-order bits of EXP, usually a `symbol_ref'. 
     The number of bits is machine-dependent and is normally the number
     of bits specified in an instruction that initializes the high
     order bits of a register.  It is used with `lo_sum' to represent
     the typical two-instruction sequence used in RISC machines to
     reference a global memory location.

     M should be `Pmode'.


@EndNode

@Node "Regs and Memory" "gcc.guide/Regs and Memory"
@Next "Arithmetic"
@Prev "Constants"
@Toc "RTL"

Registers and Memory
====================

   Here are the RTL expression types for describing access to machine
registers and to main memory.

`(reg:M N)'
     For small values of the integer N (less than
     `FIRST_PSEUDO_REGISTER'), this stands for a reference to machine
     register number N: a "hard register".  For larger values of N, it
     stands for a temporary value or "pseudo register". The compiler's
     strategy is to generate code assuming an unlimited number of such
     pseudo registers, and later convert them into hard registers or
     into memory references.

     M is the machine mode of the reference.  It is necessary because
     machines can generally refer to each register in more than one
     mode. For example, a register may contain a full word but there
     may be instructions to refer to it as a half word or as a single
     byte, as well as instructions to refer to it as a floating point
     number of various precisions.

     Even for a register that the machine can access in only one mode,
     the mode must always be specified.

     The symbol `FIRST_PSEUDO_REGISTER' is defined by the machine
     description, since the number of hard registers on the machine is
     an invariant characteristic of the machine.  Note, however, that
     not all of the machine registers must be general registers.  All
     the machine registers that can be used for storage of data are
     given hard register numbers, even those that can be used only in
     certain instructions or can hold only certain types of data.

     A hard register may be accessed in various modes throughout one
     function, but each pseudo register is given a natural mode and is
     accessed only in that mode.  When it is necessary to describe an
     access to a pseudo register using a nonnatural mode, a `subreg'
     expression is used.

     A `reg' expression with a machine mode that specifies more than
     one word of data may actually stand for several consecutive
     registers. If in addition the register number specifies a hardware
     register, then it actually represents several consecutive hardware
     registers starting with the specified one.

     Each pseudo register number used in a function's RTL code is
     represented by a unique `reg' expression.

     Some pseudo register numbers, those within the range of
     `FIRST_VIRTUAL_REGISTER' to `LAST_VIRTUAL_REGISTER' only appear
     during the RTL generation phase and are eliminated before the
     optimization phases.  These represent locations in the stack frame
     that cannot be determined until RTL generation for the function
     has been completed.  The following virtual register numbers are
     defined:

    `VIRTUAL_INCOMING_ARGS_REGNUM'
          This points to the first word of the incoming arguments
          passed on the stack.  Normally these arguments are placed
          there by the caller, but the callee may have pushed some
          arguments that were previously passed in registers.

          When RTL generation is complete, this virtual register is
          replaced by the sum of the register given by
          `ARG_POINTER_REGNUM' and the value of `FIRST_PARM_OFFSET'.

    `VIRTUAL_STACK_VARS_REGNUM'
          If `FRAME_GROWS_DOWNWARDS' is defined, this points to
          immediately above the first variable on the stack. 
          Otherwise, it points to the first variable on the stack.

          It is replaced with the sum of the register given by
          `FRAME_POINTER_REGNUM' and the value `STARTING_FRAME_OFFSET'.

    `VIRTUAL_STACK_DYNAMIC_REGNUM'
          This points to the location of dynamically allocated memory
          on the stack immediately after the stack pointer has been
          adjusted by the amount of memory desired.

          It is replaced by the sum of the register given by
          `STACK_POINTER_REGNUM' and the value `STACK_DYNAMIC_OFFSET'.

    `VIRTUAL_OUTGOING_ARGS_REGNUM'
          This points to the location in the stack at which outgoing
          arguments should be written when the stack is pre-pushed
          (arguments pushed using push insns should always use
          `STACK_POINTER_REGNUM').

          It is replaced by the sum of the register given by
          `STACK_POINTER_REGNUM' and the value `STACK_POINTER_OFFSET'.

`(subreg:M REG WORDNUM)'
     `subreg' expressions are used to refer to a register in a machine
     mode other than its natural one, or to refer to one register of a
     multi-word `reg' that actually refers to several registers.

     Each pseudo-register has a natural mode.  If it is necessary to
     operate on it in a different mode--for example, to perform a
     fullword move instruction on a pseudo-register that contains a
     single byte--the pseudo-register must be enclosed in a `subreg'. 
     In such a case, WORDNUM is zero.

     Usually M is at least as narrow as the mode of REG, in which case
     it is restricting consideration to only the bits of REG that are
     in M.  However, sometimes M is wider than the mode of REG.  These
     `subreg' expressions are often called "paradoxical".  They are
     used in cases where we want to refer to an object in a wider mode
     but do not care what value the additional bits have.  The reload
     pass ensures that paradoxical references are only made to hard
     registers.

     The other use of `subreg' is to extract the individual registers of
     a multi-register value.  Machine modes such as `DImode' and
     `TImode' can indicate values longer than a word, values which
     usually require two or more consecutive registers.  To access one
     of the registers, use a `subreg' with mode `SImode' and a WORDNUM
     that says which register.

     The compilation parameter `WORDS_BIG_ENDIAN', if set to 1, says
     that word number zero is the most significant part; otherwise, it
     is the least significant part.

     Between the combiner pass and the reload pass, it is possible to
     have a paradoxical `subreg' which contains a `mem' instead of a
     `reg' as its first operand.  After the reload pass, it is also
     possible to have a non-paradoxical `subreg' which contains a
     `mem'; this usually occurs when the `mem' is a stack slot which
     replaced a pseudo register.

     Note that it is not valid to access a `DFmode' value in `SFmode'
     using a `subreg'.  On some machines the most significant part of a
     `DFmode' value does not have the same format as a single-precision
     floating value.

     It is also not valid to access a single word of a multi-word value
     in a hard register when less registers can hold the value than
     would be expected from its size.  For example, some 32-bit
     machines have floating-point registers that can hold an entire
     `DFmode' value. If register 10 were such a register `(subreg:SI
     (reg:DF 10) 1)' would be invalid because there is no way to
     convert that reference to a single machine register.  The reload
     pass prevents `subreg' expressions such as these from being formed.

     The first operand of a `subreg' expression is customarily accessed
     with the `SUBREG_REG' macro and the second operand is customarily
     accessed with the `SUBREG_WORD' macro.

`(scratch:M)'
     This represents a scratch register that will be required for the
     execution of a single instruction and not used subsequently.  It is
     converted into a `reg' by either the local register allocator or
     the reload pass.

     `scratch' is usually present inside a `clobber' operation (see
     @{"Side Effects" Link "Side Effects"}).

`(cc0)'
     This refers to the machine's condition code register.  It has no
     operands and may not have a machine mode.  There are two ways to
     use it:

        * To stand for a complete set of condition code flags.  This is
          best on most machines, where each comparison sets the entire
          series of flags.

          With this technique, `(cc0)' may be validly used in only two
          contexts: as the destination of an assignment (in test and
          compare instructions) and in comparison operators comparing
          against zero (`const_int' with value zero; that is to say,
          `const0_rtx').

        * To stand for a single flag that is the result of a single
          condition. This is useful on machines that have only a single
          flag bit, and in which comparison instructions must specify
          the condition to test.

          With this technique, `(cc0)' may be validly used in only two
          contexts: as the destination of an assignment (in test and
          compare instructions) where the source is a comparison
          operator, and as the first operand of `if_then_else' (in a
          conditional branch).

     There is only one expression object of code `cc0'; it is the value
     of the variable `cc0_rtx'.  Any attempt to create an expression of
     code `cc0' will return `cc0_rtx'.

     Instructions can set the condition code implicitly.  On many
     machines, nearly all instructions set the condition code based on
     the value that they compute or store.  It is not necessary to
     record these actions explicitly in the RTL because the machine
     description includes a prescription for recognizing the
     instructions that do so (by means of the macro
     `NOTICE_UPDATE_CC').  See @{"Condition Code" Link "Condition Code"}.  Only instructions whose
     sole purpose is to set the condition code, and instructions that
     use the condition code, need mention `(cc0)'.

     On some machines, the condition code register is given a register
     number and a `reg' is used instead of `(cc0)'.  This is usually the
     preferable approach if only a small subset of instructions modify
     the condition code.  Other machines store condition codes in
     general registers; in such cases a pseudo register should be used.

     Some machines, such as the Sparc and RS/6000, have two sets of
     arithmetic instructions, one that sets and one that does not set
     the condition code.  This is best handled by normally generating
     the instruction that does not set the condition code, and making a
     pattern that both performs the arithmetic and sets the condition
     code register (which would not be `(cc0)' in this case).  For
     examples, search for `addcc' and `andcc' in `sparc.md'.

`(pc)'
     This represents the machine's program counter.  It has no operands
     and may not have a machine mode.  `(pc)' may be validly used only
     in certain specific contexts in jump instructions.

     There is only one expression object of code `pc'; it is the value
     of the variable `pc_rtx'.  Any attempt to create an expression of
     code `pc' will return `pc_rtx'.

     All instructions that do not jump alter the program counter
     implicitly by incrementing it, but there is no need to mention
     this in the RTL.

`(mem:M ADDR)'
     This RTX represents a reference to main memory at an address
     represented by the expression ADDR.  M specifies how large a unit
     of memory is accessed.


@EndNode

@Node "Arithmetic" "gcc.guide/Arithmetic"
@Next "Comparisons"
@Prev "Regs and Memory"
@Toc "RTL"

RTL Expressions for Arithmetic
==============================

   Unless otherwise specified, all the operands of arithmetic
expressions must be valid for mode M.  An operand is valid for mode M
if it has mode M, or if it is a `const_int' or `const_double' and M is
a mode of class `MODE_INT'.

   For commutative binary operations, constants should be placed in the
second operand.

`(plus:M X Y)'
     Represents the sum of the values represented by X and Y carried
     out in machine mode M.

`(lo_sum:M X Y)'
     Like `plus', except that it represents that sum of X and the
     low-order bits of Y.  The number of low order bits is
     machine-dependent but is normally the number of bits in a `Pmode'
     item minus the number of bits set by the `high' code (see
     @{"Constants" Link "Constants"}).

     M should be `Pmode'.

`(minus:M X Y)'
     Like `plus' but represents subtraction.

`(compare:M X Y)'
     Represents the result of subtracting Y from X for purposes of
     comparison.  The result is computed without overflow, as if with
     infinite precision.

     Of course, machines can't really subtract with infinite precision.
     However, they can pretend to do so when only the sign of the
     result will be used, which is the case when the result is stored
     in the condition code.   And that is the only way this kind of
     expression may validly be used: as a value to be stored in the
     condition codes.

     The mode M is not related to the modes of X and Y, but instead is
     the mode of the condition code value.  If `(cc0)' is used, it is
     `VOIDmode'.  Otherwise it is some mode in class `MODE_CC', often
     `CCmode'.  See @{"Condition Code" Link "Condition Code"}.

     Normally, X and Y must have the same mode.  Otherwise, `compare'
     is valid only if the mode of X is in class `MODE_INT' and Y is a
     `const_int' or `const_double' with mode `VOIDmode'.  The mode of X
     determines what mode the comparison is to be done in; thus it must
     not be `VOIDmode'.

     If one of the operands is a constant, it should be placed in the
     second operand and the comparison code adjusted as appropriate.

     A `compare' specifying two `VOIDmode' constants is not valid since
     there is no way to know in what mode the comparison is to be
     performed; the comparison must either be folded during the
     compilation or the first operand must be loaded into a register
     while its mode is still known.

`(neg:M X)'
     Represents the negation (subtraction from zero) of the value
     represented by X, carried out in mode M.

`(mult:M X Y)'
     Represents the signed product of the values represented by X and Y
     carried out in machine mode M.

     Some machines support a multiplication that generates a product
     wider than the operands.  Write the pattern for this as

          (mult:M (sign_extend:M X) (sign_extend:M Y))

     where M is wider than the modes of X and Y, which need not be the
     same.

     Write patterns for unsigned widening multiplication similarly using
     `zero_extend'.

`(div:M X Y)'
     Represents the quotient in signed division of X by Y, carried out
     in machine mode M.  If M is a floating point mode, it represents
     the exact quotient; otherwise, the integerized quotient.

     Some machines have division instructions in which the operands and
     quotient widths are not all the same; you should represent such
     instructions using `truncate' and `sign_extend' as in,

          (truncate:M1 (div:M2 X (sign_extend:M2 Y)))

`(udiv:M X Y)'
     Like `div' but represents unsigned division.

`(mod:M X Y)'
`(umod:M X Y)'
     Like `div' and `udiv' but represent the remainder instead of the
     quotient.

`(smin:M X Y)'
`(smax:M X Y)'
     Represents the smaller (for `smin') or larger (for `smax') of X
     and Y, interpreted as signed integers in mode M.

`(umin:M X Y)'
`(umax:M X Y)'
     Like `smin' and `smax', but the values are interpreted as unsigned
     integers.

`(not:M X)'
     Represents the bitwise complement of the value represented by X,
     carried out in mode M, which must be a fixed-point machine mode.

`(and:M X Y)'
     Represents the bitwise logical-and of the values represented by X
     and Y, carried out in machine mode M, which must be a fixed-point
     machine mode.

`(ior:M X Y)'
     Represents the bitwise inclusive-or of the values represented by X
     and Y, carried out in machine mode M, which must be a fixed-point
     mode.

`(xor:M X Y)'
     Represents the bitwise exclusive-or of the values represented by X
     and Y, carried out in machine mode M, which must be a fixed-point
     mode.

`(ashift:M X C)'
     Represents the result of arithmetically shifting X left by C
     places.  X have mode M, a fixed-point machine mode.  C be a
     fixed-point mode or be a constant with mode `VOIDmode'; which mode
     is determined by the mode called for in the machine description
     entry for the left-shift instruction.  For example, on the Vax,
     the mode of C is `QImode' regardless of M.

`(lshift:M X C)'
     Like `ashift' but for logical left shift.  `ashift' and `lshift'
     are identical operations; we customarily use `ashift' for both.

`(lshiftrt:M X C)'
`(ashiftrt:M X C)'
     Like `lshift' and `ashift' but for right shift.  Unlike the case
     for left shift, these two operations are distinct.

`(rotate:M X C)'
`(rotatert:M X C)'
     Similar but represent left and right rotate.  If C is a constant,
     use `rotate'.

`(abs:M X)'
     Represents the absolute value of X, computed in mode M.

`(sqrt:M X)'
     Represents the square root of X, computed in mode M. Most often M
     will be a floating point mode.

`(ffs:M X)'
     Represents one plus the index of the least significant 1-bit in X,
     represented as an integer of mode M.  (The value is zero if X is
     zero.)  The mode of X need not be M; depending on the target
     machine, various mode combinations may be valid.


@EndNode

@Node "Comparisons" "gcc.guide/Comparisons"
@Next "Bit Fields"
@Prev "Arithmetic"
@Toc "RTL"

Comparison Operations
=====================

   Comparison operators test a relation on two operands and are
considered to represent a machine-dependent nonzero value described by,
but not necessarily equal to, `STORE_FLAG_VALUE' (see @{"Misc" Link "Misc"}) if the
relation holds, or zero if it does not.  The mode of the comparison
operation is independent of the mode of the data being compared.  If
the comparison operation is being tested (e.g., the first operand of an
`if_then_else'), the mode must be `VOIDmode'. If the comparison
operation is producing data to be stored in some variable, the mode
must be in class `MODE_INT'.  All comparison operations producing data
must use the same mode, which is machine-specific.

   There are two ways that comparison operations may be used.  The
comparison operators may be used to compare the condition codes `(cc0)'
against zero, as in `(eq (cc0) (const_int 0))'.  Such a construct
actually refers to the result of the preceding instruction in which the
condition codes were set.  The instructing setting the condition code
must be adjacent to the instruction using the condition code; only
`note' insns may separate them.

   Alternatively, a comparison operation may directly compare two data
objects.  The mode of the comparison is determined by the operands; they
must both be valid for a common machine mode.  A comparison with both
operands constant would be invalid as the machine mode could not be
deduced from it, but such a comparison should never exist in RTL due to
constant folding.

   In the example above, if `(cc0)' were last set to `(compare X Y)',
the comparison operation is identical to `(eq X Y)'.  Usually only one
style of comparisons is supported on a particular machine, but the
combine pass will try to merge the operations to produce the `eq' shown
in case it exists in the context of the particular insn involved.

   Inequality comparisons come in two flavors, signed and unsigned. 
Thus, there are distinct expression codes `gt' and `gtu' for signed and
unsigned greater-than.  These can produce different results for the same
pair of integer values: for example, 1 is signed greater-than -1 but not
unsigned greater-than, because -1 when regarded as unsigned is actually
`0xffffffff' which is greater than 1.

   The signed comparisons are also used for floating point values. 
Floating point comparisons are distinguished by the machine modes of
the operands.

`(eq:M X Y)'
     1 if the values represented by X and Y are equal, otherwise 0.

`(ne:M X Y)'
     1 if the values represented by X and Y are not equal, otherwise 0.

`(gt:M X Y)'
     1 if the X is greater than Y.  If they are fixed-point, the
     comparison is done in a signed sense.

`(gtu:M X Y)'
     Like `gt' but does unsigned comparison, on fixed-point numbers
     only.

`(lt:M X Y)'
`(ltu:M X Y)'
     Like `gt' and `gtu' but test for "less than".

`(ge:M X Y)'
`(geu:M X Y)'
     Like `gt' and `gtu' but test for "greater than or equal".

`(le:M X Y)'
`(leu:M X Y)'
     Like `gt' and `gtu' but test for "less than or equal".

`(if_then_else COND THEN ELSE)'
     This is not a comparison operation but is listed here because it is
     always used in conjunction with a comparison operation.  To be
     precise, COND is a comparison expression.  This expression
     represents a choice, according to COND, between the value
     represented by THEN and the one represented by ELSE.

     On most machines, `if_then_else' expressions are valid only to
     express conditional jumps.

`(cond [TEST1 VALUE1 TEST2 VALUE2 ...] DEFAULT)'
     Similar to `if_then_else', but more general.  Each of TEST1,
     TEST2, ... is performed in turn.  The result of this expression is
     the VALUE corresponding to the first non-zero test, or DEFAULT if
     none of the tests are non-zero expressions.

     This is currently not valid for instruction patterns and is
     supported only for insn attributes.  See @{"Insn Attributes" Link "Insn Attributes"}.


@EndNode

@Node "Bit Fields" "gcc.guide/Bit Fields"
@Next "Conversions"
@Prev "Comparisons"
@Toc "RTL"

Bit Fields
==========

   Special expression codes exist to represent bit-field instructions.
These types of expressions are lvalues in RTL; they may appear on the
left side of an assignment, indicating insertion of a value into the
specified bit field.

`(sign_extract:M LOC SIZE POS)'
     This represents a reference to a sign-extended bit field contained
     or starting in LOC (a memory or register reference).  The bit field
     is SIZE bits wide and starts at bit POS.  The compilation option
     `BITS_BIG_ENDIAN' says which end of the memory unit POS counts
     from.

     If LOC is in memory, its mode must be a single-byte integer mode.
     If LOC is in a register, the mode to use is specified by the
     operand of the `insv' or `extv' pattern (see @{"Standard Names" Link "Standard Names"}) and
     is usually a full-word integer mode.

     The mode of POS is machine-specific and is also specified in the
     `insv' or `extv' pattern.

     The mode M is the same as the mode that would be used for LOC if
     it were a register.

`(zero_extract:M LOC SIZE POS)'
     Like `sign_extract' but refers to an unsigned or zero-extended bit
     field.  The same sequence of bits are extracted, but they are
     filled to an entire word with zeros instead of by sign-extension.


@EndNode

@Node "Conversions" "gcc.guide/Conversions"
@Next "RTL Declarations"
@Prev "Bit Fields"
@Toc "RTL"

Conversions
===========

   All conversions between machine modes must be represented by
explicit conversion operations.  For example, an expression which is
the sum of a byte and a full word cannot be written as `(plus:SI
(reg:QI 34) (reg:SI 80))' because the `plus' operation requires two
operands of the same machine mode. Therefore, the byte-sized operand is
enclosed in a conversion operation, as in

     (plus:SI (sign_extend:SI (reg:QI 34)) (reg:SI 80))

   The conversion operation is not a mere placeholder, because there
may be more than one way of converting from a given starting mode to
the desired final mode.  The conversion operation code says how to do
it.

   For all conversion operations, X must not be `VOIDmode' because the
mode in which to do the conversion would not be known. The conversion
must either be done at compile-time or X must be placed into a register.

`(sign_extend:M X)'
     Represents the result of sign-extending the value X to machine
     mode M.  M must be a fixed-point mode and X a fixed-point value of
     a mode narrower than M.

`(zero_extend:M X)'
     Represents the result of zero-extending the value X to machine
     mode M.  M must be a fixed-point mode and X a fixed-point value of
     a mode narrower than M.

`(float_extend:M X)'
     Represents the result of extending the value X to machine mode M. 
     M must be a floating point mode and X a floating point value of a
     mode narrower than M.

`(truncate:M X)'
     Represents the result of truncating the value X to machine mode M.
      M must be a fixed-point mode and X a fixed-point value of a mode
     wider than M.

`(float_truncate:M X)'
     Represents the result of truncating the value X to machine mode M.
      M must be a floating point mode and X a floating point value of a
     mode wider than M.

`(float:M X)'
     Represents the result of converting fixed point value X, regarded
     as signed, to floating point mode M.

`(unsigned_float:M X)'
     Represents the result of converting fixed point value X, regarded
     as unsigned, to floating point mode M.

`(fix:M X)'
     When M is a fixed point mode, represents the result of converting
     floating point value X to mode M, regarded as signed.  How
     rounding is done is not specified, so this operation may be used
     validly in compiling C code only for integer-valued operands.

`(unsigned_fix:M X)'
     Represents the result of converting floating point value X to
     fixed point mode M, regarded as unsigned.  How rounding is done is
     not specified.

`(fix:M X)'
     When M is a floating point mode, represents the result of
     converting floating point value X (valid for mode M) to an
     integer, still represented in floating point mode M, by rounding
     towards zero.


@EndNode

@Node "RTL Declarations" "gcc.guide/RTL Declarations"
@Next "Side Effects"
@Prev "Conversions"
@Toc "RTL"

Declarations
============

   Declaration expression codes do not represent arithmetic operations
but rather state assertions about their operands.

`(strict_low_part (subreg:M (reg:N R) 0))'
     This expression code is used in only one context: operand 0 of a
     `set' expression.  In addition, the operand of this expression
     must be a non-paradoxical `subreg' expression.

     The presence of `strict_low_part' says that the part of the
     register which is meaningful in mode N, but is not part of mode M,
     is not to be altered.  Normally, an assignment to such a subreg is
     allowed to have undefined effects on the rest of the register when
     M is less than a word.


@EndNode

@Node "Side Effects" "gcc.guide/Side Effects"
@Next "Incdec"
@Prev "RTL Declarations"
@Toc "RTL"

Side Effect Expressions
=======================

   The expression codes described so far represent values, not actions.
But machine instructions never produce values; they are meaningful only
for their side effects on the state of the machine.  Special expression
codes are used to represent side effects.

   The body of an instruction is always one of these side effect codes;
the codes described above, which represent values, appear only as the
operands of these.

`(set LVAL X)'
     Represents the action of storing the value of X into the place
     represented by LVAL.  LVAL must be an expression representing a
     place that can be stored in: `reg' (or `subreg' or
     `strict_low_part'), `mem', `pc' or `cc0'.

     If LVAL is a `reg', `subreg' or `mem', it has a machine mode; then
     X must be valid for that mode.

     If LVAL is a `reg' whose machine mode is less than the full width
     of the register, then it means that the part of the register
     specified by the machine mode is given the specified value and the
     rest of the register receives an undefined value.  Likewise, if
     LVAL is a `subreg' whose machine mode is narrower than the mode of
     the register, the rest of the register can be changed in an
     undefined way.

     If LVAL is a `strict_low_part' of a `subreg', then the part of the
     register specified by the machine mode of the `subreg' is given
     the value X and the rest of the register is not changed.

     If LVAL is `(cc0)', it has no machine mode, and X may be either a
     `compare' expression or a value that may have any mode. The latter
     case represents a "test" instruction.  The expression `(set (cc0)
     (reg:M N))' is equivalent to `(set (cc0) (compare (reg:M N)
     (const_int 0)))'. Use the former expression to save space during
     the compilation.

     If LVAL is `(pc)', we have a jump instruction, and the
     possibilities for X are very limited.  It may be a `label_ref'
     expression (unconditional jump).  It may be an `if_then_else'
     (conditional jump), in which case either the second or the third
     operand must be `(pc)' (for the case which does not jump) and the
     other of the two must be a `label_ref' (for the case which does
     jump).  X may also be a `mem' or `(plus:SI (pc) Y)', where Y may
     be a `reg' or a `mem'; these unusual patterns are used to
     represent jumps through branch tables.

     If LVAL is neither `(cc0)' nor `(pc)', the mode of LVAL must not
     be `VOIDmode' and the mode of X must be valid for the mode of LVAL.

     LVAL is customarily accessed with the `SET_DEST' macro and X with
     the `SET_SRC' macro.

`(return)'
     As the sole expression in a pattern, represents a return from the
     current function, on machines where this can be done with one
     instruction, such as Vaxes.  On machines where a multi-instruction
     "epilogue" must be executed in order to return from the function,
     returning is done by jumping to a label which precedes the
     epilogue, and the `return' expression code is never used.

     Inside an `if_then_else' expression, represents the value to be
     placed in `pc' to return to the caller.

     Note that an insn pattern of `(return)' is logically equivalent to
     `(set (pc) (return))', but the latter form is never used.

`(call FUNCTION NARGS)'
     Represents a function call.  FUNCTION is a `mem' expression whose
     address is the address of the function to be called. NARGS is an
     expression which can be used for two purposes: on some machines it
     represents the number of bytes of stack argument; on others, it
     represents the number of argument registers.

     Each machine has a standard machine mode which FUNCTION must have.
      The machine description defines macro `FUNCTION_MODE' to expand
     into the requisite mode name.  The purpose of this mode is to
     specify what kind of addressing is allowed, on machines where the
     allowed kinds of addressing depend on the machine mode being
     addressed.

`(clobber X)'
     Represents the storing or possible storing of an unpredictable,
     undescribed value into X, which must be a `reg', `scratch' or
     `mem' expression.

     One place this is used is in string instructions that store
     standard values into particular hard registers.  It may not be
     worth the trouble to describe the values that are stored, but it
     is essential to inform the compiler that the registers will be
     altered, lest it attempt to keep data in them across the string
     instruction.

     If X is `(mem:BLK (const_int 0))', it means that all memory
     locations must be presumed clobbered.

     Note that the machine description classifies certain hard
     registers as "call-clobbered".  All function call instructions are
     assumed by default to clobber these registers, so there is no need
     to use `clobber' expressions to indicate this fact.  Also, each
     function call is assumed to have the potential to alter any memory
     location, unless the function is declared `const'.

     If the last group of expressions in a `parallel' are each a
     `clobber' expression whose arguments are `reg' or `match_scratch'
     (see @{"RTL Template" Link "RTL Template"}) expressions, the combiner phase can add the
     appropriate `clobber' expressions to an insn it has constructed
     when doing so will cause a pattern to be matched.

     This feature can be used, for example, on a machine that whose
     multiply and add instructions don't use an MQ register but which
     has an add-accumulate instruction that does clobber the MQ
     register.  Similarly, a combined instruction might require a
     temporary register while the constituent instructions might not.

     When a `clobber' expression for a register appears inside a
     `parallel' with other side effects, the register allocator
     guarantees that the register is unoccupied both before and after
     that insn.  However, the reload phase may allocate a register used
     for one of the inputs unless the `&' constraint is specified for
     the selected alternative (see @{"Modifiers" Link "Modifiers"}).  You can clobber either
     a specific hard register, a pseudo register, or a `scratch'
     expression; in the latter two cases, GNU CC will allocate a hard
     register that is available there for use as a temporary.

     For instructions that require a temporary register, you should use
     `scratch' instead of a pseudo-register because this will allow the
     combiner phase to add the `clobber' when required.  You do this by
     coding (`clobber' (`match_scratch' ...)).  If you do clobber a
     pseudo register, use one which appears nowhere else--generate a
     new one each time.  Otherwise, you may confuse CSE.

     There is one other known use for clobbering a pseudo register in a
     `parallel': when one of the input operands of the insn is also
     clobbered by the insn.  In this case, using the same pseudo
     register in the clobber and elsewhere in the insn produces the
     expected results.

`(use X)'
     Represents the use of the value of X.  It indicates that the value
     in X at this point in the program is needed, even though it may
     not be apparent why this is so.  Therefore, the compiler will not
     attempt to delete previous instructions whose only effect is to
     store a value in X.  X must be a `reg' expression.

     During the delayed branch scheduling phase, X may be an insn. This
     indicates that X previously was located at this place in the code
     and its data dependencies need to be taken into account.  These
     `use' insns will be deleted before the delayed branch scheduling
     phase exits.

`(parallel [X0 X1 ...])'
     Represents several side effects performed in parallel.  The square
     brackets stand for a vector; the operand of `parallel' is a vector
     of expressions.  X0, X1 and so on are individual side effect
     expressions--expressions of code `set', `call', `return',
     `clobber' or `use'.

     "In parallel" means that first all the values used in the
     individual side-effects are computed, and second all the actual
     side-effects are performed.  For example,

          (parallel [(set (reg:SI 1) (mem:SI (reg:SI 1)))
                     (set (mem:SI (reg:SI 1)) (reg:SI 1))])

     says unambiguously that the values of hard register 1 and the
     memory location addressed by it are interchanged.  In both places
     where `(reg:SI 1)' appears as a memory address it refers to the
     value in register 1 *before* the execution of the insn.

     It follows that it is *incorrect* to use `parallel' and expect the
     result of one `set' to be available for the next one. For example,
     people sometimes attempt to represent a jump-if-zero instruction
     this way:

          (parallel [(set (cc0) (reg:SI 34))
                     (set (pc) (if_then_else
                                  (eq (cc0) (const_int 0))
                                  (label_ref ...)
                                  (pc)))])

     But this is incorrect, because it says that the jump condition
     depends on the condition code value *before* this instruction, not
     on the new value that is set by this instruction.

     Peephole optimization, which takes place together with final
     assembly code output, can produce insns whose patterns consist of
     a `parallel' whose elements are the operands needed to output the
     resulting assembler code--often `reg', `mem' or constant
     expressions. This would not be well-formed RTL at any other stage
     in compilation, but it is ok then because no further optimization
     remains to be done. However, the definition of the macro
     `NOTICE_UPDATE_CC', if any, must deal with such insns if you
     define any peephole optimizations.

`(sequence [INSNS ...])'
     Represents a sequence of insns.  Each of the INSNS that appears in
     the vector is suitable for appearing in the chain of insns, so it
     must be an `insn', `jump_insn', `call_insn', `code_label',
     `barrier' or `note'.

     A `sequence' RTX is never placed in an actual insn during RTL
     generation.  It represents the sequence of insns that result from a
     `define_expand' *before* those insns are passed to `emit_insn' to
     insert them in the chain of insns.  When actually inserted, the
     individual sub-insns are separated out and the `sequence' is
     forgotten.

     After delay-slot scheduling is completed, an insn and all the
     insns that reside in its delay slots are grouped together into a
     `sequence'. The insn requiring the delay slot is the first insn in
     the vector; subsequent insns are to be placed in the delay slot.

     `INSN_ANNULLED_BRANCH_P' is set on an insn in a delay slot to
     indicate that a branch insn should be used that will conditionally
     annul the effect of the insns in the delay slots.  In such a case,
     `INSN_FROM_TARGET_P' indicates that the insn is from the target of
     the branch and should be executed only if the branch is taken;
     otherwise the insn should be executed only if the branch is not
     taken. See @{"Delay Slots" Link "Delay Slots"}.

   These expression codes appear in place of a side effect, as the body
of an insn, though strictly speaking they do not always describe side
effects as such:

`(asm_input S)'
     Represents literal assembler code as described by the string S.

`(unspec [OPERANDS ...] INDEX)'
`(unspec_volatile [OPERANDS ...] INDEX)'
     Represents a machine-specific operation on OPERANDS.  INDEX
     selects between multiple machine-specific operations.
     `unspec_volatile' is used for volatile operations and operations
     that may trap; `unspec' is used for other operations.

     These codes may appear inside a `pattern' of an insn, inside a
     `parallel', or inside an expression.

`(addr_vec:M [LR0 LR1 ...])'
     Represents a table of jump addresses.  The vector elements LR0,
     etc., are `label_ref' expressions.  The mode M specifies how much
     space is given to each address; normally M would be `Pmode'.

`(addr_diff_vec:M BASE [LR0 LR1 ...])'
     Represents a table of jump addresses expressed as offsets from
     BASE.  The vector elements LR0, etc., are `label_ref' expressions
     and so is BASE.  The mode M specifies how much space is given to
     each address-difference.


@EndNode

@Node "Incdec" "gcc.guide/Incdec"
@Next "Assembler"
@Prev "Side Effects"
@Toc "RTL"

Embedded Side-Effects on Addresses
==================================

   Four special side-effect expression codes appear as memory addresses.

`(pre_dec:M X)'
     Represents the side effect of decrementing X by a standard amount
     and represents also the value that X has after being decremented. 
     X must be a `reg' or `mem', but most machines allow only a `reg'. 
     M must be the machine mode for pointers on the machine in use. 
     The amount X is decremented by is the length in bytes of the
     machine mode of the containing memory reference of which this
     expression serves as the address.  Here is an example of its use:

          (mem:DF (pre_dec:SI (reg:SI 39)))

     This says to decrement pseudo register 39 by the length of a
     `DFmode' value and use the result to address a `DFmode' value.

`(pre_inc:M X)'
     Similar, but specifies incrementing X instead of decrementing it.

`(post_dec:M X)'
     Represents the same side effect as `pre_dec' but a different
     value.  The value represented here is the value X has before being
     decremented.

`(post_inc:M X)'
     Similar, but specifies incrementing X instead of decrementing it.

   These embedded side effect expressions must be used with care. 
Instruction patterns may not use them.  Until the `flow' pass of the
compiler, they may occur only to represent pushes onto the stack.  The
`flow' pass finds cases where registers are incremented or decremented
in one instruction and used as an address shortly before or after;
these cases are then transformed to use pre- or post-increment or
-decrement.

   If a register used as the operand of these expressions is used in
another address in an insn, the original value of the register is used.
Uses of the register outside of an address are not permitted within the
same insn as a use in an embedded side effect expression because such
insns behave differently on different machines and hence must be treated
as ambiguous and disallowed.

   An instruction that can be represented with an embedded side effect
could also be represented using `parallel' containing an additional
`set' to describe how the address register is altered.  This is not
done because machines that allow these operations at all typically
allow them wherever a memory address is called for.  Describing them as
additional parallel stores would require doubling the number of entries
in the machine description.


@EndNode

@Node "Assembler" "gcc.guide/Assembler"
@Next "Insns"
@Prev "IncDec"
@Toc "RTL"

Assembler Instructions as Expressions
=====================================

   The RTX code `asm_operands' represents a value produced by a
user-specified assembler instruction.  It is used to represent an `asm'
statement with arguments.  An `asm' statement with a single output
operand, like this:

     asm ("foo %1,%2,%0" : "=a" (outputvar) : "g" (x + y), "di" (*z));

is represented using a single `asm_operands' RTX which represents the
value that is stored in `outputvar':

     (set RTX-FOR-OUTPUTVAR
          (asm_operands "foo %1,%2,%0" "a" 0
                        [RTX-FOR-ADDITION-RESULT RTX-FOR-*Z]
                        [(asm_input:M1 "g")
                         (asm_input:M2 "di")]))

Here the operands of the `asm_operands' RTX are the assembler template
string, the output-operand's constraint, the index-number of the output
operand among the output operands specified, a vector of input operand
RTX's, and a vector of input-operand modes and constraints.  The mode
M1 is the mode of the sum `x+y'; M2 is that of `*z'.

   When an `asm' statement has multiple output values, its insn has
several such `set' RTX's inside of a `parallel'.  Each `set' contains a
`asm_operands'; all of these share the same assembler template and
vectors, but each contains the constraint for the respective output
operand.  They are also distinguished by the output-operand index
number, which is 0, 1, ... for successive output operands.


@EndNode

@Node "Insns" "gcc.guide/Insns"
@Next "Calls"
@Prev "Assembler"
@Toc "RTL"

Insns
=====

   The RTL representation of the code for a function is a doubly-linked
chain of objects called "insns".  Insns are expressions with special
codes that are used for no other purpose.  Some insns are actual
instructions; others represent dispatch tables for `switch' statements;
others represent labels to jump to or various sorts of declarative
information.

   In addition to its own specific data, each insn must have a unique
id-number that distinguishes it from all other insns in the current
function (after delayed branch scheduling, copies of an insn with the
same id-number may be present in multiple places in a function, but
these copies will always be identical and will only appear inside a
`sequence'), and chain pointers to the preceding and following insns. 
These three fields occupy the same position in every insn, independent
of the expression code of the insn.  They could be accessed with `XEXP'
and `XINT', but instead three special macros are always used:

`INSN_UID (I)'
     Accesses the unique id of insn I.

`PREV_INSN (I)'
     Accesses the chain pointer to the insn preceding I. If I is the
     first insn, this is a null pointer.

`NEXT_INSN (I)'
     Accesses the chain pointer to the insn following I. If I is the
     last insn, this is a null pointer.

   The first insn in the chain is obtained by calling `get_insns'; the
last insn is the result of calling `get_last_insn'.  Within the chain
delimited by these insns, the `NEXT_INSN' and `PREV_INSN' pointers must
always correspond: if INSN is not the first insn,

     NEXT_INSN (PREV_INSN (INSN)) == INSN

is always true and if INSN is not the last insn,

     PREV_INSN (NEXT_INSN (INSN)) == INSN

is always true.

   After delay slot scheduling, some of the insns in the chain might be
`sequence' expressions, which contain a vector of insns.  The value of
`NEXT_INSN' in all but the last of these insns is the next insn in the
vector; the value of `NEXT_INSN' of the last insn in the vector is the
same as the value of `NEXT_INSN' for the `sequence' in which it is
contained.  Similar rules apply for `PREV_INSN'.

   This means that the above invariants are not necessarily true for
insns inside `sequence' expressions.  Specifically, if INSN is the
first insn in a `sequence', `NEXT_INSN (PREV_INSN (INSN))' is the insn
containing the `sequence' expression, as is the value of `PREV_INSN
(NEXT_INSN (INSN))' is INSN is the last insn in the `sequence'
expression.  You can use these expressions to find the containing
`sequence' expression.

   Every insn has one of the following six expression codes:

`insn'
     The expression code `insn' is used for instructions that do not
     jump and do not do function calls.  `sequence' expressions are
     always contained in insns with code `insn' even if one of those
     insns should jump or do function calls.

     Insns with code `insn' have four additional fields beyond the three
     mandatory ones listed above.  These four are described in a table
     below.

`jump_insn'
     The expression code `jump_insn' is used for instructions that may
     jump (or, more generally, may contain `label_ref' expressions).  If
     there is an instruction to return from the current function, it is
     recorded as a `jump_insn'.

     `jump_insn' insns have the same extra fields as `insn' insns,
     accessed in the same way and in addition contains a field
     `JUMP_LABEL' which is defined once jump optimization has completed.

     For simple conditional and unconditional jumps, this field
     contains the `code_label' to which this insn will (possibly
     conditionally) branch.  In a more complex jump, `JUMP_LABEL'
     records one of the labels that the insn refers to; the only way to
     find the others is to scan the entire body of the insn.

     Return insns count as jumps, but since they do not refer to any
     labels, they have zero in the `JUMP_LABEL' field.

`call_insn'
     The expression code `call_insn' is used for instructions that may
     do function calls.  It is important to distinguish these
     instructions because they imply that certain registers and memory
     locations may be altered unpredictably.

     A `call_insn' insn may be preceded by insns that contain a single
     `use' expression and be followed by insns the contain a single
     `clobber' expression.  If so, these `use' and `clobber'
     expressions are treated as being part of the function call. There
     must not even be a `note' between the `call_insn' and the `use' or
     `clobber' insns for this special treatment to take place.  This is
     somewhat of a kludge and will be removed in a later version of GNU
     CC.

     `call_insn' insns have the same extra fields as `insn' insns,
     accessed in the same way.

`code_label'
     A `code_label' insn represents a label that a jump insn can jump
     to.  It contains two special fields of data in addition to the
     three standard ones.  `CODE_LABEL_NUMBER' is used to hold the
     "label number", a number that identifies this label uniquely among
     all the labels in the compilation (not just in the current
     function). Ultimately, the label is represented in the assembler
     output as an assembler label, usually of the form `LN' where N is
     the label number.

     When a `code_label' appears in an RTL expression, it normally
     appears within a `label_ref' which represents the address of the
     label, as a number.

     The field `LABEL_NUSES' is only defined once the jump optimization
     phase is completed and contains the number of times this label is
     referenced in the current function.

`barrier'
     Barriers are placed in the instruction stream when control cannot
     flow past them.  They are placed after unconditional jump
     instructions to indicate that the jumps are unconditional and
     after calls to `volatile' functions, which do not return (e.g.,
     `exit'). They contain no information beyond the three standard
     fields.

`note'
     `note' insns are used to represent additional debugging and
     declarative information.  They contain two nonstandard fields, an
     integer which is accessed with the macro `NOTE_LINE_NUMBER' and a
     string accessed with `NOTE_SOURCE_FILE'.

     If `NOTE_LINE_NUMBER' is positive, the note represents the
     position of a source line and `NOTE_SOURCE_FILE' is the source
     file name that the line came from.  These notes control generation
     of line number data in the assembler output.

     Otherwise, `NOTE_LINE_NUMBER' is not really a line number but a
     code with one of the following values (and `NOTE_SOURCE_FILE' must
     contain a null pointer):

    `NOTE_INSN_DELETED'
          Such a note is completely ignorable.  Some passes of the
          compiler delete insns by altering them into notes of this
          kind.

    `NOTE_INSN_BLOCK_BEG'
    `NOTE_INSN_BLOCK_END'
          These types of notes indicate the position of the beginning
          and end of a level of scoping of variable names.  They
          control the output of debugging information.

    `NOTE_INSN_LOOP_BEG'
    `NOTE_INSN_LOOP_END'
          These types of notes indicate the position of the beginning
          and end of a `while' or `for' loop.  They enable the loop
          optimizer to find loops quickly.

    `NOTE_INSN_LOOP_CONT'
          Appears at the place in a loop that `continue' statements
          jump to.

    `NOTE_INSN_LOOP_VTOP'
          This note indicates the place in a loop where the exit test
          begins for those loops in which the exit test has been
          duplicated.  This position becomes another virtual start of
          the loop when considering loop invariants.

    `NOTE_INSN_FUNCTION_END'
          Appears near the end of the function body, just before the
          label that `return' statements jump to (on machine where a
          single instruction does not suffice for returning).  This
          note may be deleted by jump optimization.

    `NOTE_INSN_SETJMP'
          Appears following each call to `setjmp' or a related function.

     These codes are printed symbolically when they appear in debugging
     dumps.

   The machine mode of an insn is normally `VOIDmode', but some phases
use the mode for various purposes; for example, the reload pass sets it
to `HImode' if the insn needs reloading but not register elimination
and `QImode' if both are required.  The common subexpression
elimination pass sets the mode of an insn to `QImode' when it is the
first insn in a block that has already been processed.

   Here is a table of the extra fields of `insn', `jump_insn' and
`call_insn' insns:

`PATTERN (I)'
     An expression for the side effect performed by this insn.  This
     must be one of the following codes: `set', `call', `use',
     `clobber', `return', `asm_input', `asm_output', `addr_vec',
     `addr_diff_vec', `trap_if', `unspec', `unspec_volatile', or
     `parallel'.  If it is a `parallel', each element of the `parallel'
     must be one these codes, except that `parallel' expressions cannot
     be nested and `addr_vec' and `addr_diff_vec' are not permitted
     inside a `parallel' expression.

`INSN_CODE (I)'
     An integer that says which pattern in the machine description
     matches this insn, or -1 if the matching has not yet been
     attempted.

     Such matching is never attempted and this field remains -1 on an
     insn whose pattern consists of a single `use', `clobber',
     `asm_input', `addr_vec' or `addr_diff_vec' expression.

     Matching is also never attempted on insns that result from an `asm'
     statement.  These contain at least one `asm_operands' expression.
     The function `asm_noperands' returns a non-negative value for such
     insns.

     In the debugging output, this field is printed as a number
     followed by a symbolic representation that locates the pattern in
     the `md' file as some small positive or negative offset from a
     named pattern.

`LOG_LINKS (I)'
     A list (chain of `insn_list' expressions) giving information about
     dependencies between instructions within a basic block.  Neither a
     jump nor a label may come between the related insns.

`REG_NOTES (I)'
     A list (chain of `expr_list' and `insn_list' expressions) giving
     miscellaneous information about the insn.  It is often information
     pertaining to the registers used in this insn.

   The `LOG_LINKS' field of an insn is a chain of `insn_list'
expressions.  Each of these has two operands: the first is an insn, and
the second is another `insn_list' expression (the next one in the
chain).  The last `insn_list' in the chain has a null pointer as second
operand.  The significant thing about the chain is which insns appear
in it (as first operands of `insn_list' expressions).  Their order is
not significant.

   This list is originally set up by the flow analysis pass; it is a
null pointer until then.  Flow only adds links for those data
dependencies which can be used for instruction combination.  For each
insn, the flow analysis pass adds a link to insns which store into
registers values that are used for the first time in this insn.  The
instruction scheduling pass adds extra links so that every dependence
will be represented.  Links represent data dependencies,
antidependencies and output dependencies; the machine mode of the link
distinguishes these three types: antidependencies have mode
`REG_DEP_ANTI', output dependencies have mode `REG_DEP_OUTPUT', and
data dependencies have mode `VOIDmode'.

   The `REG_NOTES' field of an insn is a chain similar to the
`LOG_LINKS' field but it includes `expr_list' expressions in addition
to `insn_list' expressions.  There are several kinds of register notes,
which are distinguished by the machine mode, which in a register note
is really understood as being an `enum reg_note'. The first operand OP
of the note is data whose meaning depends on the kind of note.

   The macro `REG_NOTE_KIND (X)' returns the the kind of register note.
 Its counterpart, the macro `PUT_REG_NOTE_KIND (X, NEWKIND)' sets the
register note type of X to be NEWKIND.

   Register notes are of three classes: They may say something about an
input to an insn, they may say something about an output of an insn, or
they may create a linkage between two insns.  There are also a set of
values that are only used in `LOG_LINKS'.

   These register notes annotate inputs to an insn:

`REG_DEAD'
     The value in OP dies in this insn; that is to say, altering the
     value immediately after this insn would not affect the future
     behavior of the program.

     This does not necessarily mean that the register OP has no useful
     value after this insn since it may also be an output of the insn. 
     In such a case, however, a `REG_DEAD' note would be redundant and
     is usually not present until after the reload pass, but no code
     relies on this fact.

`REG_INC'
     The register OP is incremented (or decremented; at this level
     there is no distinction) by an embedded side effect inside this
     insn. This means it appears in a `post_inc', `pre_inc', `post_dec'
     or `pre_dec' expression.

`REG_NONNEG'
     The register OP is known to have a nonnegative value when this
     insn is reached.  This is used so that decrement and branch until
     zero instructions, such as the m68k dbra, can be matched.

     The `REG_NONNEG' note is added to insns only if the machine
     description contains a pattern named
     `decrement_and_branch_until_zero'.

`REG_NO_CONFLICT'
     This insn does not cause a conflict between OP and the item being
     set by this insn even though it might appear that it does. In
     other words, if the destination register and OP could otherwise be
     assigned the same register, this insn does not prevent that
     assignment.

     Insns with this note are usually part of a block that begins with a
     `clobber' insn specifying a multi-word pseudo register (which will
     be the output of the block), a group of insns that each set one
     word of the value and have the `REG_NO_CONFLICT' note attached,
     and a final insn that copies the output to itself with an attached
     `REG_EQUAL' note giving the expression being computed.  This block
     is encapsulated with `REG_LIBCALL' and `REG_RETVAL' notes on the
     first and last insns, respectively.

`REG_LABEL'
     This insn uses OP, a `code_label', but is not a `jump_insn'.  The
     presence of this note allows jump optimization to be aware that OP
     is, in fact, being used.

   The following notes describe attributes of outputs of an insn:

`REG_EQUIV'
`REG_EQUAL'
     This note is only valid on an insn that sets only one register and
     indicates that that register will be equal to OP at run time; the
     scope of this equivalence differs between the two types of notes. 
     The value which the insn explicitly copies into the register may
     look different from OP, but they will be equal at run time.  If the
     output of the single `set' is a `strict_low_part' expression, the
     note refers to the register that is contained in `SUBREG_REG' of
     the `subreg' expression.

     For `REG_EQUIV', the register is equivalent to OP throughout the
     entire function, and could validly be replaced in all its
     occurrences by OP.  ("Validly" here refers to the data flow of the
     program; simple replacement may make some insns invalid.)  For
     example, when a constant is loaded into a register that is never
     assigned any other value, this kind of note is used.

     When a parameter is copied into a pseudo-register at entry to a
     function, a note of this kind records that the register is
     equivalent to the stack slot where the parameter was passed. 
     Although in this case the register may be set by other insns, it
     is still valid to replace the register by the stack slot
     throughout the function.

     In the case of `REG_EQUAL', the register that is set by this insn
     will be equal to OP at run time at the end of this insn but not
     necessarily elsewhere in the function.  In this case, OP is
     typically an arithmetic expression.  For example, when a sequence
     of insns such as a library call is used to perform an arithmetic
     operation, this kind of note is attached to the insn that produces
     or copies the final value.

     These two notes are used in different ways by the compiler passes.
     `REG_EQUAL' is used by passes prior to register allocation (such as
     common subexpression elimination and loop optimization) to tell
     them how to think of that value.  `REG_EQUIV' notes are used by
     register allocation to indicate that there is an available
     substitute expression (either a constant or a `mem' expression for
     the location of a parameter on the stack) that may be used in
     place of a register if insufficient registers are available.

     Except for stack homes for parameters, which are indicated by a
     `REG_EQUIV' note and are not useful to the early optimization
     passes and pseudo registers that are equivalent to a memory
     location throughout there entire life, which is not detected until
     later in the compilation, all equivalences are initially indicated
     by an attached `REG_EQUAL' note.  In the early stages of register
     allocation, a `REG_EQUAL' note is changed into a `REG_EQUIV' note
     if OP is a constant and the insn represents the only set of its
     destination register.

     Thus, compiler passes prior to register allocation need only check
     for `REG_EQUAL' notes and passes subsequent to register allocation
     need only check for `REG_EQUIV' notes.

`REG_UNUSED'
     The register OP being set by this insn will not be used in a
     subsequent insn.  This differs from a `REG_DEAD' note, which
     indicates that the value in an input will not be used subsequently.
     These two notes are independent; both may be present for the same
     register.

`REG_WAS_0'
     The single output of this insn contained zero before this insn. OP
     is the insn that set it to zero.  You can rely on this note if it
     is present and OP has not been deleted or turned into a `note';
     its absence implies nothing.

   These notes describe linkages between insns.  They occur in pairs:
one insn has one of a pair of notes that points to a second insn, which
has the inverse note pointing back to the first insn.

`REG_RETVAL'
     This insn copies the value of a multi-insn sequence (for example, a
     library call), and OP is the first insn of the sequence (for a
     library call, the first insn that was generated to set up the
     arguments for the library call).

     Loop optimization uses this note to treat such a sequence as a
     single operation for code motion purposes and flow analysis uses
     this note to delete such sequences whose results are dead.

     A `REG_EQUAL' note will also usually be attached to this insn to
     provide the expression being computed by the sequence.

`REG_LIBCALL'
     This is the inverse of `REG_RETVAL': it is placed on the first
     insn of a multi-insn sequence, and it points to the last one.

`REG_CC_SETTER'
`REG_CC_USER'
     On machines that use `cc0', the insns which set and use `cc0' set
     and use `cc0' are adjacent.  However, when branch delay slot
     filling is done, this may no longer be true.  In this case a
     `REG_CC_USER' note will be placed on the insn setting `cc0' to
     point to the insn using `cc0' and a `REG_CC_SETTER' note will be
     placed on the insn using `cc0' to point to the insn setting `cc0'.

   These values are only used in the `LOG_LINKS' field, and indicate
the type of dependency that each link represents.  Links which indicate
a data dependence (a read after write dependence) do not use any code,
they simply have mode `VOIDmode', and are printed without any
descriptive text.

`REG_DEP_ANTI'
     This indicates an anti dependence (a write after read dependence).

`REG_DEP_OUTPUT'
     This indicates an output dependence (a write after write
     dependence).

   For convenience, the machine mode in an `insn_list' or `expr_list'
is printed using these symbolic codes in debugging dumps.

   The only difference between the expression codes `insn_list' and
`expr_list' is that the first operand of an `insn_list' is assumed to
be an insn and is printed in debugging dumps as the insn's unique id;
the first operand of an `expr_list' is printed in the ordinary way as
an expression.


@EndNode

@Node "Calls" "gcc.guide/Calls"
@Next "Sharing"
@Prev "Insns"
@Toc "RTL"

RTL Representation of Function-Call Insns
=========================================

   Insns that call subroutines have the RTL expression code `call_insn'.
These insns must satisfy special rules, and their bodies must use a
special RTL expression code, `call'.

   A `call' expression has two operands, as follows:

     (call (mem:FM ADDR) NBYTES)

Here NBYTES is an operand that represents the number of bytes of
argument data being passed to the subroutine, FM is a machine mode
(which must equal as the definition of the `FUNCTION_MODE' macro in the
machine description) and ADDR represents the address of the subroutine.

   For a subroutine that returns no value, the `call' expression as
shown above is the entire body of the insn, except that the insn might
also contain `use' or `clobber' expressions.

   For a subroutine that returns a value whose mode is not `BLKmode',
the value is returned in a hard register.  If this register's number is
R, then the body of the call insn looks like this:

     (set (reg:M R)
          (call (mem:FM ADDR) NBYTES))

This RTL expression makes it clear (to the optimizer passes) that the
appropriate register receives a useful value in this insn.

   When a subroutine returns a `BLKmode' value, it is handled by
passing to the subroutine the address of a place to store the value. So
the call insn itself does not "return" any value, and it has the same
RTL form as a call that returns nothing.

   On some machines, the call instruction itself clobbers some register,
for example to contain the return address.  `call_insn' insns on these
machines should have a body which is a `parallel' that contains both
the `call' expression and `clobber' expressions that indicate which
registers are destroyed.  Similarly, if the call instruction requires
some register other than the stack pointer that is not explicitly
mentioned it its RTL, a `use' subexpression should mention that
register.

   Functions that are called are assumed to modify all registers listed
in the configuration macro `CALL_USED_REGISTERS' (see @{"Register Basics" Link "Register Basics"})
and, with the exception of `const' functions and library calls, to
modify all of memory.

   Insns containing just `use' expressions directly precede the
`call_insn' insn to indicate which registers contain inputs to the
function.  Similarly, if registers other than those in
`CALL_USED_REGISTERS' are clobbered by the called function, insns
containing a single `clobber' follow immediately after the call to
indicate which registers.


@EndNode

@Node "Sharing" "gcc.guide/Sharing"
@Prev "Calls"
@Toc "RTL"

Structure Sharing Assumptions
=============================

   The compiler assumes that certain kinds of RTL expressions are
unique; there do not exist two distinct objects representing the same
value. In other cases, it makes an opposite assumption: that no RTL
expression object of a certain kind appears in more than one place in
the containing structure.

   These assumptions refer to a single function; except for the RTL
objects that describe global variables and external functions, and a
few standard objects such as small integer constants, no RTL objects
are common to two functions.

   * Each pseudo-register has only a single `reg' object to represent
     it, and therefore only a single machine mode.

   * For any symbolic label, there is only one `symbol_ref' object
     referring to it.

   * There is only one `const_int' expression with value 0, only one
     with value 1, and only one with value -1. Some other integer
     values are also stored uniquely.

   * There is only one `pc' expression.

   * There is only one `cc0' expression.

   * There is only one `const_double' expression with value 0 for each
     floating point mode.  Likewise for values 1 and 2.

   * No `label_ref' or `scratch' appears in more than one place in the
     RTL structure; in other words, it is safe to do a tree-walk of all
     the insns in the function and assume that each time a `label_ref'
     or `scratch' is seen it is distinct from all others that are seen.

   * Only one `mem' object is normally created for each static variable
     or stack slot, so these objects are frequently shared in all the
     places they appear.  However, separate but equal objects for these
     variables are occasionally made.

   * When a single `asm' statement has multiple output operands, a
     distinct `asm_operands' expression is made for each output operand.
     However, these all share the vector which contains the sequence of
     input operands.  This sharing is used later on to test whether two
     `asm_operands' expressions come from the same statement, so all
     optimizations must carefully preserve the sharing if they copy the
     vector at all.

   * No RTL object appears in more than one place in the RTL structure
     except as described above.  Many passes of the compiler rely on
     this by assuming that they can modify RTL objects in place without
     unwanted side-effects on other insns.

   * During initial RTL generation, shared structure is freely
     introduced. After all the RTL for a function has been generated,
     all shared structure is copied by `unshare_all_rtl' in
     `emit-rtl.c', after which the above rules are guaranteed to be
     followed.

   * During the combiner pass, shared structure within an insn can exist
     temporarily.  However, the shared structure is copied before the
     combiner is finished with the insn.  This is done by calling
     `copy_rtx_if_shared', which is a subroutine of `unshare_all_rtl'.


@EndNode

@Node "Machine Desc" "gcc.guide/Machine Desc"
@Next "Target Macros"
@Prev "RTL"
@Toc "Main"

Machine Descriptions
********************

   A machine description has two parts: a file of instruction patterns
(`.md' file) and a C header file of macro definitions.

   The `.md' file for a target machine contains a pattern for each
instruction that the target machine supports (or at least each
instruction that is worth telling the compiler about).  It may also
contain comments. A semicolon causes the rest of the line to be a
comment, unless the semicolon is inside a quoted string.

   See the next chapter for information on the C header file.


 @{" Patterns " Link "Patterns"}             How to write instruction patterns.
 @{" Example " Link "Example"}              An explained example of a `define_insn' pattern.
 @{" RTL Template " Link "RTL Template"}         The RTL template defines what insns match a pattern.
 @{" Output Template " Link "Output Template"}      The output template says how to make assembler code
                          from such an insn.
 @{" Output Statement " Link "Output Statement"}     For more generality, write C code to output
                          the assembler code.
 @{" Constraints " Link "Constraints"}          When not all operands are general operands.
 @{" Standard Names " Link "Standard Names"}       Names mark patterns to use for code generation.
 @{" Pattern Ordering " Link "Pattern Ordering"}     When the order of patterns makes a difference.
 @{" Dependent Patterns " Link "Dependent Patterns"}   Having one pattern may make you need another.
 @{" Jump Patterns " Link "Jump Patterns"}        Special considerations for patterns for jump insns.
 @{" Insn Canonicalizations " Link "Insn Canonicalizations"} Canonicalization of Instructions
 @{" Peephole Definitions " Link "Peephole Definitions"} Defining machine-specific peephole optimizations.
 @{" Expander Definitions " Link "Expander Definitions"} Generating a sequence of several RTL insns
                         for a standard operation.
 @{" Insn Splitting " Link "Insn Splitting"}     Splitting Instructions into Multiple Instructions
 @{" Insn Attributes " Link "Insn Attributes"}      Specifying the value of attributes for generated insns.


@EndNode

@Node "Patterns" "gcc.guide/Patterns"
@Next "Example"
@Prev "Machine Desc"
@Toc "Machine Desc"

Everything about Instruction Patterns
=====================================

   Each instruction pattern contains an incomplete RTL expression, with
pieces to be filled in later, operand constraints that restrict how the
pieces can be filled in, and an output pattern or C code to generate
the assembler output, all wrapped up in a `define_insn' expression.

   A `define_insn' is an RTL expression containing four or five
operands:

  1. An optional name.  The presence of a name indicate that this
     instruction pattern can perform a certain standard job for the
     RTL-generation pass of the compiler.  This pass knows certain
     names and will use the instruction patterns with those names, if
     the names are defined in the machine description.

     The absence of a name is indicated by writing an empty string
     where the name should go.  Nameless instruction patterns are never
     used for generating RTL code, but they may permit several simpler
     insns to be combined later on.

     Names that are not thus known and used in RTL-generation have no
     effect; they are equivalent to no name at all.

  2. The "RTL template" (see @{"RTL Template" Link "RTL Template"}) is a vector of incomplete
     RTL expressions which show what the instruction should look like. 
     It is incomplete because it may contain `match_operand',
     `match_operator', and `match_dup' expressions that stand for
     operands of the instruction.

     If the vector has only one element, that element is the template
     for the instruction pattern.  If the vector has multiple elements,
     then the instruction pattern is a `parallel' expression containing
     the elements described.

  3. A condition.  This is a string which contains a C expression that
     is the final test to decide whether an insn body matches this
     pattern.

     For a named pattern, the condition (if present) may not depend on
     the data in the insn being matched, but only the
     target-machine-type flags.  The compiler needs to test these
     conditions during initialization in order to learn exactly which
     named instructions are available in a particular run.

     For nameless patterns, the condition is applied only when matching
     an individual insn, and only after the insn has matched the
     pattern's recognition template.  The insn's operands may be found
     in the vector `operands'.

  4. The "output template": a string that says how to output matching
     insns as assembler code.  `%' in this string specifies where to
     substitute the value of an operand.  See @{"Output Template" Link "Output Template"}.

     When simple substitution isn't general enough, you can specify a
     piece of C code to compute the output.  See @{"Output Statement" Link "Output Statement"}.

  5. Optionally, a vector containing the values of attributes for insns
     matching this pattern.  See @{"Insn Attributes" Link "Insn Attributes"}.


@EndNode

@Node "Example" "gcc.guide/Example"
@Next "RTL Template"
@Prev "Patterns"
@Toc "Machine Desc"

Example of `define_insn'
========================

   Here is an actual example of an instruction pattern, for the
68000/68020.

     (define_insn "tstsi"
       [(set (cc0)
             (match_operand:SI 0 "general_operand" "rm"))]
       ""
       "*
     { if (TARGET_68020 || ! ADDRESS_REG_P (operands[0]))
         return \"tstl %0\";
       return \"cmpl #0,%0\"; }")

   This is an instruction that sets the condition codes based on the
value of a general operand.  It has no condition, so any insn whose RTL
description has the form shown may be handled according to this
pattern.  The name `tstsi' means "test a `SImode' value" and tells the
RTL generation pass that, when it is necessary to test such a value, an
insn to do so can be constructed using this pattern.

   The output control string is a piece of C code which chooses which
output template to return based on the kind of operand and the specific
type of CPU for which code is being generated.

   `"rm"' is an operand constraint.  Its meaning is explained below.


@EndNode

@Node "RTL Template" "gcc.guide/RTL Template"
@Next "Output Template"
@Prev "Example"
@Toc "Machine Desc"

RTL Template for Generating and Recognizing Insns
=================================================

   The RTL template is used to define which insns match the particular
pattern and how to find their operands.  For named patterns, the RTL
template also says how to construct an insn from specified operands.

   Construction involves substituting specified operands into a copy of
the template.  Matching involves determining the values that serve as
the operands in the insn being matched.  Both of these activities are
controlled by special expression types that direct matching and
substitution of the operands.

`(match_operand:M N PREDICATE CONSTRAINT)'
     This expression is a placeholder for operand number N of the insn.
      When constructing an insn, operand number N will be substituted
     at this point.  When matching an insn, whatever appears at this
     position in the insn will be taken as operand number N; but it
     must satisfy PREDICATE or this instruction pattern will not match
     at all.

     Operand numbers must be chosen consecutively counting from zero in
     each instruction pattern.  There may be only one `match_operand'
     expression in the pattern for each operand number.  Usually
     operands are numbered in the order of appearance in `match_operand'
     expressions.

     PREDICATE is a string that is the name of a C function that
     accepts two arguments, an expression and a machine mode.  During
     matching, the function will be called with the putative operand as
     the expression and M as the mode argument (if M is not specified,
     `VOIDmode' will be used, which normally causes PREDICATE to accept
     any mode).  If it returns zero, this instruction pattern fails to
     match. PREDICATE may be an empty string; then it means no test is
     to be done on the operand, so anything which occurs in this
     position is valid.

     Most of the time, PREDICATE will reject modes other than M--but
     not always.  For example, the predicate `address_operand' uses M
     as the mode of memory ref that the address should be valid for.
     Many predicates accept `const_int' nodes even though their mode is
     `VOIDmode'.

     CONSTRAINT controls reloading and the choice of the best register
     class to use for a value, as explained later (see @{"Constraints" Link "Constraints"}).

     People are often unclear on the difference between the constraint
     and the predicate.  The predicate helps decide whether a given
     insn matches the pattern.  The constraint plays no role in this
     decision; instead, it controls various decisions in the case of an
     insn which does match.

     On CISC machines, PREDICATE is most often `"general_operand"'.
     This function checks that the putative operand is either a
     constant, a register or a memory reference, and that it is valid
     for mode M.

     For an operand that must be a register, PREDICATE should be
     `"register_operand"'.  It would be valid to use
     `"general_operand"', since the reload pass would copy any
     non-register operands through registers, but this would make GNU
     CC do extra work, it would prevent invariant operands (such as
     constant) from being removed from loops, and it would prevent the
     register allocator from doing the best possible job.  On RISC
     machines, it is usually most efficient to allow PREDICATE to
     accept only objects that the constraints allow.

     For an operand that must be a constant, either use
     `"immediate_operand"' for PREDICATE, or make the instruction
     pattern's extra condition require a constant, or both.  You cannot
     expect the constraints to do this work!  If the constraints allow
     only constants, but the predicate allows something else, the
     compiler will crash when that case arises.

`(match_scratch:M N CONSTRAINT)'
     This expression is also a placeholder for operand number N and
     indicates that operand must be a `scratch' or `reg' expression.

     When matching patterns, this is completely equivalent to

          (match_operand:M N "scratch_operand" PRED)

     but, when generating RTL, it produces a (`scratch':M) expression.

     If the last few expressions in a `parallel' are `clobber'
     expressions whose operands are either a hard register or
     `match_scratch', the combiner can add them when necessary. See
     @{"Side Effects" Link "Side Effects"}.

`(match_dup N)'
     This expression is also a placeholder for operand number N. It is
     used when the operand needs to appear more than once in the insn.

     In construction, `match_dup' behaves exactly like `match_operand':
     the operand is substituted into the insn being constructed.  But
     in matching, `match_dup' behaves differently. It assumes that
     operand number N has already been determined by a `match_operand'
     appearing earlier in the recognition template, and it matches only
     an identical-looking expression.

`(match_operator:M N PREDICATE [OPERANDS...])'
     This pattern is a kind of placeholder for a variable RTL expression
     code.

     When constructing an insn, it stands for an RTL expression whose
     expression code is taken from that of operand N, and whose
     operands are constructed from the patterns OPERANDS.

     When matching an expression, it matches an expression if the
     function PREDICATE returns nonzero on that expression *and* the
     patterns OPERANDS match the operands of the expression.

     Suppose that the function `commutative_operator' is defined as
     follows, to match any expression whose operator is one of the
     commutative arithmetic operators of RTL and whose mode is MODE:

          int
          commutative_operator (x, mode)
               rtx x;
               enum machine_mode mode;
          {
            enum rtx_code code = GET_CODE (x);
            if (GET_MODE (x) != mode)
              return 0;
            return GET_RTX_CLASS (code) == 'c' || code == EQ || code == NE;
          }

     Then the following pattern will match any RTL expression consisting
     of a commutative operator applied to two general operands:

          (match_operator:SI 3 "commutative_operator"
            [(match_operand:SI 1 "general_operand" "g")
             (match_operand:SI 2 "general_operand" "g")])

     Here the vector `[OPERANDS...]' contains two patterns because the
     expressions to be matched all contain two operands.

     When this pattern does match, the two operands of the commutative
     operator are recorded as operands 1 and 2 of the insn.  (This is
     done by the two instances of `match_operand'.)  Operand 3 of the
     insn will be the entire commutative expression: use `GET_CODE
     (operands[3])' to see which commutative operator was used.

     The machine mode M of `match_operator' works like that of
     `match_operand': it is passed as the second argument to the
     predicate function, and that function is solely responsible for
     deciding whether the expression to be matched "has" that mode.

     When constructing an insn, argument 3 of the gen-function will
     specify the operation (i.e. the expression code) for the
     expression to be made.  It should be an RTL expression, whose
     expression code is copied into a new expression whose operands are
     arguments 1 and 2 of the gen-function.  The subexpressions of
     argument 3 are not used; only its expression code matters.

     When `match_operator' is used in a pattern for matching an insn,
     it usually best if the operand number of the `match_operator' is
     higher than that of the actual operands of the insn.  This improves
     register allocation because the register allocator often looks at
     operands 1 and 2 of insns to see if it can do register tying.

     There is no way to specify constraints in `match_operator'.  The
     operand of the insn which corresponds to the `match_operator'
     never has any constraints because it is never reloaded as a whole.
     However, if parts of its OPERANDS are matched by `match_operand'
     patterns, those parts may have constraints of their own.

`(match_parallel N PREDICATE [SUBPAT...])'
     This pattern is a placeholder for an insn that consists of a
     `parallel' expression with a variable number of elements.  This
     expression should only appear at the top level of an insn pattern.

     When constructing an insn, operand number N will be substituted at
     this point.  When matching an insn, it matches if the body of the
     insn is a `parallel' expression with at least as many elements as
     the vector of SUBPAT expressions in the `match_parallel', if each
     SUBPAT matches the corresponding element of the `parallel', *and*
     the function PREDICATE returns nonzero on the `parallel' that is
     the body of the insn.  It is the responsibility of the predicate
     to validate elements of the `parallel' beyond those listed in the
     `match_parallel'.

     A typical use of `match_parallel' is to match load and store
     multiple expressions, which can contains a variable number of
     elements in a `parallel'.  For example,

          (define_insn ""
            [(match_parallel 0 "load_multiple_operation"
          		   [(set (match_operand:SI 1 "gen_reg_operand" "=r")
          			 (match_operand:SI 2 "memory_operand" "m"))
          		    (use (reg:SI 179))
          		    (clobber (reg:SI 179))])]
            ""
            "loadm 0,0,%1,%2")

     This example comes from `a29k.md'.  The function
     `load_multiple_operations' is defined in `a29k.c' and checks that
     subsequent elements in the `parallel' are the same as the `set' in
     the pattern, except that they are referencing subsequent registers
     and memory locations.

     An insn that matches this pattern might look like:

          (parallel [(set (reg:SI 20) (mem:SI (reg:SI 100)))
          	   (use (reg:SI 179))
          	   (clobber (reg:SI 179))
          	   (set (reg:SI 21) (mem:SI (plus:SI (reg:SI 100) (const_int 4))))
          	   (set (reg:SI 22) (mem:SI (plus:SI (reg:SI 100) (const_int 8))))])

`(address (match_operand:M N "address_operand" ""))'
     This complex of expressions is a placeholder for an operand number
     N in a "load address" instruction: an operand which specifies a
     memory location in the usual way, but for which the actual operand
     value used is the address of the location, not the contents of the
     location.

     `address' expressions never appear in RTL code, only in machine
     descriptions.  And they are used only in machine descriptions that
     do not use the operand constraint feature.  When operand
     constraints are in use, the letter `p' in the constraint serves
     this purpose.

     M is the machine mode of the *memory location being addressed*,
     not the machine mode of the address itself.  That mode is always
     the same on a given target machine (it is `Pmode', which normally
     is `SImode'), so there is no point in mentioning it; thus, no
     machine mode is written in the `address' expression.  If some day
     support is added for machines in which addresses of different
     kinds of objects appear differently or are used differently (such
     as the PDP-10), different formats would perhaps need different
     machine modes and these modes might be written in the `address'
     expression.


@EndNode

@Node "Output Template" "gcc.guide/Output Template"
@Next "Output Statement"
@Prev "RTL Template"
@Toc "Machine Desc"

Output Templates and Operand Substitution
=========================================

   The "output template" is a string which specifies how to output the
assembler code for an instruction pattern.  Most of the template is a
fixed string which is output literally.  The character `%' is used to
specify where to substitute an operand; it can also be used to identify
places where different variants of the assembler require different
syntax.

   In the simplest case, a `%' followed by a digit N says to output
operand N at that point in the string.

   `%' followed by a letter and a digit says to output an operand in an
alternate fashion.  Four letters have standard, built-in meanings
described below.  The machine description macro `PRINT_OPERAND' can
define additional letters with nonstandard meanings.

   `%cDIGIT' can be used to substitute an operand that is a constant
value without the syntax that normally indicates an immediate operand.

   `%nDIGIT' is like `%cDIGIT' except that the value of the constant is
negated before printing.

   `%aDIGIT' can be used to substitute an operand as if it were a
memory reference, with the actual operand treated as the address.  This
may be useful when outputting a "load address" instruction, because
often the assembler syntax for such an instruction requires you to
write the operand as if it were a memory reference.

   `%lDIGIT' is used to substitute a `label_ref' into a jump
instruction.

   `%' followed by a punctuation character specifies a substitution that
does not use an operand.  Only one case is standard: `%%' outputs a `%'
into the assembler code.  Other nonstandard cases can be defined in the
`PRINT_OPERAND' macro.  You must also define which punctuation
characters are valid with the `PRINT_OPERAND_PUNCT_VALID_P' macro.

   The template may generate multiple assembler instructions.  Write
the text for the instructions, with `\;' between them.

   When the RTL contains two operands which are required by constraint
to match each other, the output template must refer only to the
lower-numbered operand. Matching operands are not always identical, and
the rest of the compiler arranges to put the proper RTL expression for
printing into the lower-numbered operand.

   One use of nonstandard letters or punctuation following `%' is to
distinguish between different assembler languages for the same machine;
for example, Motorola syntax versus MIT syntax for the 68000.  Motorola
syntax requires periods in most opcode names, while MIT syntax does
not.  For example, the opcode `movel' in MIT syntax is `move.l' in
Motorola syntax.  The same file of patterns is used for both kinds of
output syntax, but the character sequence `%.' is used in each place
where Motorola syntax wants a period.  The `PRINT_OPERAND' macro for
Motorola syntax defines the sequence to output a period; the macro for
MIT syntax defines it to do nothing.


@EndNode

@Node "Output Statement" "gcc.guide/Output Statement"
@Next "Constraints"
@Prev "Output Template"
@Toc "Machine Desc"

C Statements for Generating Assembler Output
============================================

   Often a single fixed template string cannot produce correct and
efficient assembler code for all the cases that are recognized by a
single instruction pattern.  For example, the opcodes may depend on the
kinds of operands; or some unfortunate combinations of operands may
require extra machine instructions.

   If the output control string starts with a `@', then it is actually
a series of templates, each on a separate line.  (Blank lines and
leading spaces and tabs are ignored.)  The templates correspond to the
pattern's constraint alternatives (see @{"Multi-Alternative" Link "Multi-Alternative"}).  For example,
if a target machine has a two-address add instruction `addr' to add
into a register and another `addm' to add a register to memory, you
might write this pattern:

     (define_insn "addsi3"
       [(set (match_operand:SI 0 "general_operand" "=r,m")
             (plus:SI (match_operand:SI 1 "general_operand" "0,0")
                      (match_operand:SI 2 "general_operand" "g,r")))]
       ""
       "@
        addr %1,%0
        addm %1,%0")

   If the output control string starts with a `*', then it is not an
output template but rather a piece of C program that should compute a
template.  It should execute a `return' statement to return the
template-string you want.  Most such templates use C string literals,
which require doublequote characters to delimit them.  To include these
doublequote characters in the string, prefix each one with `\'.

   The operands may be found in the array `operands', whose C data type
is `rtx []'.

   It is very common to select different ways of generating assembler
code based on whether an immediate operand is within a certain range. 
Be careful when doing this, because the result of `INTVAL' is an
integer on the host machine.  If the host machine has more bits in an
`int' than the target machine has in the mode in which the constant
will be used, then some of the bits you get from `INTVAL' will be
superfluous.  For proper results, you must carefully disregard the
values of those bits.

   It is possible to output an assembler instruction and then go on to
output or compute more of them, using the subroutine `output_asm_insn'.
 This receives two arguments: a template-string and a vector of
operands.  The vector may be `operands', or it may be another array of
`rtx' that you declare locally and initialize yourself.

   When an insn pattern has multiple alternatives in its constraints,
often the appearance of the assembler code is determined mostly by
which alternative was matched.  When this is so, the C code can test
the variable `which_alternative', which is the ordinal number of the
alternative that was actually satisfied (0 for the first, 1 for the
second alternative, etc.).

   For example, suppose there are two opcodes for storing zero, `clrreg'
for registers and `clrmem' for memory locations.  Here is how a pattern
could use `which_alternative' to choose between them:

     (define_insn ""
       [(set (match_operand:SI 0 "general_operand" "=r,m")
             (const_int 0))]
       ""
       "*
       return (which_alternative == 0
               ? \"clrreg %0\" : \"clrmem %0\");
       ")

   The example above, where the assembler code to generate was *solely*
determined by the alternative, could also have been specified as
follows, having the output control string start with a `@':

     (define_insn ""
       [(set (match_operand:SI 0 "general_operand" "=r,m")
             (const_int 0))]
       ""
       "@
        clrreg %0
        clrmem %0")


@EndNode

@Node "Constraints" "gcc.guide/Constraints"
@Next "Standard Names"
@Prev "Output Statement"
@Toc "Machine Desc"

Operand Constraints
===================

   Each `match_operand' in an instruction pattern can specify a
constraint for the type of operands allowed.  Constraints can say
whether an operand may be in a register, and which kinds of register;
whether the operand can be a memory reference, and which kinds of
address; whether the operand may be an immediate constant, and which
possible values it may have.  Constraints can also require two operands
to match.


 @{" Simple Constraints " Link "Simple Constraints"}   Basic use of constraints.
 @{" Multi-Alternative " Link "Multi-Alternative"}    When an insn has two alternative constraint-patterns.
 @{" Class Preferences " Link "Class Preferences"}    Constraints guide which hard register to put things in.
 @{" Modifiers " Link "Modifiers"}            More precise control over effects of constraints.
 @{" No Constraints " Link "No Constraints"}       Describing a clean machine without constraints.


@EndNode

@Node "Simple Constraints" "gcc.guide/Simple Constraints"
@Next "Multi-Alternative"
@Prev "Constraints"
@Toc "Constraints"

Simple Constraints
------------------

   The simplest kind of constraint is a string full of letters, each of
which describes one kind of operand that is permitted.  Here are the
letters that are allowed:

`m'
     A memory operand is allowed, with any kind of address that the
     machine supports in general.

`o'
     A memory operand is allowed, but only if the address is
     "offsettable".  This means that adding a small integer (actually,
     the width in bytes of the operand, as determined by its machine
     mode) may be added to the address and the result is also a valid
     memory address.

     For example, an address which is constant is offsettable; so is an
     address that is the sum of a register and a constant (as long as a
     slightly larger constant is also within the range of
     address-offsets supported by the machine); but an autoincrement or
     autodecrement address is not offsettable.  More complicated
     indirect/indexed addresses may or may not be offsettable depending
     on the other addressing modes that the machine supports.

     Note that in an output operand which can be matched by another
     operand, the constraint letter `o' is valid only when accompanied
     by both `<' (if the target machine has predecrement addressing)
     and `>' (if the target machine has preincrement addressing).

`V'
     A memory operand that is not offsettable.  In other words,
     anything that would fit the `m' constraint but not the `o'
     constraint.

`<'
     A memory operand with autodecrement addressing (either
     predecrement or postdecrement) is allowed.

`>'
     A memory operand with autoincrement addressing (either
     preincrement or postincrement) is allowed.

`r'
     A register operand is allowed provided that it is in a general
     register.

`d', `a', `f', ...
     Other letters can be defined in machine-dependent fashion to stand
     for particular classes of registers.  `d', `a' and `f' are defined
     on the 68000/68020 to stand for data, address and floating point
     registers.

`i'
     An immediate integer operand (one with constant value) is allowed.
     This includes symbolic constants whose values will be known only at
     assembly time.

`n'
     An immediate integer operand with a known numeric value is allowed.
     Many systems cannot support assembly-time constants for operands
     less than a word wide.  Constraints for these operands should use
     `n' rather than `i'.

`I', `J', `K', ... `P'
     Other letters in the range `I' through `P' may be defined in a
     machine-dependent fashion to permit immediate integer operands with
     explicit integer values in specified ranges.  For example, on the
     68000, `I' is defined to stand for the range of values 1 to 8.
     This is the range permitted as a shift count in the shift
     instructions.

`E'
     An immediate floating operand (expression code `const_double') is
     allowed, but only if the target floating point format is the same
     as that of the host machine (on which the compiler is running).

`F'
     An immediate floating operand (expression code `const_double') is
     allowed.

`G', `H'
     `G' and `H' may be defined in a machine-dependent fashion to
     permit immediate floating operands in particular ranges of values.

`s'
     An immediate integer operand whose value is not an explicit
     integer is allowed.

     This might appear strange; if an insn allows a constant operand
     with a value not known at compile time, it certainly must allow
     any known value.  So why use `s' instead of `i'?  Sometimes it
     allows better code to be generated.

     For example, on the 68000 in a fullword instruction it is possible
     to use an immediate operand; but if the immediate value is between
     -128 and 127, better code results from loading the value into a
     register and using the register.  This is because the load into
     the register can be done with a `moveq' instruction.  We arrange
     for this to happen by defining the letter `K' to mean "any integer
     outside the range -128 to 127", and then specifying `Ks' in the
     operand constraints.

`g'
     Any register, memory or immediate integer operand is allowed,
     except for registers that are not general registers.

`X'
     Any operand whatsoever is allowed, even if it does not satisfy
     `general_operand'.  This is normally used in the constraint of a
     `match_scratch' when certain alternatives will not actually
     require a scratch register.

`0', `1', `2', ... `9'
     An operand that matches the specified operand number is allowed. 
     If a digit is used together with letters within the same
     alternative, the digit should come last.

     This is called a "matching constraint" and what it really means is
     that the assembler has only a single operand that fills two roles
     considered separate in the RTL insn.  For example, an add insn has
     two input operands and one output operand in the RTL, but on most
     CISC machines an add instruction really has only two operands, one
     of them an input-output operand:

          addl #35,r12

     Matching constraints are used in these circumstances. More
     precisely, the two operands that match must include one input-only
     operand and one output-only operand.  Moreover, the digit must be a
     smaller number than the number of the operand that uses it in the
     constraint.

     For operands to match in a particular case usually means that they
     are identical-looking RTL expressions.  But in a few special cases
     specific kinds of dissimilarity are allowed.  For example, `*x' as
     an input operand will match `*x++' as an output operand. For
     proper results in such cases, the output template should always
     use the output-operand's number when printing the operand.

`p'
     An operand that is a valid memory address is allowed.  This is for
     "load address" and "push address" instructions.

     `p' in the constraint must be accompanied by `address_operand' as
     the predicate in the `match_operand'.  This predicate interprets
     the mode specified in the `match_operand' as the mode of the memory
     reference for which the address would be valid.

`Q', `R', `S', ... `U'
     Letters in the range `Q' through `U' may be defined in a
     machine-dependent fashion to stand for arbitrary operand types.
     The machine description macro `EXTRA_CONSTRAINT' is passed the
     operand as its first argument and the constraint letter as its
     second operand.

     A typical use for this would be to distinguish certain types of
     memory references that affect other insn operands.

     Do not define these constraint letters to accept register
     references (`reg'); the reload pass does not expect this and would
     not handle it properly.

   In order to have valid assembler code, each operand must satisfy its
constraint.  But a failure to do so does not prevent the pattern from
applying to an insn.  Instead, it directs the compiler to modify the
code so that the constraint will be satisfied.  Usually this is done by
copying an operand into a register.

   Contrast, therefore, the two instruction patterns that follow:

     (define_insn ""
       [(set (match_operand:SI 0 "general_operand" "=r")
             (plus:SI (match_dup 0)
                      (match_operand:SI 1 "general_operand" "r")))]
       ""
       "...")

which has two operands, one of which must appear in two places, and

     (define_insn ""
       [(set (match_operand:SI 0 "general_operand" "=r")
             (plus:SI (match_operand:SI 1 "general_operand" "0")
                      (match_operand:SI 2 "general_operand" "r")))]
       ""
       "...")

which has three operands, two of which are required by a constraint to
be identical.  If we are considering an insn of the form

     (insn N PREV NEXT
       (set (reg:SI 3)
            (plus:SI (reg:SI 6) (reg:SI 109)))
       ...)

the first pattern would not apply at all, because this insn does not
contain two identical subexpressions in the right place.  The pattern
would say, "That does not look like an add instruction; try other
patterns." The second pattern would say, "Yes, that's an add
instruction, but there is something wrong with it."  It would direct
the reload pass of the compiler to generate additional insns to make
the constraint true.  The results might look like this:

     (insn N2 PREV N
       (set (reg:SI 3) (reg:SI 6))
       ...)
     
     (insn N N2 NEXT
       (set (reg:SI 3)
            (plus:SI (reg:SI 3) (reg:SI 109)))
       ...)

   It is up to you to make sure that each operand, in each pattern, has
constraints that can handle any RTL expression that could be present for
that operand.  (When multiple alternatives are in use, each pattern
must, for each possible combination of operand expressions, have at
least one alternative which can handle that combination of operands.) 
The constraints don't need to *allow* any possible operand--when this is
the case, they do not constrain--but they must at least point the way to
reloading any possible operand so that it will fit.

   * If the constraint accepts whatever operands the predicate permits,
     there is no problem: reloading is never necessary for this operand.

     For example, an operand whose constraints permit everything except
     registers is safe provided its predicate rejects registers.

     An operand whose predicate accepts only constant values is safe
     provided its constraints include the letter `i'.  If any possible
     constant value is accepted, then nothing less than `i' will do; if
     the predicate is more selective, then the constraints may also be
     more selective.

   * Any operand expression can be reloaded by copying it into a
     register. So if an operand's constraints allow some kind of
     register, it is certain to be safe.  It need not permit all
     classes of registers; the compiler knows how to copy a register
     into another register of the proper class in order to make an
     instruction valid.

   * A nonoffsettable memory reference can be reloaded by copying the
     address into a register.  So if the constraint uses the letter
     `o', all memory references are taken care of.

   * A constant operand can be reloaded by allocating space in memory to
     hold it as preinitialized data.  Then the memory reference can be
     used in place of the constant.  So if the constraint uses the
     letters `o' or `m', constant operands are not a problem.

   * If the constraint permits a constant and a pseudo register used in
     an insn was not allocated to a hard register and is equivalent to
     a constant, the register will be replaced with the constant.  If
     the predicate does not permit a constant and the insn is
     re-recognized for some reason, the compiler will crash.  Thus the
     predicate must always recognize any objects allowed by the
     constraint.

   If the operand's predicate can recognize registers, but the
constraint does not permit them, it can make the compiler crash.  When
this operand happens to be a register, the reload pass will be stymied,
because it does not know how to copy a register temporarily into memory.


@EndNode

@Node "Multi-Alternative" "gcc.guide/Multi-Alternative"
@Next "Class Preferences"
@Prev "Simple Constraints"
@Toc "Constraints"

Multiple Alternative Constraints
--------------------------------

   Sometimes a single instruction has multiple alternative sets of
possible operands.  For example, on the 68000, a logical-or instruction
can combine register or an immediate value into memory, or it can
combine any kind of operand into a register; but it cannot combine one
memory location into another.

   These constraints are represented as multiple alternatives.  An
alternative can be described by a series of letters for each operand. 
The overall constraint for an operand is made from the letters for this
operand from the first alternative, a comma, the letters for this
operand from the second alternative, a comma, and so on until the last
alternative. Here is how it is done for fullword logical-or on the
68000:

     (define_insn "iorsi3"
       [(set (match_operand:SI 0 "general_operand" "=m,d")
             (ior:SI (match_operand:SI 1 "general_operand" "%0,0")
                     (match_operand:SI 2 "general_operand" "dKs,dmKs")))]
       ...)

   The first alternative has `m' (memory) for operand 0, `0' for
operand 1 (meaning it must match operand 0), and `dKs' for operand 2. 
The second alternative has `d' (data register) for operand 0, `0' for
operand 1, and `dmKs' for operand 2.  The `=' and `%' in the
constraints apply to all the alternatives; their meaning is explained
in the next section (see @{"Class Preferences" Link "Class Preferences"}).

   If all the operands fit any one alternative, the instruction is
valid. Otherwise, for each alternative, the compiler counts how many
instructions must be added to copy the operands so that that
alternative applies. The alternative requiring the least copying is
chosen.  If two alternatives need the same amount of copying, the one
that comes first is chosen. These choices can be altered with the `?'
and `!' characters:

`?'
     Disparage slightly the alternative that the `?' appears in, as a
     choice when no alternative applies exactly.  The compiler regards
     this alternative as one unit more costly for each `?' that appears
     in it.

`!'
     Disparage severely the alternative that the `!' appears in. This
     alternative can still be used if it fits without reloading, but if
     reloading is needed, some other alternative will be used.

   When an insn pattern has multiple alternatives in its constraints,
often the appearance of the assembler code is determined mostly by which
alternative was matched.  When this is so, the C code for writing the
assembler code can use the variable `which_alternative', which is the
ordinal number of the alternative that was actually satisfied (0 for
the first, 1 for the second alternative, etc.).  See @{"Output Statement" Link "Output Statement"}.


@EndNode

@Node "Class Preferences" "gcc.guide/Class Preferences"
@Next "Modifiers"
@Prev "Multi-Alternative"
@Toc "Constraints"

Register Class Preferences
--------------------------

   The operand constraints have another function: they enable the
compiler to decide which kind of hardware register a pseudo register is
best allocated to.  The compiler examines the constraints that apply to
the insns that use the pseudo register, looking for the
machine-dependent letters such as `d' and `a' that specify classes of
registers. The pseudo register is put in whichever class gets the most
"votes". The constraint letters `g' and `r' also vote: they vote in
favor of a general register.  The machine description says which
registers are considered general.

   Of course, on some machines all registers are equivalent, and no
register classes are defined.  Then none of this complexity is relevant.


@EndNode

@Node "Modifiers" "gcc.guide/Modifiers"
@Next "No Constraints"
@Prev "Class Preferences"
@Toc "Constraints"

Constraint Modifier Characters
------------------------------

`='
     Means that this operand is write-only for this instruction: the
     previous value is discarded and replaced by output data.

`+'
     Means that this operand is both read and written by the
     instruction.

     When the compiler fixes up the operands to satisfy the constraints,
     it needs to know which operands are inputs to the instruction and
     which are outputs from it.  `=' identifies an output; `+'
     identifies an operand that is both input and output; all other
     operands are assumed to be input only.

`&'
     Means (in a particular alternative) that this operand is written
     before the instruction is finished using the input operands.
     Therefore, this operand may not lie in a register that is used as
     an input operand or as part of any memory address.

     `&' applies only to the alternative in which it is written.  In
     constraints with multiple alternatives, sometimes one alternative
     requires `&' while others do not.  See, for example, the `movdf'
     insn of the 68000.

     `&' does not obviate the need to write `='.

`%'
     Declares the instruction to be commutative for this operand and the
     following operand.  This means that the compiler may interchange
     the two operands if that is the cheapest way to make all operands
     fit the constraints.  This is often used in patterns for addition
     instructions that really have only two operands: the result must
     go in one of the arguments.  Here for example, is how the 68000
     halfword-add instruction is defined:

          (define_insn "addhi3"
            [(set (match_operand:HI 0 "general_operand" "=m,r")
               (plus:HI (match_operand:HI 1 "general_operand" "%0,0")
                        (match_operand:HI 2 "general_operand" "di,g")))]
            ...)

`#'
     Says that all following characters, up to the next comma, are to be
     ignored as a constraint.  They are significant only for choosing
     register preferences.

`*'
     Says that the following character should be ignored when choosing
     register preferences.  `*' has no effect on the meaning of the
     constraint as a constraint, and no effect on reloading.

     Here is an example: the 68000 has an instruction to sign-extend a
     halfword in a data register, and can also sign-extend a value by
     copying it into an address register.  While either kind of
     register is acceptable, the constraints on an address-register
     destination are less strict, so it is best if register allocation
     makes an address register its goal.  Therefore, `*' is used so
     that the `d' constraint letter (for data register) is ignored when
     computing register preferences.

          (define_insn "extendhisi2"
            [(set (match_operand:SI 0 "general_operand" "=*d,a")
                  (sign_extend:SI
                   (match_operand:HI 1 "general_operand" "0,g")))]
            ...)


@EndNode

@Node "No Constraints" "gcc.guide/No Constraints"
@Prev "Modifiers"
@Toc "Constraints"

Not Using Constraints
---------------------

   Some machines are so clean that operand constraints are not
required.  For example, on the Vax, an operand valid in one context is
valid in any other context.  On such a machine, every operand
constraint would be `g', excepting only operands of "load address"
instructions which are written as if they referred to a memory
location's contents but actual refer to its address.  They would have
constraint `p'.

   For such machines, instead of writing `g' and `p' for all the
constraints, you can choose to write a description with empty
constraints. Then you write `""' for the constraint in every
`match_operand'. Address operands are identified by writing an
`address' expression around the `match_operand', not by their
constraints.

   When the machine description has just empty constraints, certain
parts of compilation are skipped, making the compiler faster.  However,
few machines actually do not need constraints; all machine descriptions
now in existence use constraints.


@EndNode

@Node "Standard Names" "gcc.guide/Standard Names"
@Next "Pattern Ordering"
@Prev "Constraints"
@Toc "Machine Desc"

Standard Names for Patterns Used in Generation
==============================================

   Here is a table of the instruction names that are meaningful in the
RTL generation pass of the compiler.  Giving one of these names to an
instruction pattern tells the RTL generation pass that it can use the
pattern in to accomplish a certain task.

`movM'
     Here M stands for a two-letter machine mode name, in lower case.
     This instruction pattern moves data with that machine mode from
     operand 1 to operand 0.  For example, `movsi' moves full-word data.

     If operand 0 is a `subreg' with mode M of a register whose own
     mode is wider than M, the effect of this instruction is to store
     the specified value in the part of the register that corresponds
     to mode M.  The effect on the rest of the register is undefined.

     This class of patterns is special in several ways.  First of all,
     each of these names *must* be defined, because there is no other
     way to copy a datum from one place to another.

     Second, these patterns are not used solely in the RTL generation
     pass. Even the reload pass can generate move insns to copy values
     from stack slots into temporary registers.  When it does so, one
     of the operands is a hard register and the other is an operand
     that can need to be reloaded into a register.

     Therefore, when given such a pair of operands, the pattern must
     generate RTL which needs no reloading and needs no temporary
     registers--no registers other than the operands.  For example, if
     you support the pattern with a `define_expand', then in such a
     case the `define_expand' mustn't call `force_reg' or any other such
     function which might generate new pseudo registers.

     This requirement exists even for subword modes on a RISC machine
     where fetching those modes from memory normally requires several
     insns and some temporary registers.  Look in `spur.md' to see how
     the requirement can be satisfied.

     During reload a memory reference with an invalid address may be
     passed as an operand.  Such an address will be replaced with a
     valid address later in the reload pass.  In this case, nothing may
     be done with the address except to use it as it stands.  If it is
     copied, it will not be replaced with a valid address.  No attempt
     should be made to make such an address into a valid address and no
     routine (such as `change_address') that will do so may be called. 
     Note that `general_operand' will fail when applied to such an
     address.

     The global variable `reload_in_progress' (which must be explicitly
     declared if required) can be used to determine whether such special
     handling is required.

     The variety of operands that have reloads depends on the rest of
     the machine description, but typically on a RISC machine these can
     only be pseudo registers that did not get hard registers, while on
     other machines explicit memory references will get optional
     reloads.

     If a scratch register is required to move an object to or from
     memory, it can be allocated using `gen_reg_rtx' prior to reload. 
     But this is impossible during and after reload.  If there are
     cases needing scratch registers after reload, you must define
     `SECONDARY_INPUT_RELOAD_CLASS' and/or
     `SECONDARY_OUTPUT_RELOAD_CLASS' to detect them, and provide
     patterns `reload_inM' or `reload_outM' to handle them.  See
     @{"Register Classes" Link "Register Classes"}.

     The constraints on a `moveM' must permit moving any hard register
     to any other hard register provided that `HARD_REGNO_MODE_OK'
     permits mode M in both registers and `REGISTER_MOVE_COST' applied
     to their classes returns a value of 2.

     It is obligatory to support floating point `moveM' instructions
     into and out of any registers that can hold fixed point values,
     because unions and structures (which have modes `SImode' or
     `DImode') can be in those registers and they may have floating
     point members.

     There may also be a need to support fixed point `moveM'
     instructions in and out of floating point registers. 
     Unfortunately, I have forgotten why this was so, and I don't know
     whether it is still true.  If `HARD_REGNO_MODE_OK' rejects fixed
     point values in floating point registers, then the constraints of
     the fixed point `moveM' instructions must be designed to avoid
     ever trying to reload into a floating point register.

`reload_inM'
`reload_outM'
     Like `movM', but used when a scratch register is required to move
     between operand 0 and operand 1.  Operand 2 describes the scratch
     register.  See the discussion of the `SECONDARY_RELOAD_CLASS'
     macro in see @{"Register Classes" Link "Register Classes"}.

`movstrictM'
     Like `movM' except that if operand 0 is a `subreg' with mode M of
     a register whose natural mode is wider, the `movstrictM'
     instruction is guaranteed not to alter any of the register except
     the part which belongs to mode M.

`load_multiple'
     Load several consecutive memory locations into consecutive
     registers. Operand 0 is the first of the consecutive registers,
     operand 1 is the first memory location, and operand 2 is a
     constant: the number of consecutive registers.

     Define this only if the target machine really has such an
     instruction; do not define this if the most efficient way of
     loading consecutive registers from memory is to do them one at a
     time.

     On some machines, there are restrictions as to which consecutive
     registers can be stored into memory, such as particular starting or
     ending register numbers or only a range of valid counts.  For those
     machines, use a `define_expand' (see @{"Expander Definitions" Link "Expander Definitions"}) and
     make the pattern fail if the restrictions are not met.

     Write the generated insn as a `parallel' with elements being a
     `set' of one register from the appropriate memory location (you may
     also need `use' or `clobber' elements).  Use a `match_parallel'
     (see @{"RTL Template" Link "RTL Template"}) to recognize the insn.  See `a29k.md' and
     `rs6000.md' for examples of the use of this insn pattern.

`store_multiple'
     Similar to `load_multiple', but store several consecutive registers
     into consecutive memory locations.  Operand 0 is the first of the
     consecutive memory locations, operand 1 is the first register, and
     operand 2 is a constant: the number of consecutive registers.

`addM3'
     Add operand 2 and operand 1, storing the result in operand 0.  All
     operands must have mode M.  This can be used even on two-address
     machines, by means of constraints requiring operands 1 and 0 to be
     the same location.

`subM3', `mulM3'
`divM3', `udivM3', `modM3', `umodM3'
`sminM3', `smaxM3', `uminM3', `umaxM3'
`andM3', `iorM3', `xorM3'
     Similar, for other arithmetic operations.

`mulhisi3'
     Multiply operands 1 and 2, which have mode `HImode', and store a
     `SImode' product in operand 0.

`mulqihi3', `mulsidi3'
     Similar widening-multiplication instructions of other widths.

`umulqihi3', `umulhisi3', `umulsidi3'
     Similar widening-multiplication instructions that do unsigned
     multiplication.

`divmodM4'
     Signed division that produces both a quotient and a remainder.
     Operand 1 is divided by operand 2 to produce a quotient stored in
     operand 0 and a remainder stored in operand 3.

     For machines with an instruction that produces both a quotient and
     a remainder, provide a pattern for `divmodM4' but do not provide
     patterns for `divM3' and `modM3'.  This allows optimization in the
     relatively common case when both the quotient and remainder are
     computed.

     If an instruction that just produces a quotient or just a remainder
     exists and is more efficient than the instruction that produces
     both, write the output routine of `divmodM4' to call
     `find_reg_note' and look for a `REG_UNUSED' note on the quotient
     or remainder and generate the appropriate instruction.

`udivmodM4'
     Similar, but does unsigned division.

`ashlM3'
     Arithmetic-shift operand 1 left by a number of bits specified by
     operand 2, and store the result in operand 0.  Here M is the mode
     of operand 0 and operand 1; operand 2's mode is specified by the
     instruction pattern, and the compiler will convert the operand to
     that mode before generating the instruction.

`ashrM3', `lshlM3', `lshrM3', `rotlM3', `rotrM3'
     Other shift and rotate instructions, analogous to the `ashlM3'
     instructions.

     Logical and arithmetic left shift are the same.  Machines that do
     not allow negative shift counts often have only one instruction for
     shifting left.  On such machines, you should define a pattern named
     `ashlM3' and leave `lshlM3' undefined.

`negM2'
     Negate operand 1 and store the result in operand 0.

`absM2'
     Store the absolute value of operand 1 into operand 0.

`sqrtM2'
     Store the square root of operand 1 into operand 0.

     The `sqrt' built-in function of C always uses the mode which
     corresponds to the C data type `double'.

`ffsM2'
     Store into operand 0 one plus the index of the least significant
     1-bit of operand 1.  If operand 1 is zero, store zero.  M is the
     mode of operand 0; operand 1's mode is specified by the instruction
     pattern, and the compiler will convert the operand to that mode
     before generating the instruction.

     The `ffs' built-in function of C always uses the mode which
     corresponds to the C data type `int'.

`one_cmplM2'
     Store the bitwise-complement of operand 1 into operand 0.

`cmpM'
     Compare operand 0 and operand 1, and set the condition codes. The
     RTL pattern should look like this:

          (set (cc0) (compare (match_operand:M 0 ...)
                              (match_operand:M 1 ...)))

`tstM'
     Compare operand 0 against zero, and set the condition codes. The
     RTL pattern should look like this:

          (set (cc0) (match_operand:M 0 ...))

     `tstM' patterns should not be defined for machines that do not use
     `(cc0)'.  Doing so would confuse the optimizer since it would no
     longer be clear which `set' operations were comparisons. The
     `cmpM' patterns should be used instead.

`movstrM'
     Block move instruction.  The addresses of the destination and
     source strings are the first two operands, and both are in mode
     `Pmode'. The number of bytes to move is the third operand, in mode
     M.

     The fourth operand is the known shared alignment of the source and
     destination, in the form of a `const_int' rtx.  Thus, if the
     compiler knows that both source and destination are word-aligned,
     it may provide the value 4 for this operand.

     These patterns need not give special consideration to the
     possibility that the source and destination strings might overlap.

`cmpstrM'
     Block compare instruction, with five operands.  Operand 0 is the
     output; it has mode M.  The remaining four operands are like the
     operands of `movstrM'.  The two memory blocks specified are
     compared byte by byte in lexicographic order.  The effect of the
     instruction is to store a value in operand 0 whose sign indicates
     the result of the comparison.

`floatMN2'
     Convert signed integer operand 1 (valid for fixed point mode M) to
     floating point mode N and store in operand 0 (which has mode N).

`floatunsMN2'
     Convert unsigned integer operand 1 (valid for fixed point mode M)
     to floating point mode N and store in operand 0 (which has mode N).

`fixMN2'
     Convert operand 1 (valid for floating point mode M) to fixed point
     mode N as a signed number and store in operand 0 (which has mode
     N).  This instruction's result is defined only when the value of
     operand 1 is an integer.

`fixunsMN2'
     Convert operand 1 (valid for floating point mode M) to fixed point
     mode N as an unsigned number and store in operand 0 (which has
     mode N).  This instruction's result is defined only when the value
     of operand 1 is an integer.

`ftruncM2'
     Convert operand 1 (valid for floating point mode M) to an integer
     value, still represented in floating point mode M, and store it in
     operand 0 (valid for floating point mode M).

`fix_truncMN2'
     Like `fixMN2' but works for any floating point value of mode M by
     converting the value to an integer.

`fixuns_truncMN2'
     Like `fixunsMN2' but works for any floating point value of mode M
     by converting the value to an integer.

`truncMN'
     Truncate operand 1 (valid for mode M) to mode N and store in
     operand 0 (which has mode N).  Both modes must be fixed point or
     both floating point.

`extendMN'
     Sign-extend operand 1 (valid for mode M) to mode N and store in
     operand 0 (which has mode N).  Both modes must be fixed point or
     both floating point.

`zero_extendMN'
     Zero-extend operand 1 (valid for mode M) to mode N and store in
     operand 0 (which has mode N).  Both modes must be fixed point.

`extv'
     Extract a bit field from operand 1 (a register or memory operand),
     where operand 2 specifies the width in bits and operand 3 the
     starting bit, and store it in operand 0.  Operand 0 must have mode
     `word_mode'. Operand 1 may have mode `byte_mode' or `word_mode';
     often `word_mode' is allowed only for registers.  Operands 2 and 3
     must be valid for `word_mode'.

     The RTL generation pass generates this instruction only with
     constants for operands 2 and 3.

     The bit-field value is sign-extended to a full word integer before
     it is stored in operand 0.

`extzv'
     Like `extv' except that the bit-field value is zero-extended.

`insv'
     Store operand 3 (which must be valid for `word_mode') into a bit
     field in operand 0, where operand 1 specifies the width in bits and
     operand 2 the starting bit.  Operand 0 may have mode `byte_mode' or
     `word_mode'; often `word_mode' is allowed only for registers.
     Operands 1 and 2 must be valid for `word_mode'.

     The RTL generation pass generates this instruction only with
     constants for operands 1 and 2.

`sCOND'
     Store zero or nonzero in the operand according to the condition
     codes. Value stored is nonzero iff the condition COND is true.
     COND is the name of a comparison operation expression code, such
     as `eq', `lt' or `leu'.

     You specify the mode that the operand must have when you write the
     `match_operand' expression.  The compiler automatically sees which
     mode you have used and supplies an operand of that mode.

     The value stored for a true condition must have 1 as its low bit,
     or else must be negative.  Otherwise the instruction is not
     suitable and you should omit it from the machine description.  You
     describe to the compiler exactly which value is stored by defining
     the macro `STORE_FLAG_VALUE' (see @{"Misc" Link "Misc"}).  If a description cannot
     be found that can be used for all the `sCOND' patterns, you should
     omit those operations from the machine description.

     These operations may fail, but should do so only in relatively
     uncommon cases; if they would fail for common cases involving
     integer comparisons, it is best to omit these patterns.

     If these operations are omitted, the compiler will usually
     generate code that copies the constant one to the target and
     branches around an assignment of zero to the target.  If this code
     is more efficient than the potential instructions used for the
     `sCOND' pattern followed by those required to convert the result
     into a 1 or a zero in `SImode', you should omit the `sCOND'
     operations from the machine description.

`bCOND'
     Conditional branch instruction.  Operand 0 is a `label_ref' that
     refers to the label to jump to.  Jump if the condition codes meet
     condition COND.

     Some machines do not follow the model assumed here where a
     comparison instruction is followed by a conditional branch
     instruction.  In that case, the `cmpM' (and `tstM') patterns should
     simply store the operands away and generate all the required insns
     in a `define_expand' (see @{"Expander Definitions" Link "Expander Definitions"}) for the conditional
     branch operations.  All calls to expand `vCOND' patterns are
     immediately preceded by calls to expand either a `cmpM' pattern or
     a `tstM' pattern.

     Machines that use a pseudo register for the condition code value,
     or where the mode used for the comparison depends on the condition
     being tested, should also use the above mechanism.  See
     @{"Jump Patterns" Link "Jump Patterns"}

     The above discussion also applies to `sCOND' patterns.

`call'
     Subroutine call instruction returning no value.  Operand 0 is the
     function to call; operand 1 is the number of bytes of arguments
     pushed (in mode `SImode', except it is normally a `const_int');
     operand 2 is the number of registers used as operands.

     On most machines, operand 2 is not actually stored into the RTL
     pattern.  It is supplied for the sake of some RISC machines which
     need to put this information into the assembler code; they can put
     it in the RTL instead of operand 1.

     Operand 0 should be a `mem' RTX whose address is the address of the
     function.  Note, however, that this address can be a `symbol_ref'
     expression even if it would not be a legitimate memory address on
     the target machine.  If it is also not a valid argument for a call
     instruction, the pattern for this operation should be a
     `define_expand' (see @{"Expander Definitions" Link "Expander Definitions"}) that places the address
     into a register and uses that register in the call instruction.

`call_value'
     Subroutine call instruction returning a value.  Operand 0 is the
     hard register in which the value is returned.  There are three more
     operands, the same as the three operands of the `call' instruction
     (but with numbers increased by one).

     Subroutines that return `BLKmode' objects use the `call' insn.

`call_pop', `call_value_pop'
     Similar to `call' and `call_value', except used if defined and if
     `RETURN_POPS_ARGS' is non-zero.  They should emit a `parallel'
     that contains both the function call and a `set' to indicate the
     adjustment made to the frame pointer.

     For machines where `RETURN_POPS_ARGS' can be non-zero, the use of
     these patterns increases the number of functions for which the
     frame pointer can be eliminated, if desired.

`return'
     Subroutine return instruction.  This instruction pattern name
     should be defined only if a single instruction can do all the work
     of returning from a function.

     Like the `movM' patterns, this pattern is also used after the RTL
     generation phase.  In this case it is to support machines where
     multiple instructions are usually needed to return from a
     function, but some class of functions only requires one
     instruction to implement a return.  Normally, the applicable
     functions are those which do not need to save any registers or
     allocate stack space.

     For such machines, the condition specified in this pattern should
     only be true when `reload_completed' is non-zero and the function's
     epilogue would only be a single instruction.  For machines with
     register windows, the routine `leaf_function_p' may be used to
     determine if a register window push is required.

     Machines that have conditional return instructions should define
     patterns such as

          (define_insn ""
            [(set (pc)
          	(if_then_else (match_operator 0 "comparison_operator"
          				      [(cc0) (const_int 0)])
          		      (return)
          		      (pc)))]
            "CONDITION"
            "...")

     where CONDITION would normally be the same condition specified on
     the named `return' pattern.

`nop'
     No-op instruction.  This instruction pattern name should always be
     defined to output a no-op in assembler code.  `(const_int 0)' will
     do as an RTL pattern.

`indirect_jump'
     An instruction to jump to an address which is operand zero. This
     pattern name is mandatory on all machines.

`casesi'
     Instruction to jump through a dispatch table, including bounds
     checking. This instruction takes five operands:

       1. The index to dispatch on, which has mode `SImode'.

       2. The lower bound for indices in the table, an integer constant.

       3. The total range of indices in the table--the largest index
          minus the smallest one (both inclusive).

       4. A label that precedes the table itself.

       5. A label to jump to if the index has a value outside the
          bounds. (If the machine-description macro
          `CASE_DROPS_THROUGH' is defined, then an out-of-bounds index
          drops through to the code following the jump table instead of
          jumping to this label.  In that case, this label is not
          actually used by the `casesi' instruction, but it is always
          provided as an operand.)

     The table is a `addr_vec' or `addr_diff_vec' inside of a
     `jump_insn'.  The number of elements in the table is one plus the
     difference between the upper bound and the lower bound.

`tablejump'
     Instruction to jump to a variable address.  This is a low-level
     capability which can be used to implement a dispatch table when
     there is no `casesi' pattern.

     This pattern requires two operands: the address or offset, and a
     label which should immediately precede the jump table.  If the
     macro `CASE_VECTOR_PC_RELATIVE' is defined then the first operand
     is an offset which counts from the address of the table;
     otherwise, it is an absolute address to jump to.  In either case,
     the first operand has mode `Pmode'.

     The `tablejump' insn is always the last insn before the jump table
     it uses.  Its assembler code normally has no need to use the
     second operand, but you should incorporate it in the RTL pattern so
     that the jump optimizer will not delete the table as unreachable
     code.

`save_stack_block'
`save_stack_function'
`save_stack_nonlocal'
`restore_stack_block'
`restore_stack_function'
`restore_stack_nonlocal'
     Most machines save and restore the stack pointer by copying it to
     or from an object of mode `Pmode'.  Do not define these patterns on
     such machines.

     Some machines require special handling for stack pointer saves and
     restores.  On those machines, define the patterns corresponding to
     the non-standard cases by using a `define_expand' (see
     @{"Expander Definitions" Link "Expander Definitions"}) that produces the required insns.  The three
     types of saves and restores are:

       1. `save_stack_block' saves the stack pointer at the start of a
          block that allocates a variable-sized object and
          `restore_stack_block' restores the stack pointer when the
          block is exited.

       2. `save_stack_function' and `restore_stack_function' operate
          similarly for the outermost block of a function and are used
          when the function allocates variable-sized objects or calls
          `alloca'.  Only the epilogue uses the restored stack pointer,
          allowing a simpler save or restore sequence on some machines.

       3. `save_stack_nonlocal' is used in functions that contain labels
          branched to by nested functions.  It saves the stack pointer
          in such a way that the inner function can use
          `restore_stack_nonlocal' to restore the stack pointer.  The
          compiler generates code to restore the frame and argument
          pointer registers, but some machines require saving and
          restoring additional data such as register window information
          or stack backchains.  Place insns in these patterns to save
          and restore any such required data.

     When saving the stack pointer, operand 0 is the save area and
     operand 1 is the stack pointer.  The mode used to allocate the
     save area is the mode of operand 0.  You must specify an integral
     mode, or `VOIDmode' if no save area is needed for a particular
     type of save (either because no save is needed or because a
     machine-specific save area can be used).  Operand 0 is the stack
     pointer and operand 1 is the save area for restore operations.  If
     `save_stack_block' is defined, operand 0 must not be `VOIDmode'
     since these saves can be arbitrarily nested.

     A save area is a `mem' that is at a constant offset from
     `virtual_stack_vars_rtx' when the stack pointer is saved for use by
     nonlocal gotos and a `reg' in the other two cases.

`allocate_stack'
     Subtract operand 0 from the stack pointer to create space for for
     dynamically allocated data.

     Do not define this pattern if all that must be done is the
     subtraction. On some machines require other operations such as
     stack probes or maintaining the back chain.  Define this pattern
     to emit those operations in addition to updating the stack pointer.


@EndNode

@Node "Pattern Ordering" "gcc.guide/Pattern Ordering"
@Next "Dependent Patterns"
@Prev "Standard Names"
@Toc "Machine Desc"

When the Order of Patterns Matters
==================================

   Sometimes an insn can match more than one instruction pattern.  Then
the pattern that appears first in the machine description is the one
used. Therefore, more specific patterns (patterns that will match fewer
things) and faster instructions (those that will produce better code
when they do match) should usually go first in the description.

   In some cases the effect of ordering the patterns can be used to hide
a pattern when it is not valid.  For example, the 68000 has an
instruction for converting a fullword to floating point and another for
converting a byte to floating point.  An instruction converting an
integer to floating point could match either one.  We put the pattern
to convert the fullword first to make sure that one will be used rather
than the other.  (Otherwise a large integer might be generated as a
single-byte immediate quantity, which would not work.) Instead of using
this pattern ordering it would be possible to make the pattern for
convert-a-byte smart enough to deal properly with any constant value.


@EndNode

@Node "Dependent Patterns" "gcc.guide/Dependent Patterns"
@Next "Jump Patterns"
@Prev "Pattern Ordering"
@Toc "Machine Desc"

Interdependence of Patterns
===========================

   Every machine description must have a named pattern for each of the
conditional branch names `bCOND'.  The recognition template must always
have the form

     (set (pc)
          (if_then_else (COND (cc0) (const_int 0))
                        (label_ref (match_operand 0 "" ""))
                        (pc)))

In addition, every machine description must have an anonymous pattern
for each of the possible reverse-conditional branches.  Their templates
look like

     (set (pc)
          (if_then_else (COND (cc0) (const_int 0))
                        (pc)
                        (label_ref (match_operand 0 "" ""))))

They are necessary because jump optimization can turn direct-conditional
branches into reverse-conditional branches.

   It is often convenient to use the `match_operator' construct to
reduce the number of patterns that must be specified for branches.  For
example,

     (define_insn ""
       [(set (pc)
             (if_then_else (match_operator 0 "comparison_operator"
     				      [(cc0) (const_int 0)])
     		      (pc)
     		      (label_ref (match_operand 1 "" ""))))]
       "CONDITION"
       "...")

   In some cases machines support instructions identical except for the
machine mode of one or more operands.  For example, there may be
"sign-extend halfword" and "sign-extend byte" instructions whose
patterns are

     (set (match_operand:SI 0 ...)
          (extend:SI (match_operand:HI 1 ...)))
     
     (set (match_operand:SI 0 ...)
          (extend:SI (match_operand:QI 1 ...)))

Constant integers do not specify a machine mode, so an instruction to
extend a constant value could match either pattern.  The pattern it
actually will match is the one that appears first in the file.  For
correct results, this must be the one for the widest possible mode
(`HImode', here).  If the pattern matches the `QImode' instruction, the
results will be incorrect if the constant value does not actually fit
that mode.

   Such instructions to extend constants are rarely generated because
they are optimized away, but they do occasionally happen in nonoptimized
compilations.

   If a constraint in a pattern allows a constant, the reload pass may
replace a register with a constant permitted by the constraint in some
cases.  Similarly for memory references.  You must ensure that the
predicate permits all objects allowed by the constraints to prevent the
compiler from crashing.

   Because of this substitution, you should not provide separate
patterns for increment and decrement instructions.  Instead, they
should be generated from the same pattern that supports
register-register add insns by examining the operands and generating
the appropriate machine instruction.


@EndNode

@Node "Jump Patterns" "gcc.guide/Jump Patterns"
@Next "Insn Canonicalizations"
@Prev "Dependent Patterns"
@Toc "Machine Desc"

Defining Jump Instruction Patterns
==================================

   For most machines, GNU CC assumes that the machine has a condition
code. A comparison insn sets the condition code, recording the results
of both signed and unsigned comparison of the given operands.  A
separate branch insn tests the condition code and branches or not
according its value. The branch insns come in distinct signed and
unsigned flavors.  Many common machines, such as the Vax, the 68000 and
the 32000, work this way.

   Some machines have distinct signed and unsigned compare
instructions, and only one set of conditional branch instructions.  The
easiest way to handle these machines is to treat them just like the
others until the final stage where assembly code is written.  At this
time, when outputting code for the compare instruction, peek ahead at
the following branch using `next_cc0_user (insn)'.  (The variable
`insn' refers to the insn being output, in the output-writing code in
an instruction pattern.)  If the RTL says that is an unsigned branch,
output an unsigned compare; otherwise output a signed compare.  When
the branch itself is output, you can treat signed and unsigned branches
identically.

   The reason you can do this is that GNU CC always generates a pair of
consecutive RTL insns, possibly separated by `note' insns, one to set
the condition code and one to test it, and keeps the pair inviolate
until the end.

   To go with this technique, you must define the machine-description
macro `NOTICE_UPDATE_CC' to do `CC_STATUS_INIT'; in other words, no
compare instruction is superfluous.

   Some machines have compare-and-branch instructions and no condition
code. A similar technique works for them.  When it is time to "output" a
compare instruction, record its operands in two static variables.  When
outputting the branch-on-condition-code instruction that follows,
actually output a compare-and-branch instruction that uses the
remembered operands.

   It also works to define patterns for compare-and-branch instructions.
In optimizing compilation, the pair of compare and branch instructions
will be combined according to these patterns.  But this does not happen
if optimization is not requested.  So you must use one of the solutions
above in addition to any special patterns you define.

   In many RISC machines, most instructions do not affect the condition
code and there may not even be a separate condition code register.  On
these machines, the restriction that the definition and use of the
condition code be adjacent insns is not necessary and can prevent
important optimizations.  For example, on the IBM RS/6000, there is a
delay for taken branches unless the condition code register is set three
instructions earlier than the conditional branch.  The instruction
scheduler cannot perform this optimization if it is not permitted to
separate the definition and use of the condition code register.

   On these machines, do not use `(cc0)', but instead use a register to
represent the condition code.  If there is a specific condition code
register in the machine, use a hard register.  If the condition code or
comparison result can be placed in any general register, or if there are
multiple condition registers, use a pseudo register.

   On some machines, the type of branch instruction generated may
depend on the way the condition code was produced; for example, on the
68k and Sparc, setting the condition code directly from an add or
subtract instruction does not clear the overflow bit the way that a test
instruction does, so a different branch instruction must be used for
some conditional branches.  For machines that use `(cc0)', the set and
use of the condition code must be adjacent (separated only by `note'
insns) allowing flags in `cc_status' to be used. (See @{"Condition Code" Link "Condition Code"}.) 
Also, the comparison and branch insns can be located from each other by
using the functions `prev_cc0_setter' and `next_cc0_user'.

   However, this is not true on machines that do not use `(cc0)'.  On
those machines, no assumptions can be made about the adjacency of the
compare and branch insns and the above methods cannot be used.  Instead,
we use the machine mode of the condition code register to record
different formats of the condition code register.

   Registers used to store the condition code value should have a mode
that is in class `MODE_CC'.  Normally, it will be `CCmode'.  If
additional modes are required (as for the add example mentioned above in
the Sparc), define the macro `EXTRA_CC_MODES' to list the additional
modes required (see @{"Condition Code" Link "Condition Code"}).  Also define `EXTRA_CC_NAMES' to
list the names of those modes and `SELECT_CC_MODE' to choose a mode
given an operand of a compare.

   If it is known during RTL generation that a different mode will be
required (for example, if the machine has separate compare instructions
for signed and unsigned quantities, like most IBM processors), they can
be specified at that time.

   If the cases that require different modes would be made by
instruction combination, the macro `SELECT_CC_MODE' determines which
machine mode should be used for the comparison result.  The patterns
should be written using that mode.  To support the case of the add on
the Sparc discussed above, we have the pattern

     (define_insn ""
       [(set (reg:CC_NOOV 0)
     	(compare:CC_NOOV (plus:SI (match_operand:SI 0 "register_operand" "%r")
     				  (match_operand:SI 1 "arith_operand" "rI"))
     			 (const_int 0)))]
       ""
       "...")

   The `SELECT_CC_MODE' macro on the Sparc returns `CC_NOOVmode' for
comparisons whose argument is a `plus'.


@EndNode

@Node "Insn Canonicalizations" "gcc.guide/Insn Canonicalizations"
@Next "Peephole Definitions"
@Prev "Jump Patterns"
@Toc "Machine Desc"

Canonicalization of Instructions
================================

   There are often cases where multiple RTL expressions could represent
an operation performed by a single machine instruction.  This situation
is most commonly encountered with logical, branch, and
multiply-accumulate instructions.  In such cases, the compiler attempts
to convert these multiple RTL expressions into a single canonical form
to reduce the number of insn patterns required.

   In addition to algebraic simplifications, following canonicalizations
are performed:

   * For commutative and comparison operators, a constant is always
     made the second operand.  If a machine only supports a constant as
     the second operand, only patterns that match a constant in the
     second operand need be supplied.

     For these operators, if only one operand is a `neg', `not',
     `mult', `plus', or `minus' expression, it will be the first
     operand.

   * For the `compare' operator, a constant is always the second operand
     on machines where `cc0' is used (see @{"Jump Patterns" Link "Jump Patterns"}).  On other
     machines, there are rare cases where the compiler might want to
     construct a `compare' with a constant as the first operand. 
     However, these cases are not common enough for it to be worthwhile
     to provide a pattern matching a constant as the first operand
     unless the machine actually has such an instruction.

     An operand of `neg', `not', `mult', `plus', or `minus' is made the
     first operand under the same conditions as above.

   * `(minus X (const_int N))' is converted to `(plus X (const_int
     -N))'.

   * Within address computations (i.e., inside `mem'), a left shift is
     converted into the appropriate multiplication by a power of two.

     De`Morgan's Law is used to move bitwise negation inside a bitwise
     logical-and or logical-or operation.  If this results in only one
     operand being a `not' expression, it will be the first one.

     A machine that has an instruction that performs a bitwise
     logical-and of one operand with the bitwise negation of the other
     should specify the pattern for that instruction as

          (define_insn ""
            [(set (match_operand:M 0 ...)
          	(and:M (not:M (match_operand:M 1 ...))
          		     (match_operand:M 2 ...)))]
            "..."
            "...")

     Similarly, a pattern for a "NAND" instruction should be written

          (define_insn ""
            [(set (match_operand:M 0 ...)
          	(ior:M (not:M (match_operand:M 1 ...))
          		     (not:M (match_operand:M 2 ...))))]
            "..."
            "...")

     In both cases, it is not necessary to include patterns for the many
     logically equivalent RTL expressions.

   * The only possible RTL expressions involving both bitwise
     exclusive-or and bitwise negation are `(xor:M X) Y)' and `(not:M
     (xor:M X Y))'.

   * The sum of three items, one of which is a constant, will only
     appear in the form

          (plus:M (plus:M X Y) CONSTANT)

   * On machines that do not use `cc0', `(compare X (const_int 0))'
     will be converted to X.

   * Equality comparisons of a group of bits (usually a single bit)
     with zero will be written using `zero_extract' rather than the
     equivalent `and' or `sign_extract' operations.


@EndNode

@Node "Peephole Definitions" "gcc.guide/Peephole Definitions"
@Next "Expander Definitions"
@Prev "Insn Canonicalizations"
@Toc "Machine Desc"

Defining Machine-Specific Peephole Optimizers
=============================================

   In addition to instruction patterns the `md' file may contain
definitions of machine-specific peephole optimizations.

   The combiner does not notice certain peephole optimizations when the
data flow in the program does not suggest that it should try them.  For
example, sometimes two consecutive insns related in purpose can be
combined even though the second one does not appear to use a register
computed in the first one.  A machine-specific peephole optimizer can
detect such opportunities.

   A definition looks like this:

     (define_peephole
       [INSN-PATTERN-1
        INSN-PATTERN-2
        ...]
       "CONDITION"
       "TEMPLATE"
       "OPTIONAL INSN-ATTRIBUTES")

The last string operand may be omitted if you are not using any
machine-specific information in this machine description.  If present,
it must obey the same rules as in a `define_insn'.

   In this skeleton, INSN-PATTERN-1 and so on are patterns to match
consecutive insns.  The optimization applies to a sequence of insns when
INSN-PATTERN-1 matches the first one, INSN-PATTERN-2 matches the next,
and so on.

   Each of the insns matched by a peephole must also match a
`define_insn'.  Peepholes are checked only at the last stage just
before code generation, and only optionally.  Therefore, any insn which
would match a peephole but no `define_insn' will cause a crash in code
generation in an unoptimized compilation, or at various optimization
stages.

   The operands of the insns are matched with `match_operands',
`match_operator', and `match_dup', as usual.  What is not usual is that
the operand numbers apply to all the insn patterns in the definition. 
So, you can check for identical operands in two insns by using
`match_operand' in one insn and `match_dup' in the other.

   The operand constraints used in `match_operand' patterns do not have
any direct effect on the applicability of the peephole, but they will
be validated afterward, so make sure your constraints are general enough
to apply whenever the peephole matches.  If the peephole matches but
the constraints are not satisfied, the compiler will crash.

   It is safe to omit constraints in all the operands of the peephole;
or you can write constraints which serve as a double-check on the
criteria previously tested.

   Once a sequence of insns matches the patterns, the CONDITION is
checked.  This is a C expression which makes the final decision whether
to perform the optimization (we do so if the expression is nonzero).  If
CONDITION is omitted (in other words, the string is empty) then the
optimization is applied to every sequence of insns that matches the
patterns.

   The defined peephole optimizations are applied after register
allocation is complete.  Therefore, the peephole definition can check
which operands have ended up in which kinds of registers, just by
looking at the operands.

   The way to refer to the operands in CONDITION is to write
`operands[I]' for operand number I (as matched by `(match_operand I
...)').  Use the variable `insn' to refer to the last of the insns
being matched; use `prev_nonnote_insn' to find the preceding insns.

   When optimizing computations with intermediate results, you can use
CONDITION to match only when the intermediate results are not used
elsewhere.  Use the C expression `dead_or_set_p (INSN, OP)', where INSN
is the insn in which you expect the value to be used for the last time
(from the value of `insn', together with use of `prev_nonnote_insn'),
and OP is the intermediate value (from `operands[I]').

   Applying the optimization means replacing the sequence of insns with
one new insn.  The TEMPLATE controls ultimate output of assembler code
for this combined insn.  It works exactly like the template of a
`define_insn'.  Operand numbers in this template are the same ones used
in matching the original sequence of insns.

   The result of a defined peephole optimizer does not need to match
any of the insn patterns in the machine description; it does not even
have an opportunity to match them.  The peephole optimizer definition
itself serves as the insn pattern to control how the insn is output.

   Defined peephole optimizers are run as assembler code is being
output, so the insns they produce are never combined or rearranged in
any way.

   Here is an example, taken from the 68000 machine description:

     (define_peephole
       [(set (reg:SI 15) (plus:SI (reg:SI 15) (const_int 4)))
        (set (match_operand:DF 0 "register_operand" "=f")
             (match_operand:DF 1 "register_operand" "ad"))]
       "FP_REG_P (operands[0]) && ! FP_REG_P (operands[1])"
       "*
     {
       rtx xoperands[2];
       xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);
     #ifdef MOTOROLA
       output_asm_insn (\"move.l %1,(sp)\", xoperands);
       output_asm_insn (\"move.l %1,-(sp)\", operands);
       return \"fmove.d (sp)+,%0\";
     #else
       output_asm_insn (\"movel %1,sp@\", xoperands);
       output_asm_insn (\"movel %1,sp@-\", operands);
       return \"fmoved sp@+,%0\";
     #endif
     }
     ")

   The effect of this optimization is to change

     jbsr _foobar
     addql #4,sp
     movel d1,sp@-
     movel d0,sp@-
     fmoved sp@+,fp0

into

     jbsr _foobar
     movel d1,sp@
     movel d0,sp@-
     fmoved sp@+,fp0

   INSN-PATTERN-1 and so on look *almost* like the second operand of
`define_insn'.  There is one important difference: the second operand
of `define_insn' consists of one or more RTX's enclosed in square
brackets.  Usually, there is only one: then the same action can be
written as an element of a `define_peephole'.  But when there are
multiple actions in a `define_insn', they are implicitly enclosed in a
`parallel'.  Then you must explicitly write the `parallel', and the
square brackets within it, in the `define_peephole'.  Thus, if an insn
pattern looks like this,

     (define_insn "divmodsi4"
       [(set (match_operand:SI 0 "general_operand" "=d")
             (div:SI (match_operand:SI 1 "general_operand" "0")
                     (match_operand:SI 2 "general_operand" "dmsK")))
        (set (match_operand:SI 3 "general_operand" "=d")
             (mod:SI (match_dup 1) (match_dup 2)))]
       "TARGET_68020"
       "divsl%.l %2,%3:%0")

then the way to mention this insn in a peephole is as follows:

     (define_peephole
       [...
        (parallel
         [(set (match_operand:SI 0 "general_operand" "=d")
               (div:SI (match_operand:SI 1 "general_operand" "0")
                       (match_operand:SI 2 "general_operand" "dmsK")))
          (set (match_operand:SI 3 "general_operand" "=d")
               (mod:SI (match_dup 1) (match_dup 2)))])
        ...]
       ...)


@EndNode

@Node "Expander Definitions" "gcc.guide/Expander Definitions"
@Next "Insn Splitting"
@Prev "Peephole Definitions"
@Toc "Machine Desc"

Defining RTL Sequences for Code Generation
==========================================

   On some target machines, some standard pattern names for RTL
generation cannot be handled with single insn, but a sequence of RTL
insns can represent them.  For these target machines, you can write a
`define_expand' to specify how to generate the sequence of RTL.

   A `define_expand' is an RTL expression that looks almost like a
`define_insn'; but, unlike the latter, a `define_expand' is used only
for RTL generation and it can produce more than one RTL insn.

   A `define_expand' RTX has four operands:

   * The name.  Each `define_expand' must have a name, since the only
     use for it is to refer to it by name.

   * The RTL template.  This is just like the RTL template for a
     `define_peephole' in that it is a vector of RTL expressions each
     being one insn.

   * The condition, a string containing a C expression.  This
     expression is used to express how the availability of this pattern
     depends on subclasses of target machine, selected by command-line
     options when GNU CC is run.  This is just like the condition of a
     `define_insn' that has a standard name.

   * The preparation statements, a string containing zero or more C
     statements which are to be executed before RTL code is generated
     from the RTL template.

     Usually these statements prepare temporary registers for use as
     internal operands in the RTL template, but they can also generate
     RTL insns directly by calling routines such as `emit_insn', etc.
     Any such insns precede the ones that come from the RTL template.

   Every RTL insn emitted by a `define_expand' must match some
`define_insn' in the machine description.  Otherwise, the compiler will
crash when trying to generate code for the insn or trying to optimize
it.

   The RTL template, in addition to controlling generation of RTL insns,
also describes the operands that need to be specified when this pattern
is used.  In particular, it gives a predicate for each operand.

   A true operand, which needs to be specified in order to generate RTL
from the pattern, should be described with a `match_operand' in its
first occurrence in the RTL template.  This enters information on the
operand's predicate into the tables that record such things.  GNU CC
uses the information to preload the operand into a register if that is
required for valid RTL code.  If the operand is referred to more than
once, subsequent references should use `match_dup'.

   The RTL template may also refer to internal "operands" which are
temporary registers or labels used only within the sequence made by the
`define_expand'.  Internal operands are substituted into the RTL
template with `match_dup', never with `match_operand'.  The values of
the internal operands are not passed in as arguments by the compiler
when it requests use of this pattern.  Instead, they are computed
within the pattern, in the preparation statements.  These statements
compute the values and store them into the appropriate elements of
`operands' so that `match_dup' can find them.

   There are two special macros defined for use in the preparation
statements: `DONE' and `FAIL'.  Use them with a following semicolon, as
a statement.

`DONE'
     Use the `DONE' macro to end RTL generation for the pattern.  The
     only RTL insns resulting from the pattern on this occasion will be
     those already emitted by explicit calls to `emit_insn' within the
     preparation statements; the RTL template will not be generated.

`FAIL'
     Make the pattern fail on this occasion.  When a pattern fails, it
     means that the pattern was not truly available.  The calling
     routines in the compiler will try other strategies for code
     generation using other patterns.

     Failure is currently supported only for binary (addition,
     multiplication, shifting, etc.) and bitfield (`extv', `extzv', and
     `insv') operations.

   Here is an example, the definition of left-shift for the SPUR chip:

     (define_expand "ashlsi3"
       [(set (match_operand:SI 0 "register_operand" "")
             (ashift:SI
               (match_operand:SI 1 "register_operand" "")
               (match_operand:SI 2 "nonmemory_operand" "")))]
       ""
       "
     {
       if (GET_CODE (operands[2]) != CONST_INT
           || (unsigned) INTVAL (operands[2]) > 3)
         FAIL;
     }")

This example uses `define_expand' so that it can generate an RTL insn
for shifting when the shift-count is in the supported range of 0 to 3
but fail in other cases where machine insns aren't available.  When it
fails, the compiler tries another strategy using different patterns
(such as, a library call).

   If the compiler were able to handle nontrivial condition-strings in
patterns with names, then it would be possible to use a `define_insn'
in that case.  Here is another case (zero-extension on the 68000) which
makes more use of the power of `define_expand':

     (define_expand "zero_extendhisi2"
       [(set (match_operand:SI 0 "general_operand" "")
             (const_int 0))
        (set (strict_low_part
               (subreg:HI
                 (match_dup 0)
                 0))
             (match_operand:HI 1 "general_operand" ""))]
       ""
       "operands[1] = make_safe_from (operands[1], operands[0]);")

Here two RTL insns are generated, one to clear the entire output operand
and the other to copy the input operand into its low half.  This
sequence is incorrect if the input operand refers to [the old value of]
the output operand, so the preparation statement makes sure this isn't
so.  The function `make_safe_from' copies the `operands[1]' into a
temporary register if it refers to `operands[0]'.  It does this by
emitting another RTL insn.

   Finally, a third example shows the use of an internal operand.
Zero-extension on the SPUR chip is done by `and'-ing the result against
a halfword mask.  But this mask cannot be represented by a `const_int'
because the constant value is too large to be legitimate on this
machine.  So it must be copied into a register with `force_reg' and
then the register used in the `and'.

     (define_expand "zero_extendhisi2"
       [(set (match_operand:SI 0 "register_operand" "")
             (and:SI (subreg:SI
                       (match_operand:HI 1 "register_operand" "")
                       0)
                     (match_dup 2)))]
       ""
       "operands[2]
          = force_reg (SImode, gen_rtx (CONST_INT,
                                        VOIDmode, 65535)); ")

   *Note:* If the `define_expand' is used to serve a standard binary or
unary arithmetic operation or a bitfield operation, then the last insn
it generates must not be a `code_label', `barrier' or `note'.  It must
be an `insn', `jump_insn' or `call_insn'.  If you don't need a real insn
at the end, emit an insn to copy the result of the operation into
itself.  Such an insn will generate no code, but it can avoid problems
in the compiler.


@EndNode

@Node "Insn Splitting" "gcc.guide/Insn Splitting"
@Next "Insn Attributes"
@Prev "Expander Definitions"
@Toc "Machine Desc"

Splitting Instructions into Multiple Instructions
=================================================

   There are two cases where you should specify how to split a pattern
into multiple insns.  On machines that have instructions requiring delay
slots (see @{"Delay Slots" Link "Delay Slots"}) or that have instructions whose output is not
available for multiple cycles (see @{"Function Units" Link "Function Units"}), the compiler phases
that optimize these cases need to be able to move insns into one-cycle
delay slots.  However, some insns may generate more than one machine
instruction.  These insns cannot be placed into a delay slot.

   Often you can rewrite the single insn as a list of individual insns,
each corresponding to one machine instruction.  The disadvantage of
doing so is that it will cause the compilation to be slower and require
more space.  If the resulting insns are too complex, it may also
suppress some optimizations.  The compiler splits the insn if there is a
reason to believe that it might improve instruction or delay slot
scheduling.

   The insn combiner phase also splits putative insns.  If three insns
are merged into one insn with a complex expression that cannot be
matched by some `define_insn' pattern, the combiner phase attempts to
split the complex pattern into two insns that are recognized.  Usually
it can break the complex pattern into two patterns by splitting out some
subexpression.  However, in some other cases, such as performing an
addition of a large constant in two insns on a RISC machine, the way to
split the addition into two insns is machine-dependent.

   The `define_split' definition tells the compiler how to split a
complex insn into several simpler insns.  It looks like this:

     (define_split
       [INSN-PATTERN]
       "CONDITION"
       [NEW-INSN-PATTERN-1
        NEW-INSN-PATTERN-2
        ...]
       "PREPARATION STATEMENTS")

   INSN-PATTERN is a pattern that needs to be split and CONDITION is
the final condition to be tested, as in a `define_insn'.  When an insn
matching INSN-PATTERN and satisfying CONDITION is found, it is replaced
in the insn list with the insns given by NEW-INSN-PATTERN-1,
NEW-INSN-PATTERN-2, etc.

   The PREPARATION STATEMENTS are similar to those specified for
`define_expand' (see @{"Expander Definitions" Link "Expander Definitions"}) and are executed before the
new RTL is generated to prepare for the generated code or emit some
insns whose pattern is not fixed.

   Patterns are matched against INSN-PATTERN in two different
circumstances.  If an insn needs to be split for delay slot scheduling
or insn scheduling, the insn is already known to be valid, which means
that it must have been matched by some `define_insn' and, if
`reload_completed' is non-zero, is known to satisfy the constraints of
that `define_insn'.  In that case, the new insn patterns must also be
insns that are matched by some `define_insn' and, if `reload_completed'
is non-zero, must also satisfy the constraints of those definitions.

   As an example of this usage of `define_split', consider the following
example from `a29k.md', which splits a `sign_extend' from `HImode' to
`SImode' into a pair of shift insns:

     (define_split
       [(set (match_operand:SI 0 "gen_reg_operand" "")
     	(sign_extend:SI (match_operand:HI 1 "gen_reg_operand" "")))]
       ""
       [(set (match_dup 0)
     	(ashift:SI (match_dup 1)
     		   (const_int 16)))
        (set (match_dup 0)
     	(ashiftrt:SI (match_dup 0)
     		     (const_int 16)))]
       "
     { operands[1] = gen_lowpart (SImode, operands[1]); }")

   When the combiner phase tries to split an insn pattern, it is always
the case that the pattern is *not* matched by any `define_insn'. The
combiner pass first tries to split a single `set' expression and then
the same `set' expression inside a `parallel', but followed by a
`clobber' of a pseudo-reg to use as a scratch register.  In these
cases, the combiner expects exactly two new insn patterns to be
generated.  It will verify that these patterns match some `define_insn'
definitions, so you need not do this test in the `define_split' (of
course, there is no point in writing a `define_split' that will never
produce insns that match).

   Here is an example of this use of `define_split', taken from
`rs6000.md':

     (define_split
       [(set (match_operand:SI 0 "gen_reg_operand" "")
     	(plus:SI (match_operand:SI 1 "gen_reg_operand" "")
     		 (match_operand:SI 2 "non_add_cint_operand" "")))]
       ""
       [(set (match_dup 0) (plus:SI (match_dup 1) (match_dup 3)))
        (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 4)))]
     "
     {
       int low = INTVAL (operands[2]) & 0xffff;
       int high = (unsigned) INTVAL (operands[2]) >> 16;
     
       if (low & 0x8000)
         high++, low |= 0xffff0000;
     
       operands[3] = gen_rtx (CONST_INT, VOIDmode, high << 16);
       operands[4] = gen_rtx (CONST_INT, VOIDmode, low);
     }")

   Here the predicate `non_add_cint_operand' matches any `const_int'
that is *not* a valid operand of a single add insn.  Write the add with
the smaller displacement is written so that it can be substituted into
the address of a subsequent operation.

   An example that uses a scratch register, from the same file,
generates an equality comparison of a register and a large constant:

     (define_split
       [(set (match_operand:CC 0 "cc_reg_operand" "")
     	(compare:CC (match_operand:SI 1 "gen_reg_operand" "")
     		    (match_operand:SI 2 "non_short_cint_operand" "")))
        (clobber (match_operand:SI 3 "gen_reg_operand" ""))]
       "find_single_use (operands[0], insn, 0)
        && (GET_CODE (*find_single_use (operands[0], insn, 0)) == EQ
            || GET_CODE (*find_single_use (operands[0], insn, 0)) == NE)"
       [(set (match_dup 3) (xor:SI (match_dup 1) (match_dup 4)))
        (set (match_dup 0) (compare:CC (match_dup 3) (match_dup 5)))]
       "
     {
       /* Get the constant we are comparing against, C,  and see what it looks like
          sign-extended to 16 bits.  Then see what constant could be XOR'ed
          with C to get the sign-extended value.  */
     
       int c = INTVAL (operands[2]);
       int sextc = (c << 16) >> 16;
       int xorv = c ^ sextc;
     
       operands[4] = gen_rtx (CONST_INT, VOIDmode, xorv);
       operands[5] = gen_rtx (CONST_INT, VOIDmode, sextc);
     }")

   To avoid confusion, don't write a single `define_split' that accepts
some insns that match some `define_insn' as well as some insns that
don't.  Instead, write two separate `define_split' definitions, one for
the insns that are valid and one for the insns that are not valid.


@EndNode

@Node "Insn Attributes" "gcc.guide/Insn Attributes"
@Prev "Insn Splitting"
@Toc "Machine Desc"

Instruction Attributes
======================

   In addition to describing the instruction supported by the target
machine, the `md' file also defines a group of "attributes" and a set of
values for each.  Every generated insn is assigned a value for each
attribute. One possible attribute would be the effect that the insn has
on the machine's condition code.  This attribute can then be used by
`NOTICE_UPDATE_CC' to track the condition codes.


 @{" Defining Attributes " Link "Defining Attributes"}  Specifying attributes and their values.
 @{" Expressions " Link "Expressions"}          Valid expressions for attribute values.
 @{" Tagging Insns " Link "Tagging Insns"}        Assigning attribute values to insns.
 @{" Attr Example " Link "Attr Example"}         An example of assigning attributes.
 @{" Insn Lengths " Link "Insn Lengths"}         Computing the length of insns.
 @{" Constant Attributes " Link "Constant Attributes"}  Defining attributes that are constant.
 @{" Delay Slots " Link "Delay Slots"}          Defining delay slots required for a machine.
 @{" Function Units " Link "Function Units"}       Specifying information for insn scheduling.


@EndNode

@Node "Defining Attributes" "gcc.guide/Defining Attributes"
@Next "Expressions"
@Prev "Insn Attributes"
@Toc "Insn Attributes"

Defining Attributes and their Values
------------------------------------

   The `define_attr' expression is used to define each attribute
required by the target machine.  It looks like:

     (define_attr NAME LIST-OF-VALUES DEFAULT)

   NAME is a string specifying the name of the attribute being defined.

   LIST-OF-VALUES is either a string that specifies a comma-separated
list of values that can be assigned to the attribute, or a null string
to indicate that the attribute takes numeric values.

   DEFAULT is an attribute expression that gives the value of this
attribute for insns that match patterns whose definition does not
include an explicit value for this attribute.  See @{"Attr Example" Link "Attr Example"}, for
more information on the handling of defaults.  See @{"Constant Attributes" Link "Constant Attributes"},
for information on attributes that do not depend on any particular insn.

   For each defined attribute, a number of definitions are written to
the `insn-attr.h' file.  For cases where an explicit set of values is
specified for an attribute, the following are defined:

   * A `#define' is written for the symbol `HAVE_ATTR_NAME'.

   * An enumeral class is defined for `attr_NAME' with elements of the
     form `UPPER-NAME_UPPER-VALUE' where the attribute name and value
     are first converted to upper case.

   * A function `get_attr_NAME' is defined that is passed an insn and
     returns the attribute value for that insn.

   For example, if the following is present in the `md' file:

     (define_attr "type" "branch,fp,load,store,arith" ...)

the following lines will be written to the file `insn-attr.h'.

     #define HAVE_ATTR_type
     enum attr_type {TYPE_BRANCH, TYPE_FP, TYPE_LOAD,
     		 TYPE_STORE, TYPE_ARITH};
     extern enum attr_type get_attr_type ();

   If the attribute takes numeric values, no `enum' type will be
defined and the function to obtain the attribute's value will return
`int'.


@EndNode

@Node "Expressions" "gcc.guide/Expressions"
@Next "Tagging Insns"
@Prev "Defining Attributes"
@Toc "Insn Attributes"

Attribute Expressions
---------------------

   RTL expressions used to define attributes use the codes described
above plus a few specific to attribute definitions, to be discussed
below. Attribute value expressions must have one of the following forms:

`(const_int I)'
     The integer I specifies the value of a numeric attribute.  I must
     be non-negative.

     The value of a numeric attribute can be specified either with a
     `const_int' or as an integer represented as a string in
     `const_string', `eq_attr' (see below), and `set_attr' (see
     @{"Tagging Insns" Link "Tagging Insns"}) expressions.

`(const_string VALUE)'
     The string VALUE specifies a constant attribute value. If VALUE is
     specified as `"*"', it means that the default value of the
     attribute is to be used for the insn containing this expression.
     `"*"' obviously cannot be used in the DEFAULT expression of a
     `define_attr'.

     If the attribute whose value is being specified is numeric, VALUE
     must be a string containing a non-negative integer (normally
     `const_int' would be used in this case).  Otherwise, it must
     contain one of the valid values for the attribute.

`(if_then_else TEST TRUE-VALUE FALSE-VALUE)'
     TEST specifies an attribute test, whose format is defined below.
     The value of this expression is TRUE-VALUE if TEST is true,
     otherwise it is FALSE-VALUE.

`(cond [TEST1 VALUE1 ...] DEFAULT)'
     The first operand of this expression is a vector containing an even
     number of expressions and consisting of pairs of TEST and VALUE
     expressions.  The value of the `cond' expression is that of the
     VALUE corresponding to the first true TEST expression.  If none of
     the TEST expressions are true, the value of the `cond' expression
     is that of the DEFAULT expression.

   TEST expressions can have one of the following forms:

`(const_int I)'
     This test is true if I is non-zero and false otherwise.

`(not TEST)'
`(ior TEST1 TEST2)'
`(and TEST1 TEST2)'
     These tests are true if the indicated logical function is true.

`(match_operand:M N PRED CONSTRAINTS)'
     This test is true if operand N of the insn whose attribute value
     is being determined has mode M (this part of the test is ignored
     if M is `VOIDmode') and the function specified by the string PRED
     returns a non-zero value when passed operand N and mode M (this
     part of the test is ignored if PRED is the null string).

     The CONSTRAINTS operand is ignored and should be the null string.

`(le ARITH1 ARITH2)'
`(leu ARITH1 ARITH2)'
`(lt ARITH1 ARITH2)'
`(ltu ARITH1 ARITH2)'
`(gt ARITH1 ARITH2)'
`(gtu ARITH1 ARITH2)'
`(ge ARITH1 ARITH2)'
`(geu ARITH1 ARITH2)'
`(ne ARITH1 ARITH2)'
`(eq ARITH1 ARITH2)'
     These tests are true if the indicated comparison of the two
     arithmetic expressions is true.  Arithmetic expressions are formed
     with `plus', `minus', `mult', `div', `mod', `abs', `neg', `and',
     `ior', `xor', `not', `lshift', `ashift', `lshiftrt', and `ashiftrt'
     expressions.

     `const_int' and `symbol_ref' are always valid terms (see
     @{"Insn Lengths" Link "Insn Lengths"},for additional forms).  `symbol_ref' is a string
     denoting a C expression that yields an `int' when evaluated by the
     `get_attr_...' routine.  It should normally be a global variable.

`(eq_attr NAME VALUE)'
     NAME is a string specifying the name of an attribute.

     VALUE is a string that is either a valid value for attribute NAME,
     a comma-separated list of values, or `!' followed by a value or
     list.  If VALUE does not begin with a `!', this test is true if
     the value of the NAME attribute of the current insn is in the list
     specified by VALUE.  If VALUE begins with a `!', this test is true
     if the attribute's value is *not* in the specified list.

     For example,

          (eq_attr "type" "load,store")

     is equivalent to

          (ior (eq_attr "type" "load") (eq_attr "type" "store"))

     If NAME specifies an attribute of `alternative', it refers to the
     value of the compiler variable `which_alternative' (see
     @{"Output Statement" Link "Output Statement"}) and the values must be small integers.  For
     example,

          (eq_attr "alternative" "2,3")

     is equivalent to

          (ior (eq (symbol_ref "which_alternative") (const_int 2))
               (eq (symbol_ref "which_alternative") (const_int 3)))

     Note that, for most attributes, an `eq_attr' test is simplified in
     cases where the value of the attribute being tested is known for
     all insns matching a particular pattern.  This is by far the most
     common case.


@EndNode

@Node "Tagging Insns" "gcc.guide/Tagging Insns"
@Next "Attr Example"
@Prev "Expressions"
@Toc "Insn Attributes"

Assigning Attribute Values to Insns
-----------------------------------

   The value assigned to an attribute of an insn is primarily
determined by which pattern is matched by that insn (or which
`define_peephole' generated it).  Every `define_insn' and
`define_peephole' can have an optional last argument to specify the
values of attributes for matching insns.  The value of any attribute
not specified in a particular insn is set to the default value for that
attribute, as specified in its `define_attr'.  Extensive use of default
values for attributes permits the specification of the values for only
one or two attributes in the definition of most insn patterns, as seen
in the example in the next section.

   The optional last argument of `define_insn' and `define_peephole' is
a vector of expressions, each of which defines the value for a single
attribute.  The most general way of assigning an attribute's value is
to use a `set' expression whose first operand is an `attr' expression
giving the name of the attribute being set.  The second operand of the
`set' is an attribute expression (see @{"Expressions" Link "Expressions"}) giving the value of
the attribute.

   When the attribute value depends on the `alternative' attribute
(i.e., which is the applicable alternative in the constraint of the
insn), the `set_attr_alternative' expression can can be used.  It
allows the specification of a vector of attribute expressions, one for
each alternative.

   When the generality of arbitrary attribute expressions is not
required, the simpler `set_attr' expression can be used, which allows
specifying a string giving either a single attribute value or a list of
attribute values, one for each alternative.

   The form of each of the above specifications is shown below.  In
each case, NAME is a string specifying the attribute to be set.

`(set_attr NAME VALUE-STRING)'
     VALUE-STRING is either a string giving the desired attribute value,
     or a string containing a comma-separated list giving the values for
     succeeding alternatives.  The number of elements must match the
     number of alternatives in the constraint of the insn pattern.

     Note that it may be useful to specify `*' for some alternative, in
     which case the attribute will assume its default value for insns
     matching that alternative.

`(set_attr_alternative NAME [VALUE1 VALUE2 ...])'
     Depending on the alternative of the insn, the value will be one of
     the specified values.  This is a shorthand for using a `cond' with
     tests on the `alternative' attribute.

`(set (attr NAME) VALUE)'
     The first operand of this `set' must be the special RTL expression
     `attr', whose sole operand is a string giving the name of the
     attribute being set.  VALUE is the value of the attribute.

   The following shows three different ways of representing the same
attribute value specification:

     (set_attr "type" "load,store,arith")
     
     (set_attr_alternative "type"
                           [(const_string "load") (const_string "store")
                            (const_string "arith")])
     
     (set (attr "type")
          (cond [(eq_attr "alternative" "1") (const_string "load")
                 (eq_attr "alternative" "2") (const_string "store")]
                (const_string "arith")))

   The `define_asm_attributes' expression provides a mechanism to
specify the attributes assigned to insns produced from an `asm'
statement. It has the form:

     (define_asm_attributes [ATTR-SETS])

where ATTR-SETS is specified the same as for `define_insn' and
`define_peephole' expressions.

   These values will typically be the "worst case" attribute values. 
For example, they might indicate that the condition code will be
clobbered.

   A specification for a `length' attribute is handled specially.  To
compute the length of an `asm' insn, the length specified in the
`define_asm_attributes' expression is multiplied by the number of
machine instructions specified in the `asm' statement, determined by
counting the number of semicolons and newlines in the string.
Therefore, the value of the `length' attribute specified in a
`define_asm_attributes' should be the maximum possible length of a
single machine instruction.


@EndNode

@Node "Attr Example" "gcc.guide/Attr Example"
@Next "Insn Lengths"
@Prev "Tagging Insns"
@Toc "Insn Attributes"

Example of Attribute Specifications
-----------------------------------

   The judicious use of defaulting is important in the efficient use of
insn attributes.  Typically, insns are divided into "types" and an
attribute, customarily called `type', is used to represent this value. 
This attribute is normally used only to define the default value for
other attributes.  An example will clarify this usage.

   Assume we have a RISC machine with a condition code and in which only
full-word operations are performed in registers.  Let us assume that we
can divide all insns into loads, stores, (integer) arithmetic
operations, floating point operations, and branches.

   Here we will concern ourselves with determining the effect of an
insn on the condition code and will limit ourselves to the following
possible effects:  The condition code can be set unpredictably
(clobbered), not be changed, be set to agree with the results of the
operation, or only changed if the item previously set into the
condition code has been modified.

   Here is part of a sample `md' file for such a machine:

     (define_attr "type" "load,store,arith,fp,branch" (const_string "arith"))
     
     (define_attr "cc" "clobber,unchanged,set,change0"
                  (cond [(eq_attr "type" "load")
                             (const_string "change0")
                         (eq_attr "type" "store,branch")
                             (const_string "unchanged")
                         (eq_attr "type" "arith")
                             (if_then_else (match_operand:SI 0 "" "")
                                           (const_string "set")
                                           (const_string "clobber"))]
                        (const_string "clobber")))
     
     (define_insn ""
       [(set (match_operand:SI 0 "general_operand" "=r,r,m")
             (match_operand:SI 1 "general_operand" "r,m,r"))]
       ""
       "@
        move %0,%1
        load %0,%1
        store %0,%1"
       [(set_attr "type" "arith,load,store")])

   Note that we assume in the above example that arithmetic operations
performed on quantities smaller than a machine word clobber the
condition code since they will set the condition code to a value
corresponding to the full-word result.


@EndNode

@Node "Insn Lengths" "gcc.guide/Insn Lengths"
@Next "Constant Attributes"
@Prev "Attr Example"
@Toc "Insn Attributes"

Computing the Length of an Insn
-------------------------------

   For many machines, multiple types of branch instructions are
provided, each for different length branch displacements.  In most
cases, the assembler will choose the correct instruction to use. 
However, when the assembler cannot do so, GCC can when a special
attribute, the `length' attribute, is defined.  This attribute must be
defined to have numeric values by specifying a null string in its
`define_attr'.

   In the case of the `length' attribute, two additional forms of
arithmetic terms are allowed in test expressions:

`(match_dup N)'
     This refers to the address of operand N of the current insn, which
     must be a `label_ref'.

`(pc)'
     This refers to the address of the *current* insn.  It might have
     been more consistent with other usage to make this the address of
     the *next* insn but this would be confusing because the length of
     the current insn is to be computed.

   For normal insns, the length will be determined by value of the
`length' attribute.  In the case of `addr_vec' and `addr_diff_vec' insn
patterns, the length will be computed as the number of vectors
multiplied by the size of each vector.

   The following macros can be used to refine the length computation:

`FIRST_INSN_ADDRESS'
     When the `length' insn attribute is used, this macro specifies the
     value to be assigned to the address of the first insn in a
     function.  If not specified, 0 is used.

`ADJUST_INSN_LENGTH (INSN, LENGTH)'
     If defined, modifies the length assigned to instruction INSN as a
     function of the context in which it is used.  LENGTH is an lvalue
     that contains the initially computed length of the insn and should
     be updated with the correct length of the insn.  If updating is
     required, INSN must not be a varying-length insn.

     This macro will normally not be required.  A case in which it is
     required is the ROMP.  On this machine, the size of an `addr_vec'
     insn must be increased by two to compensate for the fact that
     alignment may be required.

   The routine that returns the value of the `length' attribute,
`get_attr_length', can be used by the output routine to determine the
form of the branch instruction to be written, as the example below
illustrates.

   As an example of the specification of variable-length branches,
consider the IBM 360.  If we adopt the convention that a register will
be set to the starting address of a function, we can jump to labels
within 4K of the start using a four-byte instruction.  Otherwise, we
need a six-byte sequence to load the address from memory and then
branch to it.

   On such a machine, a pattern for a branch instruction might be
specified as follows:

     (define_insn "jump"
       [(set (pc)
             (label_ref (match_operand 0 "" "")))]
       ""
       "*
     {
        return (get_attr_length (insn) == 4
                ? \"b %l0\" : \"l r15,=a(%l0); br r15\");
     }"
       [(set (attr "length") (if_then_else (lt (match_dup 0) (const_int 4096))
                                           (const_int 4)
                                           (const_int 6)))])


@EndNode

@Node "Constant Attributes" "gcc.guide/Constant Attributes"
@Next "Delay Slots"
@Prev "Insn Lengths"
@Toc "Insn Attributes"

Constant Attributes
-------------------

   A special form of `define_attr', where the expression for the
default value is a `const' expression, indicates an attribute that is
constant for a given run of the compiler.  Constant attributes may be
used to specify which variety of processor is used.  For example,

     (define_attr "cpu" "m88100,m88110,m88000"
      (const
       (cond [(symbol_ref "TARGET_88100") (const_string "m88100")
     	 (symbol_ref "TARGET_88110") (const_string "m88110")]
     	(const_string "m88000"))))
     
     (define_attr "memory" "fast,slow"
      (const
       (if_then_else (symbol_ref "TARGET_FAST_MEM")
     		(const_string "fast")
     		(const_string "slow"))))

   The routine generated for constant attributes has no parameters as it
does not depend on any particular insn.  RTL expressions used to define
the value of a constant attribute may use the `symbol_ref' form, but
may not use either the `match_operand' form or `eq_attr' forms
involving insn attributes.


@EndNode

@Node "Delay Slots" "gcc.guide/Delay Slots"
@Next "Function Units"
@Prev "Constant Attributes"
@Toc "Insn Attributes"

Delay Slot Scheduling
---------------------

   The insn attribute mechanism can be used to specify the requirements
for delay slots, if any, on a target machine.  An instruction is said to
require a "delay slot" if some instructions that are physically after
the instruction are executed as if they were located before it. Classic
examples are branch and call instructions, which often execute the
following instruction before the branch or call is performed.

   On some machines, conditional branch instructions can optionally
"annul" instructions in the delay slot.  This means that the
instruction will not be executed for certain branch outcomes.  Both
instructions that annul if the branch is true and instructions that
annul if the branch is false are supported.

   Delay slot scheduling differs from instruction scheduling in that
determining whether an instruction needs a delay slot is dependent only
on the type of instruction being generated, not on data flow between the
instructions.  See the next section for a discussion of data-dependent
instruction scheduling.

   The requirement of an insn needing one or more delay slots is
indicated via the `define_delay' expression.  It has the following form:

     (define_delay TEST
                   [DELAY-1 ANNUL-TRUE-1 ANNUL-FALSE-1
                    DELAY-2 ANNUL-TRUE-2 ANNUL-FALSE-2
                    ...])

   TEST is an attribute test that indicates whether this `define_delay'
applies to a particular insn.  If so, the number of required delay
slots is determined by the length of the vector specified as the second
argument.  An insn placed in delay slot N must satisfy attribute test
DELAY-N.  ANNUL-TRUE-N is an attribute test that specifies which insns
may be annulled if the branch is true.  Similarly, ANNUL-FALSE-N
specifies which insns in the delay slot may be annulled if the branch
is false.  If annulling is not supported for that delay slot, `(nil)'
should be coded.

   For example, in the common case where branch and call insns require
a single delay slot, which may contain any insn other than a branch or
call, the following would be placed in the `md' file:

     (define_delay (eq_attr "type" "branch,call")
                   [(eq_attr "type" "!branch,call") (nil) (nil)])

   Multiple `define_delay' expressions may be specified.  In this case,
each such expression specifies different delay slot requirements and
there must be no insn for which tests in two `define_delay' expressions
are both true.

   For example, if we have a machine that requires one delay slot for
branches but two for calls,  no delay slot can contain a branch or call
insn, and any valid insn in the delay slot for the branch can be
annulled if the branch is true, we might represent this as follows:

     (define_delay (eq_attr "type" "branch")
        [(eq_attr "type" "!branch,call") (eq_attr "type" "!branch,call") (nil)])
     
     (define_delay (eq_attr "type" "call")
                   [(eq_attr "type" "!branch,call") (nil) (nil)
                    (eq_attr "type" "!branch,call") (nil) (nil)])


@EndNode

@Node "Function Units" "gcc.guide/Function Units"
@Prev "Delay Slots"
@Toc "Insn Attributes"

Specifying Function Units
-------------------------

   On most RISC machines, there are instructions whose results are not
available for a specific number of cycles.  Common cases are
instructions that load data from memory.  On many machines, a pipeline
stall will result if the data is referenced too soon after the load
instruction.

   In addition, many newer microprocessors have multiple function
units, usually one for integer and one for floating point, and often
will incur pipeline stalls when a result that is needed is not yet
ready.

   The descriptions in this section allow the specification of how much
time must elapse between the execution of an instruction and the time
when its result is used.  It also allows specification of when the
execution of an instruction will delay execution of similar instructions
due to function unit conflicts.

   For the purposes of the specifications in this section, a machine is
divided into "function units", each of which execute a specific class
of instructions.  Function units that accept one instruction each cycle
and allow a result to be used in the succeeding instruction (usually
via forwarding) need not be specified.  Classic RISC microprocessors
will normally have a single function unit, which we can call `memory'. 
The newer "superscalar" processors will often have function units for
floating point operations, usually at least a floating point adder and
multiplier.

   Each usage of a function units by a class of insns is specified with
a `define_function_unit' expression, which looks like this:

     (define_function_unit NAME MULTIPLICITY SIMULTANEITY
     		      TEST READY-DELAY BUSY-DELAY
     		     [CONFLICT-LIST])

   NAME is a string giving the name of the function unit.

   MULTIPLICITY is an integer specifying the number of identical units
in the processor.  If more than one unit is specified, they will be
scheduled independently.  Only truly independent units should be
counted; a pipelined unit should be specified as a single unit.  (The
only common example of a machine that has multiple function units for a
single instruction class that are truly independent and not pipelined
are the two multiply and two increment units of the CDC 6600.)

   SIMULTANEITY specifies the maximum number of insns that can be
executing in each instance of the function unit simultaneously or zero
if the unit is pipelined and has no limit.

   All `define_function_unit' definitions referring to function unit
NAME must have the same name and values for MULTIPLICITY and
SIMULTANEITY.

   TEST is an attribute test that selects the insns we are describing
in this definition.  Note that an insn may use more than one function
unit and a function unit may be specified in more than one
`define_function_unit'.

   READY-DELAY is an integer that specifies the number of cycles after
which the result of the instruction can be used without introducing any
stalls.

   BUSY-DELAY is an integer that represents the default cost if an insn
is scheduled for this unit while the unit is active with another insn. 
If SIMULTANEITY is zero, this specification is ignored. Otherwise, a
zero value indicates that these insns execute on NAME in a fully
pipelined fashion, even if SIMULTANEITY is non-zero.  A non-zero value
indicates that scheduling a new insn on this unit while another is
active will incur a cost.  A cost of two indicates a single cycle
delay.  For a normal non-pipelined function unit, BUSY-DELAY will be
twice READY-DELAY.

   CONFLICT-LIST is an optional list giving detailed conflict costs for
this unit.  If specified, it is a list of condition test expressions
which are applied to insns already executing in NAME.  For each insn
that is in the list, BUSY-DELAY will be used for the conflict cost,
while a value of zero will be used for insns not in the list.

   Typical uses of this vector are where a floating point function unit
can pipeline either single- or double-precision operations, but not
both, or where a memory unit can pipeline loads, but not stores, etc.

   As an example, consider a classic RISC machine where the result of a
load instruction is not available for two cycles (a single "delay"
instruction is required) and where only one load instruction can be
executed simultaneously.  This would be specified as:

     (define_function_unit "memory" 1 1 (eq_attr "type" "load") 2 4)

   For the case of a floating point function unit that can pipeline
either single or double precision, but not both, the following could be
specified:

     (define_function_unit
        "fp" 1 1 (eq_attr "type" "sp_fp") 4 8 (eq_attr "type" "dp_fp")]
     (define_function_unit
        "fp" 1 1 (eq_attr "type" "dp_fp") 4 8 (eq_attr "type" "sp_fp")]

   *Note:* No code currently exists to avoid function unit conflicts,
only data conflicts.  Hence MULTIPLICITY, SIMULTANEITY, BUSY-COST, and
CONFLICT-LIST are currently ignored.  When such code is written, it is
possible that the specifications for these values may be changed.  It
has recently come to our attention that these specifications may not
allow modeling of some of the newer "superscalar" processors that have
insns using multiple pipelined units.  These insns will cause a
potential conflict for the second unit used during their execution and
there is no way of representing that conflict.  We welcome any examples
of how function unit conflicts work in such processors and suggestions
for their representation.


@EndNode

@Node "Target Macros" "gcc.guide/Target Macros"
@Next "Config"
@Prev "Machine Desc"
@Toc "Main"

Target Description Macros
*************************

   In addition to the file `MACHINE.md', a machine description includes
a C header file conventionally given the name `MACHINE.h'.  This header
file defines numerous macros that convey the information about the
target machine that does not fit into the scheme of the `.md' file. 
The file `tm.h' should be a link to `MACHINE.h'.  The header file
`config.h' includes `tm.h' and most compiler source files include
`config.h'.


 @{" Driver " Link "Driver"}               Controlling how the driver runs the compilation passes.
 @{" Run-time Target " Link "Run-time Target"}      Defining `-m' options like `-m68000' and `-m68020'.
 @{" Storage Layout " Link "Storage Layout"}       Defining sizes and alignments of data.
 @{" Type Layout " Link "Type Layout"}          Defining sizes and properties of basic user data types.
 @{" Registers " Link "Registers"}            Naming and describing the hardware registers.
 @{" Register Classes " Link "Register Classes"}     Defining the classes of hardware registers.
 @{" Stack and Calling " Link "Stack and Calling"}    Defining which way the stack grows and by how much.
 @{" Varargs " Link "Varargs"} 		Defining the varargs macros.
 @{" Trampolines " Link "Trampolines"}          Code set up at run time to enter a nested function.
 @{" Library Calls " Link "Library Calls"}        Controlling how library routines are implicitly called.
 @{" Addressing Modes " Link "Addressing Modes"}     Defining addressing modes valid for memory operands.
 @{" Condition Code " Link "Condition Code"}       Defining how insns update the condition code.
 @{" Costs " Link "Costs"}                Defining relative costs of different operations.
 @{" Sections " Link "Sections"}             Dividing storage into text, data, and other sections.
 @{" PIC " Link "PIC"} 			Macros for position independent code.
 @{" Assembler Format " Link "Assembler Format"}     Defining how to write insns and pseudo-ops to output.
 @{" Debugging Info " Link "Debugging Info"}       Defining the format of debugging output.
 @{" Cross-compilation " Link "Cross-compilation"}    Handling floating point for cross-compilers.
 @{" Misc " Link "Misc"}                 Everything else.


@EndNode

@Node "Driver" "gcc.guide/Driver"
@Next "Run-time Target"
@Toc "Target Macros"

Controlling the Compilation Driver, `gcc'
=========================================

`SWITCH_TAKES_ARG (CHAR)'
     A C expression which determines whether the option `-CHAR' takes
     arguments.  The value should be the number of arguments that
     option takes--zero, for many options.

     By default, this macro is defined to handle the standard options
     properly.  You need not define it unless you wish to add additional
     options which take arguments.

`WORD_SWITCH_TAKES_ARG (NAME)'
     A C expression which determines whether the option `-NAME' takes
     arguments.  The value should be the number of arguments that
     option takes--zero, for many options.  This macro rather than
     `SWITCH_TAKES_ARG' is used for multi-character option names.

     By default, this macro is defined to handle the standard options
     properly.  You need not define it unless you wish to add additional
     options which take arguments.

`SWITCHES_NEED_SPACES'
     A string-valued C expression which is nonempty if the linker needs
     a space between the `-L' or `-o' option and its argument.

     If this macro is not defined, the default value is 0.

`CPP_SPEC'
     A C string constant that tells the GNU CC driver program options to
     pass to CPP.  It can also specify how to translate options you
     give to GNU CC into options for GNU CC to pass to the CPP.

     Do not define this macro if it does not need to do anything.

`SIGNED_CHAR_SPEC'
     A C string constant that tells the GNU CC driver program options to
     pass to CPP.  By default, this macro is defined to pass the option
     `-D__CHAR_UNSIGNED__' to CPP if `char' will be treated as
     `unsigned char' by `cc1'.

     Do not define this macro unless you need to override the default
     definition.

`CC1_SPEC'
     A C string constant that tells the GNU CC driver program options to
     pass to `cc1'.  It can also specify how to translate options you
     give to GNU CC into options for GNU CC to pass to the `cc1'.

     Do not define this macro if it does not need to do anything.

`CC1PLUS_SPEC'
     A C string constant that tells the GNU CC driver program options to
     pass to `cc1plus'.  It can also specify how to translate options
     you give to GNU CC into options for GNU CC to pass to the
     `cc1plus'.

     Do not define this macro if it does not need to do anything.

`ASM_SPEC'
     A C string constant that tells the GNU CC driver program options to
     pass to the assembler.  It can also specify how to translate
     options you give to GNU CC into options for GNU CC to pass to the
     assembler. See the file `sun3.h' for an example of this.

     Do not define this macro if it does not need to do anything.

`ASM_FINAL_SPEC'
     A C string constant that tells the GNU CC driver program how to
     run any programs which cleanup after the normal assembler.
     Normally, this is not needed.  See the file `mips.h' for an
     example of this.

     Do not define this macro if it does not need to do anything.

`LINK_SPEC'
     A C string constant that tells the GNU CC driver program options to
     pass to the linker.  It can also specify how to translate options
     you give to GNU CC into options for GNU CC to pass to the linker.

     Do not define this macro if it does not need to do anything.

`LIB_SPEC'
     Another C string constant used much like `LINK_SPEC'.  The
     difference between the two is that `LIB_SPEC' is used at the end
     of the command given to the linker.

     If this macro is not defined, a default is provided that loads the
     standard C library from the usual place.  See `gcc.c'.

`STARTFILE_SPEC'
     Another C string constant used much like `LINK_SPEC'.  The
     difference between the two is that `STARTFILE_SPEC' is used at the
     very beginning of the command given to the linker.

     If this macro is not defined, a default is provided that loads the
     standard C startup file from the usual place.  See `gcc.c'.

`ENDFILE_SPEC'
     Another C string constant used much like `LINK_SPEC'.  The
     difference between the two is that `ENDFILE_SPEC' is used at the
     very end of the command given to the linker.

     Do not define this macro if it does not need to do anything.

`LINK_LIBGCC_SPECIAL'
     Define this macro meaning that `gcc' should find the library
     `libgcc.a' by hand, rather than passing the argument `-lgcc' to
     tell the linker to do the search.

`RELATIVE_PREFIX_NOT_LINKDIR'
     Define this macro to tell `gcc' that it should only translate a
     `-B' prefix into a `-L' linker option if the prefix indicates an
     absolute file name.

`STANDARD_EXEC_PREFIX'
     Define this macro as a C string constant if you wish to override
     the standard choice of `/usr/local/lib/gcc-lib/' as the default
     prefix to try when searching for the executable files of the
     compiler.

`MD_EXEC_PREFIX'
     If defined, this macro is an additional prefix to try after
     `STANDARD_EXEC_PREFIX'.  `MD_EXEC_PREFIX' is not searched when the
     `-b' option is used, or the compiler is built as a cross compiler.

`STANDARD_STARTFILE_PREFIX'
     Define this macro as a C string constant if you wish to override
     the standard choice of `/usr/local/lib/' as the default prefix to
     try when searching for startup files such as `crt0.o'.

`MD_STARTFILE_PREFIX'
     If defined, this macro supplies an additional prefix to try after
     the standard prefixes.  `MD_EXEC_PREFIX' is not searched when the
     `-b' option is used, or when the compiler is built as a cross
     compiler.

`MD_STARTFILE_PREFIX_1'
     If defined, this macro supplies yet another prefix to try after the
     standard prefixes.  It is not searched when the `-b' option is
     used, or when the compiler is built as a cross compiler.

`LOCAL_INCLUDE_DIR'
     Define this macro as a C string constant if you wish to override
     the standard choice of `/usr/local/include' as the default prefix
     to try when searching for local header files.  `LOCAL_INCLUDE_DIR'
     comes before `SYSTEM_INCLUDE_DIR' in the search order.

     Cross compilers do not use this macro and do not search either
     `/usr/local/include' or its replacement.

`SYSTEM_INCLUDE_DIR'
     Define this macro as a C string constant if you wish to specify a
     system-specific directory to search for header files before the
     standard directory.  `SYSTEM_INCLUDE_DIR' comes before
     `STANDARD_INCLUDE_DIR' in the search order.

     Cross compilers do not use this macro and do not search the
     directory specified.

`STANDARD_INCLUDE_DIR'
     Define this macro as a C string constant if you wish to override
     the standard choice of `/usr/include' as the default prefix to try
     when searching for header files.

     Cross compilers do not use this macro and do not search either
     `/usr/include' or its replacement.

`INCLUDE_DEFAULTS'
     Define this macro if you wish to override the entire default
     search path for include files.  The default search path includes
     `GPLUSPLUS_INCLUDE_DIR', `GCC_INCLUDE_DIR', `LOCAL_INCLUDE_DIR',
     `SYSTEM_INCLUDE_DIR', and `STANDARD_INCLUDE_DIR'.  In addition,
     the macros `GPLUSPLUS_INCLUDE_DIR' and `GCC_INCLUDE_DIR' are
     defined automatically by `Makefile', and specify private search
     areas for GCC.  The directory `GPLUSPLUS_INCLUDE_DIR' is used only
     for C++ programs.

     The definition should be an initializer for an array of structures.
     Each array element should have two elements: the directory name (a
     string constant) and a flag for C++-only directories.  Mark the
     end of the array with a null element.  For example, here is the
     definition used for VMS:

          #define INCLUDE_DEFAULTS \
          {                                       \
            { "GNU_GXX_INCLUDE:", 1},             \
            { "GNU_CC_INCLUDE:", 0},              \
            { "SYS$SYSROOT:[SYSLIB.]", 0},        \
            { ".", 0},                            \
            { 0, 0}                               \
          }

   Here is the order of prefixes tried for exec files:

  1. Any prefixes specified by the user with `-B'.

  2. The environment variable `GCC_EXEC_PREFIX', if any.

  3. The directories specified by the environment variable
     `COMPILER_PATH'.

  4. The macro `STANDARD_EXEC_PREFIX'.

  5. `/usr/lib/gcc/'.

  6. The macro `MD_EXEC_PREFIX', if any.

   Here is the order of prefixes tried for startfiles:

  1. Any prefixes specified by the user with `-B'.

  2. The environment variable `GCC_EXEC_PREFIX', if any.

  3. The directories specified by the environment variable
     `LIBRARY_PATH'.

  4. The macro `STANDARD_EXEC_PREFIX'.

  5. `/usr/lib/gcc/'.

  6. The macro `MD_EXEC_PREFIX', if any.

  7. The macro `MD_STARTFILE_PREFIX', if any.

  8. The macro `STANDARD_STARTFILE_PREFIX'.

  9. `/lib/'.

 10. `/usr/lib/'.


@EndNode

@Node "Run-time Target" "gcc.guide/Run-time Target"
@Next "Storage Layout"
@Prev "Driver"
@Toc "Target Macros"

Run-time Target Specification
=============================

`CPP_PREDEFINES'
     Define this to be a string constant containing `-D' options to
     define the predefined macros that identify this machine and system.
     These macros will be predefined unless the `-ansi' option is
     specified.

     In addition, a parallel set of macros are predefined, whose names
     are made by appending `__' at the beginning and at the end.  These
     `__' macros are permitted by the ANSI standard, so they are
     predefined regardless of whether `-ansi' is specified.

     For example, on the Sun, one can use the following value:

          "-Dmc68000 -Dsun -Dunix"

     The result is to define the macros `__mc68000__', `__sun__' and
     `__unix__' unconditionally, and the macros `mc68000', `sun' and
     `unix' provided `-ansi' is not specified.

`STDC_VALUE'
     Define the value to be assigned to the built-in macro `__STDC__'.
     The default is the value `1'.

`extern int target_flags;'
     This declaration should be present.

`TARGET_...'
     This series of macros is to allow compiler command arguments to
     enable or disable the use of optional features of the target
     machine. For example, one machine description serves both the
     68000 and the 68020; a command argument tells the compiler whether
     it should use 68020-only instructions or not.  This command
     argument works by means of a macro `TARGET_68020' that tests a bit
     in `target_flags'.

     Define a macro `TARGET_FEATURENAME' for each such option. Its
     definition should test a bit in `target_flags'; for example:

          #define TARGET_68020 (target_flags & 1)

     One place where these macros are used is in the
     condition-expressions of instruction patterns.  Note how
     `TARGET_68020' appears frequently in the 68000 machine description
     file, `m68k.md'. Another place they are used is in the definitions
     of the other macros in the `MACHINE.h' file.

`TARGET_SWITCHES'
     This macro defines names of command options to set and clear bits
     in `target_flags'.  Its definition is an initializer with a
     subgrouping for each command option.

     Each subgrouping contains a string constant, that defines the
     option name, and a number, which contains the bits to set in
     `target_flags'.  A negative number says to clear bits instead; the
     negative of the number is which bits to clear.  The actual option
     name is made by appending `-m' to the specified name.

     One of the subgroupings should have a null string.  The number in
     this grouping is the default value for `target_flags'.  Any target
     options act starting with that value.

     Here is an example which defines `-m68000' and `-m68020' with
     opposite meanings, and picks the latter as the default:

          #define TARGET_SWITCHES \
            { { "68020", 1},      \
              { "68000", -1},     \
              { "", 1}}

`TARGET_OPTIONS'
     This macro is similar to `TARGET_SWITCHES' but defines names of
     command options that have values.  Its definition is an
     initializer with a subgrouping for each command option.

     Each subgrouping contains a string constant, that defines the
     fixed part of the option name, and the address of a variable.  The
     variable, type `char *', is set to the variable part of the given
     option if the fixed part matches.  The actual option name is made
     by appending `-m' to the specified name.

     Here is an example which defines `-mshort-data-NUMBER'.  If the
     given option is `-mshort-data-512', the variable `m88k_short_data'
     will be set to the string `"512"'.

          extern char *m88k_short_data;
          #define TARGET_OPTIONS { { "short-data-", &m88k_short_data } }

`TARGET_VERSION'
     This macro is a C statement to print on `stderr' a string
     describing the particular machine description choice.  Every
     machine description should define `TARGET_VERSION'.  For example:

          #ifdef MOTOROLA
          #define TARGET_VERSION fprintf (stderr, " (68k, Motorola syntax)");
          #else
          #define TARGET_VERSION fprintf (stderr, " (68k, MIT syntax)");
          #endif

`OVERRIDE_OPTIONS'
     Sometimes certain combinations of command options do not make
     sense on a particular target machine.  You can define a macro
     `OVERRIDE_OPTIONS' to take account of this.  This macro, if
     defined, is executed once just after all the command options have
     been parsed.

     Don't use this macro to turn on various extra optimizations for
     `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.

`OPTIMIZATION_OPTIONS (LEVEL)'
     Some machines may desire to change what optimizations are
     performed for various optimization levels.   This macro, if
     defined, is executed once just after the optimization level is
     determined and before the remainder of the command options have
     been parsed.  Values set in this macro are used as the default
     values for the other command line options.

     LEVEL is the optimization level specified; 2 if -O2 is specified,
     1 if -O is specified, and 0 if neither is specified.

     *Do not examine `write_symbols' in this macro!* The debugging
     options are not supposed to alter the generated code.


@EndNode

@Node "Storage Layout" "gcc.guide/Storage Layout"
@Next "Type Layout"
@Prev "Run-time Target"
@Toc "Target Macros"

Storage Layout
==============

   Note that the definitions of the macros in this table which are
sizes or alignments measured in bits do not need to be constant.  They
can be C expressions that refer to static variables, such as the
`target_flags'. See @{"Run-time Target" Link "Run-time Target"}.

`BITS_BIG_ENDIAN'
     Define this macro to be the value 1 if the most significant bit in
     a byte has the lowest number; otherwise define it to be the value
     zero. This means that bit-field instructions count from the most
     significant bit.  If the machine has no bit-field instructions,
     this macro is irrelevant.

     This macro does not affect the way structure fields are packed into
     bytes or words; that is controlled by `BYTES_BIG_ENDIAN'.

`BYTES_BIG_ENDIAN'
     Define this macro to be 1 if the most significant byte in a word
     has the lowest number.

`WORDS_BIG_ENDIAN'
     Define this macro to be 1 if, in a multiword object, the most
     significant word has the lowest number.

`BITS_PER_UNIT'
     Number of bits in an addressable storage unit (byte); normally 8.

`BITS_PER_WORD'
     Number of bits in a word; normally 32.

`MAX_BITS_PER_WORD'
     Maximum number of bits in a word.  If this is undefined, the
     default is `BITS_PER_WORD'.  Otherwise, it is the constant value
     that is the largest value that `BITS_PER_WORD' can have at
     run-time.

`UNITS_PER_WORD'
     Number of storage units in a word; normally 4.

`POINTER_SIZE'
     Width of a pointer, in bits.

`PARM_BOUNDARY'
     Normal alignment required for function parameters on the stack, in
     bits.  All stack parameters receive least this much alignment
     regardless of data type.  On most machines, this is the same as the
     size of an integer.

`STACK_BOUNDARY'
     Define this macro if you wish to preserve a certain alignment for
     the stack pointer.  The definition is a C expression for the
     desired alignment (measured in bits).

     If `PUSH_ROUNDING' is not defined, the stack will always be aligned
     to the specified boundary.  If `PUSH_ROUNDING' is defined and
     specifies a less strict alignment than `STACK_BOUNDARY', the stack
     may be momentarily unaligned while pushing arguments.

`FUNCTION_BOUNDARY'
     Alignment required for a function entry point, in bits.

`BIGGEST_ALIGNMENT'
     Biggest alignment that any data type can require on this machine,
     in bits.

`BIGGEST_FIELD_ALIGNMENT'
     Biggest alignment that any structure field can require on this
     machine, in bits.  If defined, this overrides `BIGGEST_ALIGNMENT'
     for structure fields only.

`MAX_OFILE_ALIGNMENT'
     Biggest alignment supported by the object file format of this
     machine. Use this macro to limit the alignment which can be
     specified using the `__attribute__ ((aligned (N)))' construct.  If
     not defined, the default value is `BIGGEST_ALIGNMENT'.

`DATA_ALIGNMENT (TYPE, BASIC-ALIGN)'
     If defined, a C expression to compute the alignment for a static
     variable.  TYPE is the data type, and BASIC-ALIGN is the alignment
     that the object would ordinarily have.  The value of this macro is
     used instead of that alignment to align the object.

     If this macro is not defined, then BASIC-ALIGN is used.

     One use of this macro is to increase alignment of medium-size data
     to make it all fit in fewer cache lines.  Another is to cause
     character arrays to be word-aligned so that `strcpy' calls that
     copy constants to character arrays can be done inline.

`CONSTANT_ALIGNMENT (CONSTANT, BASIC-ALIGN)'
     If defined, a C expression to compute the alignment given to a
     constant that is being placed in memory.  CONSTANT is the constant
     and BASIC-ALIGN is the alignment that the object would ordinarily
     have.  The value of this macro is used instead of that alignment to
     align the object.

     If this macro is not defined, then BASIC-ALIGN is used.

     The typical use of this macro is to increase alignment for string
     constants to be word aligned so that `strcpy' calls that copy
     constants can be done inline.

`EMPTY_FIELD_BOUNDARY'
     Alignment in bits to be given to a structure bit field that
     follows an empty field such as `int : 0;'.

     Note that `PCC_BITFIELD_TYPE_MATTERS' also affects the alignment
     that results from an empty field.

`STRUCTURE_SIZE_BOUNDARY'
     Number of bits which any structure or union's size must be a
     multiple of. Each structure or union's size is rounded up to a
     multiple of this.

     If you do not define this macro, the default is the same as
     `BITS_PER_UNIT'.

`STRICT_ALIGNMENT'
     Define this macro to be the value 1 if instructions will fail to
     work if given data not on the nominal alignment.  If instructions
     will merely go slower in that case, define this macro as 0.

`PCC_BITFIELD_TYPE_MATTERS'
     Define this if you wish to imitate the way many other C compilers
     handle alignment of bitfields and the structures that contain them.

     The behavior is that the type written for a bitfield (`int',
     `short', or other integer type) imposes an alignment for the
     entire structure, as if the structure really did contain an
     ordinary field of that type.  In addition, the bitfield is placed
     within the structure so that it would fit within such a field, not
     crossing a boundary for it.

     Thus, on most machines, a bitfield whose type is written as `int'
     would not cross a four-byte boundary, and would force four-byte
     alignment for the whole structure.  (The alignment used may not be
     four bytes; it is controlled by the other alignment parameters.)

     If the macro is defined, its definition should be a C expression;
     a nonzero value for the expression enables this behavior.

     Note that if this macro is not defined, or its value is zero, some
     bitfields may cross more than one alignment boundary.  The
     compiler can support such references if there are `insv', `extv',
     and `extzv' insns that can directly reference memory.

     The other known way of making bitfields work is to define
     `STRUCTURE_SIZE_BOUNDARY' as large as `BIGGEST_ALIGNMENT'. Then
     every structure can be accessed with fullwords.

     Unless the machine has bitfield instructions or you define
     `STRUCTURE_SIZE_BOUNDARY' that way, you must define
     `PCC_BITFIELD_TYPE_MATTERS' to have a nonzero value.

`BITFIELD_NBYTES_LIMITED'
     Like PCC_BITFIELD_TYPE_MATTERS except that its effect is limited to
     aligning a bitfield within the structure.

`ROUND_TYPE_SIZE (STRUCT, SIZE, ALIGN)'
     Define this macro as an expression for the overall size of a
     structure (given by STRUCT as a tree node) when the size computed
     from the fields is SIZE and the alignment is ALIGN.

     The default is to round SIZE up to a multiple of ALIGN.

`ROUND_TYPE_ALIGN (STRUCT, COMPUTED, SPECIFIED)'
     Define this macro as an expression for the alignment of a structure
     (given by STRUCT as a tree node) if the alignment computed in the
     usual way is COMPUTED and the alignment explicitly specified was
     SPECIFIED.

     The default is to use SPECIFIED if it is larger; otherwise, use
     the smaller of COMPUTED and `BIGGEST_ALIGNMENT'

`MAX_FIXED_MODE_SIZE'
     An integer expression for the size in bits of the largest integer
     machine mode that should actually be used.  All integer machine
     modes of this size or smaller can be used for structures and
     unions with the appropriate sizes.  If this macro is undefined,
     `GET_MODE_BITSIZE (DImode)' is assumed.

`CHECK_FLOAT_VALUE (MODE, VALUE)'
     A C statement to validate the value VALUE (of type `double') for
     mode MODE.  This means that you check whether VALUE fits within
     the possible range of values for mode MODE on this target machine.
      The mode MODE is always `SFmode' or `DFmode'.

     If VALUE is not valid, you should call `error' to print an error
     message and then assign some valid value to VALUE. Allowing an
     invalid value to go through the compiler can produce incorrect
     assembler code which may even cause Unix assemblers to crash.

     This macro need not be defined if there is no work for it to do.

`TARGET_FLOAT_FORMAT'
     A code distinguishing the floating point format of the target
     machine. There are three defined values:

    `IEEE_FLOAT_FORMAT'
          This code indicates IEEE floating point.  It is the default;
          there is no need to define this macro when the format is IEEE.

    `VAX_FLOAT_FORMAT'
          This code indicates the peculiar format used on the Vax.

    `UNKNOWN_FLOAT_FORMAT'
          This code indicates any other format.

     The value of this macro is compared with `HOST_FLOAT_FORMAT' (see
     @{"Config" Link "Config"}) to determine whether the target machine has the same
     format as the host machine.  If any other formats are actually in
     use on supported machines, new codes should be defined for them.


@EndNode

@Node "Type Layout" "gcc.guide/Type Layout"
@Next "Registers"
@Prev "Storage Layout"
@Toc "Target Macros"

Layout of Source Language Data Types
====================================

   These macros define the sizes and other characteristics of the
standard basic data types used in programs being compiled.  Unlike the
macros in the previous section, these apply to specific features of C
and related languages, rather than to fundamental aspects of storage
layout.

`INT_TYPE_SIZE'
     A C expression for the size in bits of the type `int' on the
     target machine.  If you don't define this, the default is one word.

`SHORT_TYPE_SIZE'
     A C expression for the size in bits of the type `short' on the
     target machine.  If you don't define this, the default is half a
     word. (If this would be less than one storage unit, it is rounded
     up to one unit.)

`LONG_TYPE_SIZE'
     A C expression for the size in bits of the type `long' on the
     target machine.  If you don't define this, the default is one word.

`LONG_LONG_TYPE_SIZE'
     A C expression for the size in bits of the type `long long' on the
     target machine.  If you don't define this, the default is two
     words.

`CHAR_TYPE_SIZE'
     A C expression for the size in bits of the type `char' on the
     target machine.  If you don't define this, the default is one
     quarter of a word.  (If this would be less than one storage unit,
     it is rounded up to one unit.)

`FLOAT_TYPE_SIZE'
     A C expression for the size in bits of the type `float' on the
     target machine.  If you don't define this, the default is one word.

`DOUBLE_TYPE_SIZE'
     A C expression for the size in bits of the type `double' on the
     target machine.  If you don't define this, the default is two
     words.

`LONG_DOUBLE_TYPE_SIZE'
     A C expression for the size in bits of the type `long double' on
     the target machine.  If you don't define this, the default is two
     words.

`DEFAULT_SIGNED_CHAR'
     An expression whose value is 1 or 0, according to whether the type
     `char' should be signed or unsigned by default.  The user can
     always override this default with the options `-fsigned-char' and
     `-funsigned-char'.

`DEFAULT_SHORT_ENUMS'
     A C expression to determine whether to give an `enum' type only as
     many bytes as it takes to represent the range of possible values
     of that type.  A nonzero value means to do that; a zero value
     means all `enum' types should be allocated like `int'.

     If you don't define the macro, the default is 0.

`SIZE_TYPE'
     A C expression for a string describing the name of the data type
     to use for size values.  The typedef name `size_t' is defined
     using the contents of the string.

     The string can contain more than one keyword.  If so, separate
     them with spaces, and write first any length keyword, then
     `unsigned' if appropriate, and finally `int'.  The string must
     exactly match one of the data type names defined in the function
     `init_decl_processing' in the file `c-decl.c'.  You may not omit
     `int' or change the order--that would cause the compiler to crash
     on startup.

     If you don't define this macro, the default is `"long unsigned
     int"'.

`PTRDIFF_TYPE'
     A C expression for a string describing the name of the data type
     to use for the result of subtracting two pointers.  The typedef
     name `ptrdiff_t' is defined using the contents of the string.  See
     `SIZE_TYPE' above for more information.

     If you don't define this macro, the default is `"long int"'.

`WCHAR_TYPE'
     A C expression for a string describing the name of the data type
     to use for wide characters.  The typedef name `wchar_t' is defined
     using the contents of the string.  See `SIZE_TYPE' above for more
     information.

     If you don't define this macro, the default is `"int"'.

`WCHAR_TYPE_SIZE'
     A C expression for the size in bits of the data type for wide
     characters.  This is used in `cpp', which cannot make use of
     `WCHAR_TYPE'.

`OBJC_INT_SELECTORS'
     Define this macro if the type of Objective C selectors should be
     `int'.

     If this macro is not defined, then selectors should have the type
     `struct objc_selector *'.

`OBJC_SELECTORS_WITHOUT_LABELS'
     Define this macro if the compiler can group all the selectors
     together into a vector and use just one label at the beginning of
     the vector. Otherwise, the compiler must give each selector its
     own assembler label.

     On certain machines, it is important to have a separate label for
     each selector because this enables the linker to eliminate
     duplicate selectors.

`TARGET_BELL'
     A C constant expression for the integer value for escape sequence
     `\a'.

`TARGET_BS'
`TARGET_TAB'
`TARGET_NEWLINE'
     C constant expressions for the integer values for escape sequences
     `\b', `\t' and `\n'.

`TARGET_VT'
`TARGET_FF'
`TARGET_CR'
     C constant expressions for the integer values for escape sequences
     `\v', `\f' and `\r'.


@EndNode

@Node "Registers" "gcc.guide/Registers"
@Next "Register Classes"
@Prev "Type Layout"
@Toc "Target Macros"

Register Usage
==============

   This section explains how to describe what registers the target
machine has, and how (in general) they can be used.

   The description of which registers a specific instruction can use is
done with register classes; see @{"Register Classes" Link "Register Classes"}.  For information on
using registers to access a stack frame, see @{"Frame Registers" Link "Frame Registers"}. For
passing values in registers, see @{"Register Arguments" Link "Register Arguments"}. For returning
values in registers, see @{"Scalar Return" Link "Scalar Return"}.


 @{" Register Basics " Link "Register Basics"} 		Number and kinds of registers.
 @{" Allocation Order " Link "Allocation Order"} 		Order in which registers are allocated.
 @{" Values in Registers " Link "Values in Registers"} 		What kinds of values each reg can hold.
 @{" Leaf Functions " Link "Leaf Functions"} 		Renumbering registers for leaf functions.
 @{" Stack Registers " Link "Stack Registers"} 		Handling a register stack such as 80387.
 @{" Obsolete Register Macros " Link "Obsolete Register Macros"} 	Macros formerly used for the 80387.


@EndNode

@Node "Register Basics" "gcc.guide/Register Basics"
@Next "Allocation Order"
@Toc "Registers"

Basic Characteristics of Registers
----------------------------------

`FIRST_PSEUDO_REGISTER'
     Number of hardware registers known to the compiler.  They receive
     numbers 0 through `FIRST_PSEUDO_REGISTER-1'; thus, the first
     pseudo register's number really is assigned the number
     `FIRST_PSEUDO_REGISTER'.

`FIXED_REGISTERS'
     An initializer that says which registers are used for fixed
     purposes all throughout the compiled code and are therefore not
     available for general allocation.  These would include the stack
     pointer, the frame pointer (except on machines where that can be
     used as a general register when no frame pointer is needed), the
     program counter on machines where that is considered one of the
     addressable registers, and any other numbered register with a
     standard use.

     This information is expressed as a sequence of numbers, separated
     by commas and surrounded by braces.  The Nth number is 1 if
     register N is fixed, 0 otherwise.

     The table initialized from this macro, and the table initialized by
     the following one, may be overridden at run time either
     automatically, by the actions of the macro
     `CONDITIONAL_REGISTER_USAGE', or by the user with the command
     options `-ffixed-REG', `-fcall-used-REG' and `-fcall-saved-REG'.

`CALL_USED_REGISTERS'
     Like `FIXED_REGISTERS' but has 1 for each register that is
     clobbered (in general) by function calls as well as for fixed
     registers.  This macro therefore identifies the registers that are
     not available for general allocation of values that must live
     across function calls.

     If a register has 0 in `CALL_USED_REGISTERS', the compiler
     automatically saves it on function entry and restores it on
     function exit, if the register is used within the function.

`CONDITIONAL_REGISTER_USAGE'
     Zero or more C statements that may conditionally modify two
     variables `fixed_regs' and `call_used_regs' (both of type `char
     []') after they have been initialized from the two preceding
     macros.

     This is necessary in case the fixed or call-clobbered registers
     depend on target flags.

     You need not define this macro if it has no work to do.

     If the usage of an entire class of registers depends on the target
     flags, you may indicate this to GCC by using this macro to modify
     `fixed_regs' and `call_used_regs' to 1 for each of the registers
     in the classes which should not be used by GCC.  Also define the
     macro `REG_CLASS_FROM_LETTER' to return `NO_REGS' if it is called
     with a letter for a class that shouldn't be used.

     (However, if this class is not included in `GENERAL_REGS' and all
     of the insn patterns whose constraints permit this class are
     controlled by target switches, then GCC will automatically avoid
     using these registers when the target switches are opposed to
     them.)

`NON_SAVING_SETJMP'
     If this macro is defined and has a nonzero value, it means that
     `setjmp' and related functions fail to save the registers, or that
     `longjmp' fails to restore them.  To compensate, the compiler
     avoids putting variables in registers in functions that use
     `setjmp'.


@EndNode

@Node "Allocation Order" "gcc.guide/Allocation Order"
@Next "Values in Registers"
@Prev "Register Basics"
@Toc "Registers"

Order of Allocation of Registers
--------------------------------

`REG_ALLOC_ORDER'
     If defined, an initializer for a vector of integers, containing the
     numbers of hard registers in the order in which GNU CC should
     prefer to use them (from most preferred to least).

     If this macro is not defined, registers are used lowest numbered
     first (all else being equal).

     One use of this macro is on machines where the highest numbered
     registers must always be saved and the save-multiple-registers
     instruction supports only sequences of consecutive registers.  On
     such machines, define `REG_ALLOC_ORDER' to be an initializer that
     lists the highest numbered allocatable register first.

`ORDER_REGS_FOR_LOCAL_ALLOC'
     A C statement (sans semicolon) to choose the order in which to
     allocate hard registers for pseudo-registers local to a basic
     block.

     Store the desired order of registers in the array
     `reg_alloc_order'.  Element 0 should be the register to allocate
     first; element 1, the next register; and so on.

     The macro body should not assume anything about the contents of
     `reg_alloc_order' before execution of the macro.

     On most machines, it is not necessary to define this macro.


@EndNode

@Node "Values in Registers" "gcc.guide/Values in Registers"
@Next "Leaf Functions"
@Prev "Allocation Order"
@Toc "Registers"

How Values Fit in Registers
---------------------------

   This section discusses the macros that describe which kinds of values
(specifically, which machine modes) each register can hold, and how many
consecutive registers are needed for a given mode.

`HARD_REGNO_NREGS (REGNO, MODE)'
     A C expression for the number of consecutive hard registers,
     starting at register number REGNO, required to hold a value of mode
     MODE.

     On a machine where all registers are exactly one word, a suitable
     definition of this macro is

          #define HARD_REGNO_NREGS(REGNO, MODE)            \
             ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1)  \
              / UNITS_PER_WORD))

`HARD_REGNO_MODE_OK (REGNO, MODE)'
     A C expression that is nonzero if it is permissible to store a
     value of mode MODE in hard register number REGNO (or in several
     registers starting with that one).  For a machine where all
     registers are equivalent, a suitable definition is

          #define HARD_REGNO_MODE_OK(REGNO, MODE) 1

     It is not necessary for this macro to check for the numbers of
     fixed registers, because the allocation mechanism considers them
     to be always occupied.

     On some machines, double-precision values must be kept in even/odd
     register pairs.  The way to implement that is to define this macro
     to reject odd register numbers for such modes.

     The minimum requirement for a mode to be OK in a register is that
     the `movMODE' instruction pattern support moves between the
     register and any other hard register for which the mode is OK; and
     that moving a value into the register and back out not alter it.

     Since the same instruction used to move `SImode' will work for all
     narrower integer modes, it is not necessary on any machine for
     `HARD_REGNO_MODE_OK' to distinguish between these modes, provided
     you define patterns `movhi', etc., to take advantage of this.  This
     is useful because of the interaction between `HARD_REGNO_MODE_OK'
     and `MODES_TIEABLE_P'; it is very desirable for all integer modes
     to be tieable.

     Many machines have special registers for floating point arithmetic.
     Often people assume that floating point machine modes are allowed
     only in floating point registers.  This is not true.  Any
     registers that can hold integers can safely *hold* a floating
     point machine mode, whether or not floating arithmetic can be done
     on it in those registers.  Integer move instructions can be used
     to move the values.

     On some machines, though, the converse is true: fixed-point machine
     modes may not go in floating registers.  This is true if the
     floating registers normalize any value stored in them, because
     storing a non-floating value there would garble it.  In this case,
     `HARD_REGNO_MODE_OK' should reject fixed-point machine modes in
     floating registers.  But if the floating registers do not
     automatically normalize, if you can store any bit pattern in one
     and retrieve it unchanged without a trap, then any machine mode
     may go in a floating register, so you can define this macro to say
     so.

     On some machines, such as the Sparc and the Mips, we get better
     code by defining `HARD_REGNO_MODE_OK' to forbid integers in
     floating registers, even though the hardware is capable of
     handling them.  This is because transferring values between
     floating registers and general registers is so slow that it is
     better to keep the integer in memory.

     The primary significance of special floating registers is rather
     that they are the registers acceptable in floating point arithmetic
     instructions.  However, this is of no concern to
     `HARD_REGNO_MODE_OK'.  You handle it by writing the proper
     constraints for those instructions.

     On some machines, the floating registers are especially slow to
     access, so that it is better to store a value in a stack frame
     than in such a register if floating point arithmetic is not being
     done.  As long as the floating registers are not in class
     `GENERAL_REGS', they will not be used unless some pattern's
     constraint asks for one.

`MODES_TIEABLE_P (MODE1, MODE2)'
     A C expression that is nonzero if it is desirable to choose
     register allocation so as to avoid move instructions between a
     value of mode MODE1 and a value of mode MODE2.

     If `HARD_REGNO_MODE_OK (R, MODE1)' and `HARD_REGNO_MODE_OK (R,
     MODE2)' are ever different for any R, then `MODES_TIEABLE_P (MODE1,
     MODE2)' must be zero.


@EndNode

@Node "Leaf Functions" "gcc.guide/Leaf Functions"
@Next "Stack Registers"
@Prev "Values in Registers"
@Toc "Registers"

Handling Leaf Functions
-----------------------

   On some machines, a leaf function (i.e., one which make no calls)
can run more efficiently if it does not make its own register window. 
Often this means it is required to receive its arguments in the
registers where they are passed by the caller, instead of the registers
where they would normally arrive.

   The special treatment for leaf functions generally applies only when
other conditions are met; for example, often they may use only those
registers for its own variables and temporaries.  We use the term "leaf
function" to mean a function that is suitable for this special
handling, so that functions with no calls are not necessarily "leaf
functions".

   GNU CC assigns register numbers before it knows whether the function
is suitable for leaf function treatment.  So it needs to renumber the
registers in order to output a leaf function.  The following macros
accomplish this.

`LEAF_REGISTERS'
     A C initializer for a vector, indexed by hard register number,
     which contains 1 for a register that is allowable in a candidate
     for leaf function treatment.

     If leaf function treatment involves renumbering the registers,
     then the registers marked here should be the ones before
     renumbering--those that GNU CC would ordinarily allocate.  The
     registers which will actually be used in the assembler code, after
     renumbering, should not be marked with 1 in this vector.

     Define this macro only if the target machine offers a way to
     optimize the treatment of leaf functions.

`LEAF_REG_REMAP (REGNO)'
     A C expression whose value is the register number to which REGNO
     should be renumbered, when a function is treated as a leaf
     function.

     If REGNO is a register number which should not appear in a leaf
     function before renumbering, then the expression should yield -1,
     which will cause the compiler to abort.

     Define this macro only if the target machine offers a way to
     optimize the treatment of leaf functions, and registers need to be
     renumbered to do this.

`REG_LEAF_ALLOC_ORDER'
     If defined, an initializer for a vector of integers, containing the
     numbers of hard registers in the order in which the GNU CC should
     prefer to use them (from most preferred to least) in a leaf
     function.  If this macro is not defined, REG_ALLOC_ORDER is used
     for both non-leaf and leaf-functions.

   Normally, it is necessary for `FUNCTION_PROLOGUE' and
`FUNCTION_EPILOGUE' to treat leaf functions specially.  It can test the
C variable `leaf_function' which is nonzero for leaf functions. (The
variable `leaf_function' is defined only if `LEAF_REGISTERS' is
defined.)


@EndNode

@Node "Stack Registers" "gcc.guide/Stack Registers"
@Next "Obsolete Register Macros"
@Prev "Leaf Functions"
@Toc "Registers"

Registers That Form a Stack
---------------------------

   There are special features to handle computers where some of the
"registers" form a stack, as in the 80387 coprocessor for the 80386.
Stack registers are normally written by pushing onto the stack, and are
numbered relative to the top of the stack.

   Currently, GNU CC can only handle one group of stack-like registers,
and they must be consecutively numbered.

`STACK_REGS'
     Define this if the machine has any stack-like registers.

`FIRST_STACK_REG'
     The number of the first stack-like register.  This one is the top
     of the stack.

`LAST_STACK_REG'
     The number of the last stack-like register.  This one is the
     bottom of the stack.


@EndNode

@Node "Obsolete Register Macros" "gcc.guide/Obsolete Register Macros"
@Prev "Stack Registers"
@Toc "Registers"

Obsolete Macros for Controlling Register Usage
----------------------------------------------

   These features do not work very well.  They exist because they used
to be required to generate correct code for the 80387 coprocessor of the
80386.  They are no longer used by that machine description and may be
removed in a later version of the compiler.  Don't use them!

`OVERLAPPING_REGNO_P (REGNO)'
     If defined, this is a C expression whose value is nonzero if hard
     register number REGNO is an overlapping register.  This means a
     hard register which overlaps a hard register with a different
     number. (Such overlap is undesirable, but occasionally it allows a
     machine to be supported which otherwise could not be.)  This macro
     must return nonzero for *all* the registers which overlap each
     other.  GNU CC can use an overlapping register only in certain
     limited ways.  It can be used for allocation within a basic block,
     and may be spilled for reloading; that is all.

     If this macro is not defined, it means that none of the hard
     registers overlap each other.  This is the usual situation.

`INSN_CLOBBERS_REGNO_P (INSN, REGNO)'
     If defined, this is a C expression whose value should be nonzero if
     the insn INSN has the effect of mysteriously clobbering the
     contents of hard register number REGNO.  By "mysterious" we mean
     that the insn's RTL expression doesn't describe such an effect.

     If this macro is not defined, it means that no insn clobbers
     registers mysteriously.  This is the usual situation; all else
     being equal, it is best for the RTL expression to show all the
     activity.

`PRESERVE_DEATH_INFO_REGNO_P (REGNO)'
     If defined, this is a C expression whose value is nonzero if
     accurate `REG_DEAD' notes are needed for hard register number REGNO
     at the time of outputting the assembler code.  When this is so, a
     few optimizations that take place after register allocation and
     could invalidate the death notes are not done when this register is
     involved.

     You would arrange to preserve death info for a register when some
     of the code in the machine description which is executed to write
     the assembler code looks at the death notes.  This is necessary
     only when the actual hardware feature which GNU CC thinks of as a
     register is not actually a register of the usual sort.  (It might,
     for example, be a hardware stack.)

     If this macro is not defined, it means that no death notes need to
     be preserved.  This is the usual situation.


@EndNode

@Node "Register Classes" "gcc.guide/Register Classes"
@Next "Stack and Calling"
@Prev "Registers"
@Toc "Target Macros"

Register Classes
================

   On many machines, the numbered registers are not all equivalent. For
example, certain registers may not be allowed for indexed addressing;
certain registers may not be allowed in some instructions.  These
machine restrictions are described to the compiler using "register
classes".

   You define a number of register classes, giving each one a name and
saying which of the registers belong to it.  Then you can specify
register classes that are allowed as operands to particular instruction
patterns.

   In general, each register will belong to several classes.  In fact,
one class must be named `ALL_REGS' and contain all the registers. 
Another class must be named `NO_REGS' and contain no registers.  Often
the union of two classes will be another class; however, this is not
required.

   One of the classes must be named `GENERAL_REGS'.  There is nothing
terribly special about the name, but the operand constraint letters `r'
and `g' specify this class.  If `GENERAL_REGS' is the same as
`ALL_REGS', just define it as a macro which expands to `ALL_REGS'.

   Order the classes so that if class X is contained in class Y then X
has a lower class number than Y.

   The way classes other than `GENERAL_REGS' are specified in operand
constraints is through machine-dependent operand constraint letters.
You can define such letters to correspond to various classes, then use
them in operand constraints.

   You should define a class for the union of two classes whenever some
instruction allows both classes.  For example, if an instruction allows
either a floating point (coprocessor) register or a general register
for a certain operand, you should define a class `FLOAT_OR_GENERAL_REGS'
which includes both of them.  Otherwise you will get suboptimal code.

   You must also specify certain redundant information about the
register classes: for each class, which classes contain it and which
ones are contained in it; for each pair of classes, the largest class
contained in their union.

   When a value occupying several consecutive registers is expected in a
certain class, all the registers used must belong to that class.
Therefore, register classes cannot be used to enforce a requirement for
a register pair to start with an even-numbered register.  The way to
specify this requirement is with `HARD_REGNO_MODE_OK'.

   Register classes used for input-operands of bitwise-and or shift
instructions have a special requirement: each such class must have, for
each fixed-point machine mode, a subclass whose registers can transfer
that mode to or from memory.  For example, on some machines, the
operations for single-byte values (`QImode') are limited to certain
registers.  When this is so, each register class that is used in a
bitwise-and or shift instruction must have a subclass consisting of
registers from which single-byte values can be loaded or stored.  This
is so that `PREFERRED_RELOAD_CLASS' can always have a possible value to
return.

`enum reg_class'
     An enumeral type that must be defined with all the register class
     names as enumeral values.  `NO_REGS' must be first.  `ALL_REGS'
     must be the last register class, followed by one more enumeral
     value, `LIM_REG_CLASSES', which is not a register class but rather
     tells how many classes there are.

     Each register class has a number, which is the value of casting
     the class name to type `int'.  The number serves as an index in
     many of the tables described below.

`N_REG_CLASSES'
     The number of distinct register classes, defined as follows:

          #define N_REG_CLASSES (int) LIM_REG_CLASSES

`REG_CLASS_NAMES'
     An initializer containing the names of the register classes as C
     string constants.  These names are used in writing some of the
     debugging dumps.

`REG_CLASS_CONTENTS'
     An initializer containing the contents of the register classes, as
     integers which are bit masks.  The Nth integer specifies the
     contents of class N.  The way the integer MASK is interpreted is
     that register R is in the class if `MASK & (1 << R)' is 1.

     When the machine has more than 32 registers, an integer does not
     suffice. Then the integers are replaced by sub-initializers,
     braced groupings containing several integers.  Each
     sub-initializer must be suitable as an initializer for the type
     `HARD_REG_SET' which is defined in `hard-reg-set.h'.

`REGNO_REG_CLASS (REGNO)'
     A C expression whose value is a register class containing hard
     register REGNO.  In general there is more that one such class;
     choose a class which is "minimal", meaning that no smaller class
     also contains the register.

`BASE_REG_CLASS'
     A macro whose definition is the name of the class to which a valid
     base register must belong.  A base register is one used in an
     address which is the register value plus a displacement.

`INDEX_REG_CLASS'
     A macro whose definition is the name of the class to which a valid
     index register must belong.  An index register is one used in an
     address where its value is either multiplied by a scale factor or
     added to another register (as well as added to a displacement).

`REG_CLASS_FROM_LETTER (CHAR)'
     A C expression which defines the machine-dependent operand
     constraint letters for register classes.  If CHAR is such a
     letter, the value should be the register class corresponding to
     it.  Otherwise, the value should be `NO_REGS'.  The register
     letter `r', corresponding to class `GENERAL_REGS', will not be
     passed to this macro; you do not need to handle it.

`REGNO_OK_FOR_BASE_P (NUM)'
     A C expression which is nonzero if register number NUM is suitable
     for use as a base register in operand addresses.  It may be either
     a suitable hard register or a pseudo register that has been
     allocated such a hard register.

`REGNO_OK_FOR_INDEX_P (NUM)'
     A C expression which is nonzero if register number NUM is suitable
     for use as an index register in operand addresses.  It may be
     either a suitable hard register or a pseudo register that has been
     allocated such a hard register.

     The difference between an index register and a base register is
     that the index register may be scaled.  If an address involves the
     sum of two registers, neither one of them scaled, then either one
     may be labeled the "base" and the other the "index"; but whichever
     labeling is used must fit the machine's constraints of which
     registers may serve in each capacity.  The compiler will try both
     labelings, looking for one that is valid, and will reload one or
     both registers only if neither labeling works.

`PREFERRED_RELOAD_CLASS (X, CLASS)'
     A C expression that places additional restrictions on the register
     class to use when it is necessary to copy value X into a register
     in class CLASS.  The value is a register class; perhaps CLASS, or
     perhaps another, smaller class.  On many machines, the definition

          #define PREFERRED_RELOAD_CLASS(X,CLASS) CLASS

     is safe.

     Sometimes returning a more restrictive class makes better code. 
     For example, on the 68000, when X is an integer constant that is
     in range for a `moveq' instruction, the value of this macro is
     always `DATA_REGS' as long as CLASS includes the data registers.
     Requiring a data register guarantees that a `moveq' will be used.

     If X is a `const_double', by returning `NO_REGS' you can force X
     into a memory constant.  This is useful on certain machines where
     immediate floating values cannot be loaded into certain kinds of
     registers.

`LIMIT_RELOAD_CLASS (MODE, CLASS)'
     A C expression that places additional restrictions on the register
     class to use when it is necessary to be able to hold a value of
     mode MODE in a reload register for which class CLASS would
     ordinarily be used.

     Unlike `PREFERRED_RELOAD_CLASS', this macro should be used when
     there are certain modes that simply can't go in certain reload
     classes.

     The value is a register class; perhaps CLASS, or perhaps another,
     smaller class.

     Don't define this macro unless the target machine has limitations
     which require the macro to do something nontrivial.

`SECONDARY_RELOAD_CLASS (CLASS, MODE, X)'
`SECONDARY_INPUT_RELOAD_CLASS (CLASS, MODE, X)'
`SECONDARY_OUTPUT_RELOAD_CLASS (CLASS, MODE, X)'
     Many machines have some registers that cannot be copied directly
     to or from memory or even from other types of registers.  An
     example is the `MQ' register, which on most machines, can only be
     copied to or from general registers, but not memory.  Some
     machines allow copying all registers to and from memory, but
     require a scratch register for stores to some memory locations
     (e.g., those with symbolic address on the RT, and those with
     certain symbolic address on the Sparc when compiling PIC).  In
     some cases, both an intermediate and a scratch register are
     required.

     You should define these macros to indicate to the reload phase
     that it may need to allocate at least one register for a reload in
     addition to the register to contain the data.  Specifically, if
     copying X to a register CLASS in MODE requires an intermediate
     register, you should define `SECONDARY_INPUT_RELOAD_CLASS' to
     return the largest register class all of whose registers can be
     used as intermediate registers or scratch registers.

     If copying a register CLASS in MODE to X requires an intermediate
     or scratch register, you should define
     `SECONDARY_OUTPUT_RELOAD_CLASS' to return the largest register
     class required.  If the requirements for input and output reloads
     are the same, the macro `SECONDARY_RELOAD_CLASS' should be used
     instead of defining both macros identically.

     The values returned by these macros are often `GENERAL_REGS'.
     Return `NO_REGS' if no spare register is needed; i.e., if X can be
     directly copied to or from a register of CLASS in MODE without
     requiring a scratch register.  Do not define this macro if it
     would always return `NO_REGS'.

     If a scratch register is required (either with or without an
     intermediate register), you should define patterns for
     `reload_inM' or `reload_outM', as required (see @{"Standard Names" Link "Standard Names"}. 
     These patterns, which will normally be implemented with a
     `define_expand', should be similar to the `movM' patterns, except
     that operand 2 is the scratch register.

     Define constraints for the reload register and scratch register
     that contain a single register class.  If the original reload
     register (whose class is CLASS) can meet the constraint given in
     the pattern, the value returned by these macros is used for the
     class of the scratch register.  Otherwise, two additional reload
     registers are required. Their classes are obtained from the
     constraints in the insn pattern.

     X might be a pseudo-register or a `subreg' of a pseudo-register,
     which could either be in a hard register or in memory. Use
     `true_regnum' to find out; it will return -1 if the pseudo is in
     memory and the hard register number if it is in a register.

     These macros should not be used in the case where a particular
     class of registers can only be copied to memory and not to another
     class of registers.  In that case, secondary reload registers are
     not needed and would not be helpful.  Instead, a stack location
     must be used to perform the copy and the `movM' pattern should use
     memory as a intermediate storage.  This case often occurs between
     floating-point and general registers.

`SMALL_REGISTER_CLASSES'
     Normally the compiler will avoid choosing spill registers from
     registers that have been explicitly mentioned in the rtl (these
     registers are normally those used to pass parameters and return
     values).  However, some machines have so few registers of certain
     classes that there would not be enough registers to use as spill
     registers if this were done.

     On those machines, you should define `SMALL_REGISTER_CLASSES'.
     When it is defined, the compiler allows registers explicitly used
     in the rtl to be used as spill registers but prevents the compiler
     from extending the lifetime of these registers.

     Defining this macro is always safe, but unnecessarily defining
     this macro will reduce the amount of optimizations that can be
     performed in some cases.  If this macro is not defined but needs
     to be, the compiler will run out of reload registers and print a
     fatal error message.

     For most machines, this macro should not be defined.

`CLASS_MAX_NREGS (CLASS, MODE)'
     A C expression for the maximum number of consecutive registers of
     class CLASS needed to hold a value of mode MODE.

     This is closely related to the macro `HARD_REGNO_NREGS'. In fact,
     the value of the macro `CLASS_MAX_NREGS (CLASS, MODE)' should be
     the maximum value of `HARD_REGNO_NREGS (REGNO, MODE)' for all
     REGNO values in the class CLASS.

     This macro helps control the handling of multiple-word values in
     the reload pass.

   Three other special macros describe which operands fit which
constraint letters.

`CONST_OK_FOR_LETTER_P (VALUE, C)'
     A C expression that defines the machine-dependent operand
     constraint letters that specify particular ranges of integer
     values.  If C is one of those letters, the expression should check
     that VALUE, an integer, is in the appropriate range and return 1
     if so, 0 otherwise.  If C is not one of those letters, the value
     should be 0 regardless of VALUE.

`CONST_DOUBLE_OK_FOR_LETTER_P (VALUE, C)'
     A C expression that defines the machine-dependent operand
     constraint letters that specify particular ranges of
     `const_double' values.

     If C is one of those letters, the expression should check that
     VALUE, an RTX of code `const_double', is in the appropriate range
     and return 1 if so, 0 otherwise.  If C is not one of those
     letters, the value should be 0 regardless of VALUE.

     `const_double' is used for all floating-point constants and for
     `DImode' fixed-point constants.  A given letter can accept either
     or both kinds of values.  It can use `GET_MODE' to distinguish
     between these kinds.

`EXTRA_CONSTRAINT (VALUE, C)'
     A C expression that defines the optional machine-dependent
     constraint letters that can be used to segregate specific types of
     operands, usually memory references, for the target machine. 
     Normally this macro will not be defined.  If it is required for a
     particular target machine, it should return 1 if VALUE corresponds
     to the operand type represented by the constraint letter C.  If C
     is not defined as an extra constraint, the value returned should
     be 0 regardless of VALUE.

     For example, on the ROMP, load instructions cannot have their
     output in r0 if the memory reference contains a symbolic address. 
     Constraint letter `Q' is defined as representing a memory address
     that does *not* contain a symbolic address.  An alternative is
     specified with a `Q' constraint on the input and `r' on the
     output.  The next alternative specifies `m' on the input and a
     register class that does not include r0 on the output.


@EndNode

@Node "Stack and Calling" "gcc.guide/Stack and Calling"
@Next "Varargs"
@Prev "Register Classes"
@Toc "Target Macros"

Describing Stack Layout and Calling Conventions
===============================================


 @{" Frame Layout " Link "Frame Layout"} 
 @{" Frame Registers " Link "Frame Registers"} 
 @{" Elimination " Link "Elimination"} 
 @{" Stack Arguments " Link "Stack Arguments"} 
 @{" Register Arguments " Link "Register Arguments"} 
 @{" Scalar Return " Link "Scalar Return"} 
 @{" Aggregate Return " Link "Aggregate Return"} 
 @{" Caller Saves " Link "Caller Saves"} 
 @{" Function Entry " Link "Function Entry"} 
 @{" Profiling " Link "Profiling"} 


@EndNode

@Node "Frame Layout" "gcc.guide/Frame Layout"
@Next "Frame Registers"
@Toc "Stack and Calling"

Basic Stack Layout
------------------

`STACK_GROWS_DOWNWARD'
     Define this macro if pushing a word onto the stack moves the stack
     pointer to a smaller address.

     When we say, "define this macro if ...," it means that the
     compiler checks this macro only with `#ifdef' so the precise
     definition used does not matter.

`FRAME_GROWS_DOWNWARD'
     Define this macro if the addresses of local variable slots are at
     negative offsets from the frame pointer.

`ARGS_GROW_DOWNWARD'
     Define this macro if successive arguments to a function occupy
     decreasing addresses on the stack.

`STARTING_FRAME_OFFSET'
     Offset from the frame pointer to the first local variable slot to
     be allocated.

     If `FRAME_GROWS_DOWNWARD', the next slot's offset is found by
     subtracting the length of the first slot from
     `STARTING_FRAME_OFFSET'. Otherwise, it is found by adding the
     length of the first slot to the value `STARTING_FRAME_OFFSET'.

`STACK_POINTER_OFFSET'
     Offset from the stack pointer register to the first location at
     which outgoing arguments are placed.  If not specified, the
     default value of zero is used.  This is the proper value for most
     machines.

     If `ARGS_GROW_DOWNWARD', this is the offset to the location above
     the first location at which outgoing arguments are placed.

`FIRST_PARM_OFFSET (FUNDECL)'
     Offset from the argument pointer register to the first argument's
     address.  On some machines it may depend on the data type of the
     function.

     If `ARGS_GROW_DOWNWARD', this is the offset to the location above
     the first argument's address.

`STACK_DYNAMIC_OFFSET (FUNDECL)'
     Offset from the stack pointer register to an item dynamically
     allocated on the stack, e.g., by `alloca'.

     The default value for this macro is `STACK_POINTER_OFFSET' plus the
     length of the outgoing arguments.  The default is correct for most
     machines.  See `function.c' for details.

`DYNAMIC_CHAIN_ADDRESS (FRAMEADDR)'
     A C expression whose value is RTL representing the address in a
     stack frame where the pointer to the caller's frame is stored. 
     Assume that FRAMEADDR is an RTL expression for the address of the
     stack frame itself.

     If you don't define this macro, the default is to return the value
     of FRAMEADDR--that is, the stack frame address is also the address
     of the stack word that points to the previous frame.


@EndNode

@Node "Frame Registers" "gcc.guide/Frame Registers"
@Next "Elimination"
@Prev "Frame Layout"
@Toc "Stack and Calling"

Registers That Address the Stack Frame
--------------------------------------

`STACK_POINTER_REGNUM'
     The register number of the stack pointer register, which must also
     be a fixed register according to `FIXED_REGISTERS'.  On most
     machines, the hardware determines which register this is.

`FRAME_POINTER_REGNUM'
     The register number of the frame pointer register, which is used to
     access automatic variables in the stack frame.  On some machines,
     the hardware determines which register this is.  On other
     machines, you can choose any register you wish for this purpose.

`ARG_POINTER_REGNUM'
     The register number of the arg pointer register, which is used to
     access the function's argument list.  On some machines, this is
     the same as the frame pointer register.  On some machines, the
     hardware determines which register this is.  On other machines,
     you can choose any register you wish for this purpose.  If this is
     not the same register as the frame pointer register, then you must
     mark it as a fixed register according to `FIXED_REGISTERS', or
     arrange to be able to eliminate it (see @{"Elimination" Link "Elimination"}).

`STATIC_CHAIN_REGNUM'
`STATIC_CHAIN_INCOMING_REGNUM'
     Register numbers used for passing a function's static chain
     pointer.  If register windows are used,
     `STATIC_CHAIN_INCOMING_REGNUM' is the register number as seen by
     the called function, while `STATIC_CHAIN_REGNUM' is the register
     number as seen by the calling function.  If these registers are
     the same, `STATIC_CHAIN_INCOMING_REGNUM' need not be defined.

     The static chain register need not be a fixed register.

     If the static chain is passed in memory, these macros should not be
     defined; instead, the next two macros should be defined.

`STATIC_CHAIN'
`STATIC_CHAIN_INCOMING'
     If the static chain is passed in memory, these macros provide rtx
     giving `mem' expressions that denote where they are stored.
     `STATIC_CHAIN' and `STATIC_CHAIN_INCOMING' give the locations as
     seen by the calling and called functions, respectively.  Often the
     former will be at an offset from the stack pointer and the latter
     at an offset from the frame pointer.

     The variables `stack_pointer_rtx', `frame_pointer_rtx', and
     `arg_pointer_rtx' will have been initialized prior to the use of
     these macros and should be used to refer to those items.

     If the static chain is passed in a register, the two previous
     macros should be defined instead.


@EndNode

@Node "Elimination" "gcc.guide/Elimination"
@Next "Stack Arguments"
@Prev "Frame Registers"
@Toc "Stack and Calling"

Eliminating Frame Pointer and Arg Pointer
-----------------------------------------

`FRAME_POINTER_REQUIRED'
     A C expression which is nonzero if a function must have and use a
     frame pointer.  This expression is evaluated  in the reload pass. 
     If its value is nonzero the function will have a frame pointer.

     The expression can in principle examine the current function and
     decide according to the facts, but on most machines the constant 0
     or the constant 1 suffices.  Use 0 when the machine allows code to
     be generated with no frame pointer, and doing so saves some time
     or space.  Use 1 when there is no possible advantage to avoiding a
     frame pointer.

     In certain cases, the compiler does not know how to produce valid
     code without a frame pointer.  The compiler recognizes those cases
     and automatically gives the function a frame pointer regardless of
     what `FRAME_POINTER_REQUIRED' says.  You don't need to worry about
     them.

     In a function that does not require a frame pointer, the frame
     pointer register can be allocated for ordinary usage, unless you
     mark it as a fixed register.  See `FIXED_REGISTERS' for more
     information.

     This macro is ignored and need not be defined if `ELIMINABLE_REGS'
     is defined.

`INITIAL_FRAME_POINTER_OFFSET (DEPTH-VAR)'
     A C statement to store in the variable DEPTH-VAR the difference
     between the frame pointer and the stack pointer values immediately
     after the function prologue.  The value would be computed from
     information such as the result of `get_frame_size ()' and the
     tables of registers `regs_ever_live' and `call_used_regs'.

     If `ELIMINABLE_REGS' is defined, this macro will be not be used and
     need not be defined.  Otherwise, it must be defined even if
     `FRAME_POINTER_REQUIRED' is defined to always be true; in that
     case, you may set DEPTH-VAR to anything.

`ELIMINABLE_REGS'
     If defined, this macro specifies a table of register pairs used to
     eliminate unneeded registers that point into the stack frame.  If
     it is not defined, the only elimination attempted by the compiler
     is to replace references to the frame pointer with references to
     the stack pointer.

     The definition of this macro is a list of structure
     initializations, each of which specifies an original and
     replacement register.

     On some machines, the position of the argument pointer is not
     known until the compilation is completed.  In such a case, a
     separate hard register must be used for the argument pointer. 
     This register can be eliminated by replacing it with either the
     frame pointer or the argument pointer, depending on whether or not
     the frame pointer has been eliminated.

     In this case, you might specify:
          #define ELIMINABLE_REGS  \
          {{ARG_POINTER_REGNUM, STACK_POINTER_REGNUM}, \
           {ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM}, \
           {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}}

     Note that the elimination of the argument pointer with the stack
     pointer is specified first since that is the preferred elimination.

`CAN_ELIMINATE (FROM-REG, TO-REG)'
     A C expression that returns non-zero if the compiler is allowed to
     try to replace register number FROM-REG with register number
     TO-REG.  This macro need only be defined if `ELIMINABLE_REGS' is
     defined, and will usually be the constant 1, since most of the
     cases preventing register elimination are things that the compiler
     already knows about.

`INITIAL_ELIMINATION_OFFSET (FROM-REG, TO-REG, OFFSET-VAR)'
     This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It
     specifies the initial difference between the specified pair of
     registers.  This macro must be defined if `ELIMINABLE_REGS' is
     defined.

`LONGJMP_RESTORE_FROM_STACK'
     Define this macro if the `longjmp' function restores registers from
     the stack frames, rather than from those saved specifically by
     `setjmp'.  Certain quantities must not be kept in registers across
     a call to `setjmp' on such machines.


@EndNode

@Node "Stack Arguments" "gcc.guide/Stack Arguments"
@Next "Register Arguments"
@Prev "Elimination"
@Toc "Stack and Calling"

Passing Function Arguments on the Stack
---------------------------------------

   The macros in this section control how arguments are passed on the
stack.  See the following section for other macros that control passing
certain arguments in registers.

`PROMOTE_PROTOTYPES'
     Define this macro if an argument declared as `char' or `short' in
     a prototype should actually be passed as an `int'.  In addition to
     avoiding errors in certain cases of mismatch, it also makes for
     better code on certain machines.

`PUSH_ROUNDING (NPUSHED)'
     A C expression that is the number of bytes actually pushed onto the
     stack when an instruction attempts to push NPUSHED bytes.

     If the target machine does not have a push instruction, do not
     define this macro.  That directs GNU CC to use an alternate
     strategy: to allocate the entire argument block and then store the
     arguments into it.

     On some machines, the definition

          #define PUSH_ROUNDING(BYTES) (BYTES)

     will suffice.  But on other machines, instructions that appear to
     push one byte actually push two bytes in an attempt to maintain
     alignment.  Then the definition should be

          #define PUSH_ROUNDING(BYTES) (((BYTES) + 1) & ~1)

`ACCUMULATE_OUTGOING_ARGS'
     If defined, the maximum amount of space required for outgoing
     arguments will be computed and placed into the variable
     `current_function_outgoing_args_size'.  No space will be pushed
     onto the stack for each call; instead, the function prologue should
     increase the stack frame size by this amount.

     It is not proper to define both `PUSH_ROUNDING' and
     `ACCUMULATE_OUTGOING_ARGS'.

`REG_PARM_STACK_SPACE (FNDECL)'
     Define this macro if functions should assume that stack space has
     been allocated for arguments even when their values are passed in
     registers.

     The value of this macro is the size, in bytes, of the area
     reserved for ! arguments passed in registers for the function
     represented by FNDECL.

     This space can either be allocated by the caller or be a part of
     the machine-dependent stack frame: `OUTGOING_REG_PARM_STACK_SPACE'
     says which.

`MAYBE_REG_PARM_STACK_SPACE'
`FINAL_REG_PARM_STACK_SPACE (CONST_SIZE, VAR_SIZE)'
     Define these macros in addition to the one above if functions might
     allocate stack space for arguments even when their values are
     passed in registers.  These should be used when the stack space
     allocated for arguments in registers is not a simple constant
     independent of the function declaration.

     The value of the first macro is the size, in bytes, of the area
     that we should initially assume would be reserved for arguments
     passed in registers.

     The value of the second macro is the actual size, in bytes, of the
     area that will be reserved for arguments passed in registers. 
     This takes two arguments: an integer representing the number of
     bytes of fixed sized arguments on the stack, and a tree
     representing the number of bytes of variable sized arguments on
     the stack.

     When these macros are defined, `REG_PARM_STACK_SPACE' will only be
     called for libcall functions, the current function, or for a
     function being called when it is known that such stack space must
     be allocated. In each case this value can be easily computed.

     When deciding whether a called function needs such stack space,
     and how much space to reserve, GNU CC uses these two macros
     instead of `REG_PARM_STACK_SPACE'.

`OUTGOING_REG_PARM_STACK_SPACE'
     Define this if it is the responsibility of the caller to allocate
     the area reserved for arguments passed in registers.

     If `ACCUMULATE_OUTGOING_ARGS' is defined, this macro controls
     whether the space for these arguments counts in the value of
     `current_function_outgoing_args_size'.

`STACK_PARMS_IN_REG_PARM_AREA'
     Define this macro if `REG_PARM_STACK_SPACE' is defined but stack
     parameters don't skip the area specified by `REG_PARM_STACK_SPACE'.

     Normally, when a parameter is not passed in registers, it is
     placed on the stack beyond the `REG_PARM_STACK_SPACE' area. 
     Defining this macro suppresses this behavior and causes the
     parameter to be passed on the stack in its natural location.

`RETURN_POPS_ARGS (FUNTYPE, STACK-SIZE)'
     A C expression that should indicate the number of bytes of its own
     arguments that a function pops on returning, or 0 if the function
     pops no arguments and the caller must therefore pop them all after
     the function returns.

     FUNTYPE is a C variable whose value is a tree node that describes
     the function in question.  Normally it is a node of type
     `FUNCTION_TYPE' that describes the data type of the function. From
     this it is possible to obtain the data types of the value and
     arguments (if known).

     When a call to a library function is being considered, FUNTYPE
     will contain an identifier node for the library function.  Thus, if
     you need to distinguish among various library functions, you can
     do so by their names.  Note that "library function" in this
     context means a function used to perform arithmetic, whose name is
     known specially in the compiler and was not mentioned in the C
     code being compiled.

     STACK-SIZE is the number of bytes of arguments passed on the
     stack.  If a variable number of bytes is passed, it is zero, and
     argument popping will always be the responsibility of the calling
     function.

     On the Vax, all functions always pop their arguments, so the
     definition of this macro is STACK-SIZE.  On the 68000, using the
     standard calling convention, no functions pop their arguments, so
     the value of the macro is always 0 in this case.  But an
     alternative calling convention is available in which functions
     that take a fixed number of arguments pop them but other functions
     (such as `printf') pop nothing (the caller pops all).  When this
     convention is in use, FUNTYPE is examined to determine whether a
     function takes a fixed number of arguments.


@EndNode

@Node "Register Arguments" "gcc.guide/Register Arguments"
@Next "Scalar Return"
@Prev "Stack Arguments"
@Toc "Stack and Calling"

Passing Arguments in Registers
------------------------------

   This section describes the macros which let you control how various
types of arguments are passed in registers or how they are arranged in
the stack.

`FUNCTION_ARG (CUM, MODE, TYPE, NAMED)'
     A C expression that controls whether a function argument is passed
     in a register, and which register.

     The arguments are CUM, which summarizes all the previous
     arguments; MODE, the machine mode of the argument; TYPE, the data
     type of the argument as a tree node or 0 if that is not known
     (which happens for C support library functions); and NAMED, which
     is 1 for an ordinary argument and 0 for nameless arguments that
     correspond to `...' in the called function's prototype.

     The value of the expression should either be a `reg' RTX for the
     hard register in which to pass the argument, or zero to pass the
     argument on the stack.

     For machines like the Vax and 68000, where normally all arguments
     are pushed, zero suffices as a definition.

     The usual way to make the ANSI library `stdarg.h' work on a machine
     where some arguments are usually passed in registers, is to cause
     nameless arguments to be passed on the stack instead.  This is done
     by making `FUNCTION_ARG' return 0 whenever NAMED is 0.

     You may use the macro `MUST_PASS_IN_STACK (MODE, TYPE)' in the
     definition of this macro to determine if this argument is of a
     type that must be passed in the stack.  If `REG_PARM_STACK_SPACE'
     is not defined and `FUNCTION_ARG' returns non-zero for such an
     argument, the compiler will abort.  If `REG_PARM_STACK_SPACE' is
     defined, the argument will be computed in the stack and then
     loaded into a register.

`FUNCTION_INCOMING_ARG (CUM, MODE, TYPE, NAMED)'
     Define this macro if the target machine has "register windows", so
     that the register in which a function sees an arguments is not
     necessarily the same as the one in which the caller passed the
     argument.

     For such machines, `FUNCTION_ARG' computes the register in which
     the caller passes the value, and `FUNCTION_INCOMING_ARG' should be
     defined in a similar fashion to tell the function being called
     where the arguments will arrive.

     If `FUNCTION_INCOMING_ARG' is not defined, `FUNCTION_ARG' serves
     both purposes.

`FUNCTION_ARG_PARTIAL_NREGS (CUM, MODE, TYPE, NAMED)'
     A C expression for the number of words, at the beginning of an
     argument, must be put in registers.  The value must be zero for
     arguments that are passed entirely in registers or that are
     entirely pushed on the stack.

     On some machines, certain arguments must be passed partially in
     registers and partially in memory.  On these machines, typically
     the first N words of arguments are passed in registers, and the
     rest on the stack.  If a multi-word argument (a `double' or a
     structure) crosses that boundary, its first few words must be
     passed in registers and the rest must be pushed.  This macro tells
     the compiler when this occurs, and how many of the words should go
     in registers.

     `FUNCTION_ARG' for these arguments should return the first
     register to be used by the caller for this argument; likewise
     `FUNCTION_INCOMING_ARG', for the called function.

`FUNCTION_ARG_PASS_BY_REFERENCE (CUM, MODE, TYPE, NAMED)'
     A C expression that indicates when an argument must be passed by
     reference. If nonzero for an argument, a copy of that argument is
     made in memory and a pointer to the argument is passed instead of
     the argument itself. The pointer is passed in whatever way is
     appropriate for passing a pointer to that type.

     On machines where `REG_PARM_STACK_SPACE' is not defined, a suitable
     definition of this macro might be
          #define FUNCTION_ARG_PASS_BY_REFERENCE(CUM, MODE, TYPE, NAMED)  \
            MUST_PASS_IN_STACK (MODE, TYPE)

`CUMULATIVE_ARGS'
     A C type for declaring a variable that is used as the first
     argument of `FUNCTION_ARG' and other related values.  For some
     target machines, the type `int' suffices and can hold the number
     of bytes of argument so far.

     There is no need to record in `CUMULATIVE_ARGS' anything about the
     arguments that have been passed on the stack.  The compiler has
     other variables to keep track of that.  For target machines on
     which all arguments are passed on the stack, there is no need to
     store anything in `CUMULATIVE_ARGS'; however, the data structure
     must exist and should not be empty, so use `int'.

`INIT_CUMULATIVE_ARGS (CUM, FNTYPE, LIBNAME)'
     A C statement (sans semicolon) for initializing the variable CUM
     for the state at the beginning of the argument list.  The variable
     has type `CUMULATIVE_ARGS'.  The value of FNTYPE is the tree node
     for the data type of the function which will receive the args, or 0
     if the args are to a compiler support library function.

     When processing a call to a compiler support library function,
     LIBNAME identifies which one.  It is a `symbol_ref' rtx which
     contains the name of the function, as a string.  LIBNAME is 0 when
     an ordinary C function call is being processed.  Thus, each time
     this macro is called, either LIBNAME or FNTYPE is nonzero, but
     never both of them at once.

`INIT_CUMULATIVE_INCOMING_ARGS (CUM, FNTYPE, LIBNAME)'
     Like `INIT_CUMULATIVE_ARGS' but overrides it for the purposes of
     finding the arguments for the function being compiled.  If this
     macro is undefined, `INIT_CUMULATIVE_ARGS' is used instead.

     The argument LIBNAME exists for symmetry with
     `INIT_CUMULATIVE_ARGS'.  The value passed for LIBNAME is always 0,
     since library routines with special calling conventions are never
     compiled with GNU CC.

`FUNCTION_ARG_ADVANCE (CUM, MODE, TYPE, NAMED)'
     A C statement (sans semicolon) to update the summarizer variable
     CUM to advance past an argument in the argument list.  The values
     MODE, TYPE and NAMED describe that argument. Once this is done,
     the variable CUM is suitable for analyzing the *following*
     argument with `FUNCTION_ARG', etc.

     This macro need not do anything if the argument in question was
     passed on the stack.  The compiler knows how to track the amount
     of stack space used for arguments without any special help.

`FUNCTION_ARG_PADDING (MODE, TYPE)'
     If defined, a C expression which determines whether, and in which
     direction, to pad out an argument with extra space.  The value
     should be of type `enum direction': either `upward' to pad above
     the argument, `downward' to pad below, or `none' to inhibit
     padding.

     This macro does not control the *amount* of padding; that is
     always just enough to reach the next multiple of
     `FUNCTION_ARG_BOUNDARY'.

     This macro has a default definition which is right for most
     systems. For little-endian machines, the default is to pad upward.
      For big-endian machines, the default is to pad downward for an
     argument of constant size shorter than an `int', and upward
     otherwise.

`FUNCTION_ARG_BOUNDARY (MODE, TYPE)'
     If defined, a C expression that gives the alignment boundary, in
     bits, of an argument with the specified mode and type.  If it is
     not defined, `PARM_BOUNDARY' is used for all arguments.

`FUNCTION_ARG_REGNO_P (REGNO)'
     A C expression that is nonzero if REGNO is the number of a hard
     register in which function arguments are sometimes passed.  This
     does *not* include implicit arguments such as the static chain and
     the structure-value address.  On many machines, no registers can be
     used for this purpose since all function arguments are pushed on
     the stack.


@EndNode

@Node "Scalar Return" "gcc.guide/Scalar Return"
@Next "Aggregate Return"
@Prev "Register Arguments"
@Toc "Stack and Calling"

How Scalar Function Values Are Returned
---------------------------------------

   This section discusses the macros that control returning scalars as
values--values that can fit in registers.

`TRADITIONAL_RETURN_FLOAT'
     Define this macro if `-traditional' should not cause functions
     declared to return `float' to convert the value to `double'.

`FUNCTION_VALUE (VALTYPE, FUNC)'
     A C expression to create an RTX representing the place where a
     function returns a value of data type VALTYPE.  VALTYPE is a tree
     node representing a data type.  Write `TYPE_MODE (VALTYPE)' to get
     the machine mode used to represent that type. On many machines,
     only the mode is relevant.  (Actually, on most machines, scalar
     values are returned in the same place regardless of mode).

     If the precise function being called is known, FUNC is a tree node
     (`FUNCTION_DECL') for it; otherwise, FUNC is a null pointer.  This
     makes it possible to use a different value-returning convention
     for specific functions when all their calls are known.

     `FUNCTION_VALUE' is not used for return vales with aggregate data
     types, because these are returned in another way.  See
     `STRUCT_VALUE_REGNUM' and related macros, below.

`FUNCTION_OUTGOING_VALUE (VALTYPE, FUNC)'
     Define this macro if the target machine has "register windows" so
     that the register in which a function returns its value is not the
     same as the one in which the caller sees the value.

     For such machines, `FUNCTION_VALUE' computes the register in which
     the caller will see the value, and `FUNCTION_OUTGOING_VALUE'
     should be defined in a similar fashion to tell the function where
     to put the value.

     If `FUNCTION_OUTGOING_VALUE' is not defined, `FUNCTION_VALUE'
     serves both purposes.

     `FUNCTION_OUTGOING_VALUE' is not used for return vales with
     aggregate data types, because these are returned in another way. 
     See `STRUCT_VALUE_REGNUM' and related macros, below.

`LIBCALL_VALUE (MODE)'
     A C expression to create an RTX representing the place where a
     library function returns a value of mode MODE.  If the precise
     function being called is known, FUNC is a tree node
     (`FUNCTION_DECL') for it; otherwise, FUNC is a null pointer.  This
     makes it possible to use a different value-returning convention
     for specific functions when all their calls are known.

     Note that "library function" in this context means a compiler
     support routine, used to perform arithmetic, whose name is known
     specially by the compiler and was not mentioned in the C code being
     compiled.

     The definition of `LIBRARY_VALUE' need not be concerned aggregate
     data types, because none of the library functions returns such
     types.

`FUNCTION_VALUE_REGNO_P (REGNO)'
     A C expression that is nonzero if REGNO is the number of a hard
     register in which the values of called function may come back.

     A register whose use for returning values is limited to serving as
     the second of a pair (for a value of type `double', say) need not
     be recognized by this macro.  So for most machines, this definition
     suffices:

          #define FUNCTION_VALUE_REGNO_P(N) ((N) == 0)

     If the machine has register windows, so that the caller and the
     called function use different registers for the return value, this
     macro should recognize only the caller's register numbers.


@EndNode

@Node "Aggregate Return" "gcc.guide/Aggregate Return"
@Next "Caller Saves"
@Prev "Scalar Return"
@Toc "Stack and Calling"

How Large Values Are Returned
-----------------------------

   When a function value's mode is `BLKmode' (and in some other cases),
the value is not returned according to `FUNCTION_VALUE' (see
@{"Scalar Return" Link "Scalar Return"}).  Instead, the caller passes the address of a block of
memory in which the value should be stored.  This address is called the
"structure value address".

   This section describes how to control returning structure values in
memory.

`RETURN_IN_MEMORY (TYPE)'
     A C expression which can inhibit the returning of certain function
     values in registers, based on the type of value.  A nonzero value
     says to return the function value in memory, just as large
     structures are always returned.  Here TYPE will be a C expression
     of type `tree', representing the data type of the value.

     Note that values of mode `BLKmode' are returned in memory
     regardless of this macro.  Also, the option `-fpcc-struct-return'
     takes effect regardless of this macro.  On most systems, it is
     possible to leave the macro undefined; this causes a default
     definition to be used, whose value is the constant 0.

`STRUCT_VALUE_REGNUM'
     If the structure value address is passed in a register, then
     `STRUCT_VALUE_REGNUM' should be the number of that register.

`STRUCT_VALUE'
     If the structure value address is not passed in a register, define
     `STRUCT_VALUE' as an expression returning an RTX for the place
     where the address is passed.  If it returns 0, the address is
     passed as an "invisible" first argument.

`STRUCT_VALUE_INCOMING_REGNUM'
     On some architectures the place where the structure value address
     is found by the called function is not the same place that the
     caller put it.  This can be due to register windows, or it could
     be because the function prologue moves it to a different place.

     If the incoming location of the structure value address is in a
     register, define this macro as the register number.

`STRUCT_VALUE_INCOMING'
     If the incoming location is not a register, define
     `STRUCT_VALUE_INCOMING' as an expression for an RTX for where the
     called function should find the value.  If it should find the
     value on the stack, define this to create a `mem' which refers to
     the frame pointer.  A definition of 0 means that the address is
     passed as an "invisible" first argument.

`PCC_STATIC_STRUCT_RETURN'
     Define this macro if the usual system convention on the target
     machine for returning structures and unions is for the called
     function to return the address of a static variable containing the
     value.  GNU CC does not normally use this convention, even if it
     is the usual one, but does use it if `-fpcc-struct-value' is
     specified.

     Do not define this if the usual system convention is for the
     caller to pass an address to the subroutine.


@EndNode

@Node "Caller Saves" "gcc.guide/Caller Saves"
@Next "Function Entry"
@Prev "Aggregate Return"
@Toc "Stack and Calling"

Caller-Saves Register Allocation
--------------------------------

   If you enable it, GNU CC can save registers around function calls. 
This makes it possible to use call-clobbered registers to hold
variables that must live across calls.

`DEFAULT_CALLER_SAVES'
     Define this macro if function calls on the target machine do not
     preserve any registers; in other words, if `CALL_USED_REGISTERS'
     has 1 for all registers.  This macro enables `-fcaller-saves' by
     default. Eventually that option will be enabled by default on all
     machines and both the option and this macro will be eliminated.

`CALLER_SAVE_PROFITABLE (REFS, CALLS)'
     A C expression to determine whether it is worthwhile to consider
     placing a pseudo-register in a call-clobbered hard register and
     saving and restoring it around each function call.  The expression
     should be 1 when this is worth doing, and 0 otherwise.

     If you don't define this macro, a default is used which is good on
     most machines: `4 * CALLS < REFS'.


@EndNode

@Node "Function Entry" "gcc.guide/Function Entry"
@Next "Profiling"
@Prev "Caller Saves"
@Toc "Stack and Calling"

Function Entry and Exit
-----------------------

   This section describes the macros that output function entry
("prologue") and exit ("epilogue") code.

`FUNCTION_PROLOGUE (FILE, SIZE)'
     A C compound statement that outputs the assembler code for entry
     to a function.  The prologue is responsible for setting up the
     stack frame, initializing the frame pointer register, saving
     registers that must be saved, and allocating SIZE additional bytes
     of storage for the local variables.  SIZE is an integer.  FILE is
     a stdio stream to which the assembler code should be output.

     The label for the beginning of the function need not be output by
     this macro.  That has already been done when the macro is run.

     To determine which registers to save, the macro can refer to the
     array `regs_ever_live': element R is nonzero if hard register R is
     used anywhere within the function.  This implies the function
     prologue should save register R, provided it is not one of the
     call-used registers.  (`FUNCTION_EPILOGUE' must likewise use
     `regs_ever_live'.)

     On machines that have "register windows", the function entry code
     does not save on the stack the registers that are in the windows,
     even if they are supposed to be preserved by function calls;
     instead it takes appropriate steps to "push" the register stack,
     if any non-call-used registers are used in the function.

     On machines where functions may or may not have frame-pointers, the
     function entry code must vary accordingly; it must set up the frame
     pointer if one is wanted, and not otherwise.  To determine whether
     a frame pointer is in wanted, the macro can refer to the variable
     `frame_pointer_needed'.  The variable's value will be 1 at run
     time in a function that needs a frame pointer.  See @{"Elimination" Link "Elimination"}.

     The function entry code is responsible for allocating any stack
     space required for the function.  This stack space consists of the
     regions listed below.  In most cases, these regions are allocated
     in the order listed, with the last listed region closest to the
     top of the stack (the lowest address if `STACK_GROWS_DOWNWARD' is
     defined, and the highest address if it is not defined).  You can
     use a different order for a machine if doing so is more convenient
     or required for compatibility reasons.  Except in cases where
     required by standard or by a debugger, there is no reason why the
     stack layout used by GCC need agree with that used by other
     compilers for a machine.

        * A region of `current_function_pretend_args_size' bytes of
          uninitialized space just underneath the first argument
          arriving on the stack.  (This may not be at the very start of
          the allocated stack region if the calling sequence has pushed
          anything else since pushing the stack arguments.  But
          usually, on such machines, nothing else has been pushed yet,
          because the function prologue itself does all the pushing.) 
          This region is used on machines where an argument may be
          passed partly in registers and partly in memory, and, in some
          cases to support the features in `varargs.h' and `stdargs.h'.

        * An area of memory used to save certain registers used by the
          function. The size of this area, which may also include space
          for such things as the return address and pointers to
          previous stack frames, is machine-specific and usually
          depends on which registers have been used in the function. 
          Machines with register windows often do not require a save
          area.

        * A region of at least SIZE bytes, possibly rounded up to an
          allocation boundary, to contain the local variables of the
          function.  On some machines, this region and the save area
          may occur in the opposite order, with the save area closer to
          the top of the stack.

        * Optionally, in the case that `ACCUMULATE_OUTGOING_ARGS' is
          defined, a region of `current_function_outgoing_args_size'
          bytes to be used for outgoing argument lists of the function.
           See @{"Stack Arguments" Link "Stack Arguments"}.

     Normally, it is necessary for `FUNCTION_PROLOGUE' and
     `FUNCTION_EPILOGUE' to treat leaf functions specially.  The C
     variable `leaf_function' is nonzero for such a function.

`EXIT_IGNORE_STACK'
     Define this macro as a C expression that is nonzero if the return
     instruction or the function epilogue ignores the value of the stack
     pointer; in other words, if it is safe to delete an instruction to
     adjust the stack pointer before a return from the function.

     Note that this macro's value is relevant only for functions for
     which frame pointers are maintained.  It is never safe to delete a
     final stack adjustment in a function that has no frame pointer,
     and the compiler knows this regardless of `EXIT_IGNORE_STACK'.

`FUNCTION_EPILOGUE (FILE, SIZE)'
     A C compound statement that outputs the assembler code for exit
     from a function.  The epilogue is responsible for restoring the
     saved registers and stack pointer to their values when the
     function was called, and returning control to the caller.  This
     macro takes the same arguments as the macro `FUNCTION_PROLOGUE',
     and the registers to restore are determined from `regs_ever_live'
     and `CALL_USED_REGISTERS' in the same way.

     On some machines, there is a single instruction that does all the
     work of returning from the function.  On these machines, give that
     instruction the name `return' and do not define the macro
     `FUNCTION_EPILOGUE' at all.

     Do not define a pattern named `return' if you want the
     `FUNCTION_EPILOGUE' to be used.  If you want the target switches
     to control whether return instructions or epilogues are used,
     define a `return' pattern with a validity condition that tests the
     target switches appropriately.  If the `return' pattern's validity
     condition is false, epilogues will be used.

     On machines where functions may or may not have frame-pointers, the
     function exit code must vary accordingly.  Sometimes the code for
     these two cases is completely different.  To determine whether a
     frame pointer is in wanted, the macro can refer to the variable
     `frame_pointer_needed'.  The variable's value will be 1 at run
     time in a function that needs a frame pointer.

     Normally, it is necessary for `FUNCTION_PROLOGUE' and
     `FUNCTION_EPILOGUE' to treat leaf functions specially.  The C
     variable `leaf_function' is nonzero for such a function. See
     @{"Leaf Functions" Link "Leaf Functions"}.

     On some machines, some functions pop their arguments on exit while
     others leave that for the caller to do.  For example, the 68020
     when given `-mrtd' pops arguments in functions that take a fixed
     number of arguments.

     Your definition of the macro `RETURN_POPS_ARGS' decides which
     functions pop their own arguments.  `FUNCTION_EPILOGUE' needs to
     know what was decided.  The variable `current_function_pops_args'
     is the number of bytes of its arguments that a function should pop.
     See @{"Scalar Return" Link "Scalar Return"}.

`DELAY_SLOTS_FOR_EPILOGUE'
     Define this macro if the function epilogue contains delay slots to
     which instructions from the rest of the function can be "moved". 
     The definition should be a C expression whose value is an integer
     representing the number of delay slots there.

`ELIGIBLE_FOR_EPILOGUE_DELAY (INSN, N)'
     A C expression that returns 1 if INSN can be placed in delay slot
     number N of the epilogue.

     The argument N is an integer which identifies the delay slot now
     being considered (since different slots may have different rules of
     eligibility).  It is never negative and is always less than the
     number of epilogue delay slots (what `DELAY_SLOTS_FOR_EPILOGUE'
     returns). If you reject a particular insn for a given delay slot,
     in principle, it may be reconsidered for a subsequent delay slot. 
     Also, other insns may (at least in principle) be considered for
     the so far unfilled delay slot.

     The insns accepted to fill the epilogue delay slots are put in an
     RTL list made with `insn_list' objects, stored in the variable
     `current_function_epilogue_delay_list'.  The insn for the first
     delay slot comes first in the list.  Your definition of the macro
     `FUNCTION_EPILOGUE' should fill the delay slots by outputting the
     insns in this list, usually by calling `final_scan_insn'.

     You need not define this macro if you did not define
     `DELAY_SLOTS_FOR_EPILOGUE'.


@EndNode

@Node "Profiling" "gcc.guide/Profiling"
@Prev "Function Entry"
@Toc "Stack and Calling"

Generating Code for Profiling
-----------------------------

`FUNCTION_PROFILER (FILE, LABELNO)'
     A C statement or compound statement to output to FILE some
     assembler code to call the profiling subroutine `mcount'. Before
     calling, the assembler code must load the address of a counter
     variable into a register where `mcount' expects to find the
     address.  The name of this variable is `LP' followed by the number
     LABELNO, so you would generate the name using `LP%d' in a
     `fprintf'.

     The details of how the address should be passed to `mcount' are
     determined by your operating system environment, not by GNU CC.  To
     figure them out, compile a small program for profiling using the
     system's installed C compiler and look at the assembler code that
     results.

`PROFILE_BEFORE_PROLOGUE'
     Define this macro if the code for function profiling should come
     before the function prologue.  Normally, the profiling code comes
     after.

`FUNCTION_BLOCK_PROFILER (FILE, LABELNO)'
     A C statement or compound statement to output to FILE some
     assembler code to initialize basic-block profiling for the current
     object module.  This code should call the subroutine
     `__bb_init_func' once per object module, passing it as its sole
     argument the address of a block allocated in the object module.

     The name of the block is a local symbol made with this statement:

          ASM_GENERATE_INTERNAL_LABEL (BUFFER, "LPBX", 0);

     Of course, since you are writing the definition of
     `ASM_GENERATE_INTERNAL_LABEL' as well as that of this macro, you
     can take a short cut in the definition of this macro and use the
     name that you know will result.

     The first word of this block is a flag which will be nonzero if the
     object module has already been initialized.  So test this word
     first, and do not call `__bb_init_func' if the flag is nonzero.

`BLOCK_PROFILER (FILE, BLOCKNO)'
     A C statement or compound statement to increment the count
     associated with the basic block number BLOCKNO.  Basic blocks are
     numbered separately from zero within each compilation.  The count
     associated with block number BLOCKNO is at index BLOCKNO in a
     vector of words; the name of this array is a local symbol made
     with this statement:

          ASM_GENERATE_INTERNAL_LABEL (BUFFER, "LPBX", 2);

     Of course, since you are writing the definition of
     `ASM_GENERATE_INTERNAL_LABEL' as well as that of this macro, you
     can take a short cut in the definition of this macro and use the
     name that you know will result.


@EndNode

@Node "Varargs" "gcc.guide/Varargs"
@Next "Trampolines"
@Prev "Stack and Calling"
@Toc "Target Macros"

Implementing the Varargs Macros
===============================

   GNU CC comes with an implementation of `varargs.h' and `stdarg.h'
that work without change on machines that pass arguments on the stack. 
Other machines require their own implementations of varargs, and the
two machine independent header files must have conditionals to include
it.

   ANSI `stdarg.h' differs from traditional `varargs.h' mainly in the
calling convention for `va_start'.  The traditional implementation
takes just one argument, which is the variable in which to store the
argument pointer.  The ANSI implementation of `va_start' takes an
additional second argument.  The user is supposed to write the last
named argument of the function here.

   However, `va_start' should not use this argument.  The way to find
the end of the named arguments is with the built-in functions described
below.

`__builtin_saveregs ()'
     Use this built-in function to save the argument registers in
     memory so that the varargs mechanism can access them.  Both ANSI
     and traditional versions of `va_start' must use
     `__builtin_saveregs', unless you use `SETUP_INCOMING_VARARGS' (see
     below) instead.

     On some machines, `__builtin_saveregs' is open-coded under the
     control of the macro `EXPAND_BUILTIN_SAVEREGS'.  On other machines,
     it calls a routine written in assembler language, found in
     `libgcc2.c'.

     Regardless of what code is generated for the call to
     `__builtin_saveregs', it appears at the beginning of the function,
     not where the call to `__builtin_saveregs' is written.  This is
     because the registers must be saved before the function starts to
     use them for its own purposes.

`__builtin_args_info (CATEGORY)'
     Use this built-in function to find the first anonymous arguments in
     registers.

     In general, a machine may have several categories of registers
     used for arguments, each for a particular category of data types. 
     (For example, on some machines, floating-point registers are used
     for floating-point arguments while other arguments are passed in
     the general registers.) To make non-varargs functions use the
     proper calling convention, you have defined the `CUMULATIVE_ARGS'
     data type to record how many registers in each category have been
     used so far

     `__builtin_args_info' accesses the same data structure of type
     `CUMULATIVE_ARGS' after the ordinary argument layout is finished
     with it, with CATEGORY specifying which word to access.  Thus, the
     value indicates the first unused register in a given category.

     Normally, you would use `__builtin_args_info' in the implementation
     of `va_start', accessing each category just once and storing the
     value in the `va_list' object.  This is because `va_list' will
     have to update the values, and there is no way to alter the values
     accessed by `__builtin_args_info'.

`__builtin_next_arg ()'
     This is the equivalent of `__builtin_args_info', for stack
     arguments.  It returns the address of the first anonymous stack
     argument, as type `void *'. If `ARGS_GROW_DOWNWARD', it returns
     the address of the location above the first anonymous stack
     argument. Use it in `va_start' to initialize the pointer for
     fetching arguments from the stack.

`__builtin_classify_type (OBJECT)'
     Since each machine has its own conventions for which data types are
     passed in which kind of register, your implementation of `va_arg'
     has to embody these conventions.  The easiest way to categorize the
     specified data type is to use `__builtin_classify_type' together
     with `sizeof' and `__alignof__'.

     `__builtin_classify_type' ignores the value of OBJECT, considering
     only its data type.  It returns an integer describing what kind of
     type that is--integer, floating, pointer, structure, and so on.

     The file `typeclass.h' defines an enumeration that you can use to
     interpret the values of `__builtin_classify_type'.

   These machine description macros help implement varargs:

`EXPAND_BUILTIN_SAVEREGS (ARGS)'
     If defined, is a C expression that produces the machine-specific
     code for a call to `__builtin_saveregs'.  This code will be moved
     to the very beginning of the function, before any parameter access
     are made. The return value of this function should be an RTX that
     contains the value to use as the return of `__builtin_saveregs'.

     The argument ARGS is a `tree_list' containing the arguments that
     were passed to `__builtin_saveregs'.

     If this macro is not defined, the compiler will output an ordinary
     call to the library function `__builtin_saveregs'.

`SETUP_INCOMING_VARARGS (ARGS_SO_FAR, MODE, TYPE, PRETEND_ARGS_SIZE, SECOND_TIME)'
     This macro offers an alternative to using `__builtin_saveregs' and
     defining the macro `EXPAND_BUILTIN_SAVEREGS'.  Use it to store the
     anonymous register arguments into the stack so that all the
     arguments appear to have been passed consecutively on the stack. 
     Once this is done, you can use the standard implementation of
     varargs that works for machines that pass all their arguments on
     the stack.

     The argument ARGS_SO_FAR is the `CUMULATIVE_ARGS' data structure,
     containing the values that obtain after processing of the named
     arguments.  The arguments MODE and TYPE describe the last named
     argument--its machine mode and its data type as a tree node.

     The macro implementation should do two things: first, push onto the
     stack all the argument registers *not* used for the named
     arguments, and second, store the size of the data thus pushed into
     the `int'-valued variable whose name is supplied as the argument
     PRETEND_ARGS_SIZE.  The value that you store here will serve as
     additional offset for setting up the stack frame.

     Because you must generate code to push the anonymous arguments at
     compile time without knowing their data types,
     `SETUP_INCOMING_VARARGS' is only useful on machines that have just
     a single category of argument register and use it uniformly for
     all data types.

     If the argument SECOND_TIME is nonzero, it means that the
     arguments of the function are being analyzed for the second time. 
     This happens for an inline function, which is not actually
     compiled until the end of the source file.  The macro
     `SETUP_INCOMING_VARARGS' should not generate any instructions in
     this case.


@EndNode

@Node "Trampolines" "gcc.guide/Trampolines"
@Next "Library Calls"
@Prev "Varargs"
@Toc "Target Macros"

Trampolines for Nested Functions
================================

   A "trampoline" is a small piece of code that is created at run time
when the address of a nested function is taken.  It normally resides on
the stack, in the stack frame of the containing function.  These macros
tell GNU CC how to generate code to allocate and initialize a
trampoline.

   The instructions in the trampoline must do two things: load a
constant address into the static chain register, and jump to the real
address of the nested function.  On CISC machines such as the m68k,
this requires two instructions, a move immediate and a jump.  Then the
two addresses exist in the trampoline as word-long immediate operands. 
On RISC machines, it is often necessary to load each address into a
register in two parts.  Then pieces of each address form separate
immediate operands.

   The code generated to initialize the trampoline must store the
variable parts--the static chain value and the function address--into
the immediate operands of the instructions.  On a CISC machine, this is
simply a matter of copying each address to a memory reference at the
proper offset from the start of the trampoline.  On a RISC machine, it
may be necessary to take out pieces of the address and store them
separately.

`TRAMPOLINE_TEMPLATE (FILE)'
     A C statement to output, on the stream FILE, assembler code for a
     block of data that contains the constant parts of a trampoline. 
     This code should not include a label--the label is taken care of
     automatically.

`TRAMPOLINE_SIZE'
     A C expression for the size in bytes of the trampoline, as an
     integer.

`TRAMPOLINE_ALIGNMENT'
     Alignment required for trampolines, in bits.

     If you don't define this macro, the value of `BIGGEST_ALIGNMENT'
     is used for aligning trampolines.

`INITIALIZE_TRAMPOLINE (ADDR, FNADDR, STATIC_CHAIN)'
     A C statement to initialize the variable parts of a trampoline.
     ADDR is an RTX for the address of the trampoline; FNADDR is an RTX
     for the address of the nested function; STATIC_CHAIN is an RTX for
     the static chain value that should be passed to the function when
     it is called.

`ALLOCATE_TRAMPOLINE (FP)'
     A C expression to allocate run-time space for a trampoline.  The
     expression value should be an RTX representing a memory reference
     to the space for the trampoline.

     If this macro is not defined, by default the trampoline is
     allocated as a stack slot.  This default is right for most
     machines.  The exceptions are machines where it is impossible to
     execute instructions in the stack area.  On such machines, you may
     have to implement a separate stack, using this macro in
     conjunction with `FUNCTION_PROLOGUE' and `FUNCTION_EPILOGUE'.

     FP points to a data structure, a `struct function', which
     describes the compilation status of the immediate containing
     function of the function which the trampoline is for.  Normally
     (when `ALLOCATE_TRAMPOLINE' is not defined), the stack slot for the
     trampoline is in the stack frame of this containing function. 
     Other allocation strategies probably must do something analogous
     with this information.

   Implementing trampolines is difficult on many machines because they
have separate instruction and data caches.  Writing into a stack
location fails to clear the memory in the instruction cache, so when
the program jumps to that location, it executes the old contents.

   Here are two possible solutions.  One is to clear the relevant parts
of the instruction cache whenever a trampoline is set up.  The other is
to make all trampolines identical, by having them jump to a standard
subroutine.  The former technique makes trampoline execution faster; the
latter makes initialization faster.

   To clear the instruction cache when a trampoline is initialized,
define the following macros which describe the shape of the cache.

`INSN_CACHE_SIZE'
     The total size in bytes of the cache.

`INSN_CACHE_LINE_WIDTH'
     The length in bytes of each cache line.  The cache is divided into
     cache lines which are disjoint slots, each holding a contiguous
     chunk of data fetched from memory.  Each time data is brought into
     the cache, an entire line is read at once.  The data loaded into a
     cache line is always aligned on a boundary equal to the line size.

`INSN_CACHE_DEPTH'
     The number of alternative cache lines that can hold any particular
     memory location.

   To use a standard subroutine, define the following macro.  In
addition, you must make sure that the instructions in a trampoline fill
an entire cache line with identical instructions, or else ensure that
the beginning of the trampoline code is always aligned at the same
point in its cache line.  Look in `m68k.h' as a guide.

`TRANSFER_FROM_TRAMPOLINE'
     Define this macro if trampolines need a special subroutine to do
     their work.  The macro should expand to a series of `asm'
     statements which will be compiled with GNU CC.  They go in a
     library function named `__transfer_from_trampoline'.

     If you need to avoid executing the ordinary prologue code of a
     compiled C function when you jump to the subroutine, you can do so
     by placing a special label of your own in the assembler code.  Use
     one `asm' statement to generate an assembler label, and another to
     make the label global.  Then trampolines can use that label to
     jump directly to your special assembler code.


@EndNode

@Node "Library Calls" "gcc.guide/Library Calls"
@Next "Addressing Modes"
@Prev "Trampolines"
@Toc "Target Macros"

Implicit Calls to Library Routines
==================================

`MULSI3_LIBCALL'
     A C string constant giving the name of the function to call for
     multiplication of one signed full-word by another.  If you do not
     define this macro, the default name is used, which is `__mulsi3',
     a function defined in `libgcc.a'.

`DIVSI3_LIBCALL'
     A C string constant giving the name of the function to call for
     division of one signed full-word by another.  If you do not define
     this macro, the default name is used, which is `__divsi3', a
     function defined in `libgcc.a'.

`UDIVSI3_LIBCALL'
     A C string constant giving the name of the function to call for
     division of one unsigned full-word by another.  If you do not
     define this macro, the default name is used, which is `__udivsi3',
     a function defined in `libgcc.a'.

`MODSI3_LIBCALL'
     A C string constant giving the name of the function to call for the
     remainder in division of one signed full-word by another.  If you
     do not define this macro, the default name is used, which is
     `__modsi3', a function defined in `libgcc.a'.

`UMODSI3_LIBCALL'
     A C string constant giving the name of the function to call for the
     remainder in division of one unsigned full-word by another.  If
     you do not define this macro, the default name is used, which is
     `__umodsi3', a function defined in `libgcc.a'.

`MULDI3_LIBCALL'
     A C string constant giving the name of the function to call for
     multiplication of one signed double-word by another.  If you do not
     define this macro, the default name is used, which is `__muldi3',
     a function defined in `libgcc.a'.

`DIVDI3_LIBCALL'
     A C string constant giving the name of the function to call for
     division of one signed double-word by another.  If you do not
     define this macro, the default name is used, which is `__divdi3', a
     function defined in `libgcc.a'.

`UDIVDI3_LIBCALL'
     A C string constant giving the name of the function to call for
     division of one unsigned full-word by another.  If you do not
     define this macro, the default name is used, which is `__udivdi3',
     a function defined in `libgcc.a'.

`MODDI3_LIBCALL'
     A C string constant giving the name of the function to call for the
     remainder in division of one signed double-word by another.  If
     you do not define this macro, the default name is used, which is
     `__moddi3', a function defined in `libgcc.a'.

`UMODDI3_LIBCALL'
     A C string constant giving the name of the function to call for the
     remainder in division of one unsigned full-word by another.  If
     you do not define this macro, the default name is used, which is
     `__umoddi3', a function defined in `libgcc.a'.

`TARGET_MEM_FUNCTIONS'
     Define this macro if GNU CC should generate calls to the System V
     (and ANSI C) library functions `memcpy' and `memset' rather than
     the BSD functions `bcopy' and `bzero'.

`LIBGCC_NEEDS_DOUBLE'
     Define this macro if only `float' arguments cannot be passed to
     library routines (so they must be converted to `double').  This
     macro affects both how library calls are generated and how the
     library routines in `libgcc1.c' accept their arguments.  It is
     useful on machines where floating and fixed point arguments are
     passed differently, such as the i860.

`FLOAT_ARG_TYPE'
     Define this macro to override the type used by the library
     routines to pick up arguments of type `float'.  (By default, they
     use a union of `float' and `int'.)

     The obvious choice would be `float'--but that won't work with
     traditional C compilers that expect all arguments declared as
     `float' to arrive as `double'.  To avoid this conversion, the
     library routines ask for the value as some other type and then
     treat it as a `float'.

     On some systems, no other type will work for this.  For these
     systems, you must use `LIBGCC_NEEDS_DOUBLE' instead, to force
     conversion of the values `double' before they are passed.

`FLOATIFY (PASSED-VALUE)'
     Define this macro to override the way library routines redesignate
     a `float' argument as a `float' instead of the type it was passed
     as.  The default is an expression which takes the `float' field of
     the union.

`FLOAT_VALUE_TYPE'
     Define this macro to override the type used by the library
     routines to return values that ought to have type `float'.  (By
     default, they use `int'.)

     The obvious choice would be `float'--but that won't work with
     traditional C compilers gratuitously convert values declared as
     `float' into `double'.

`INTIFY (FLOAT-VALUE)'
     Define this macro to override the way the value of a
     `float'-returning library routine should be packaged in order to
     return it.  These functions are actually declared to return type
     `FLOAT_VALUE_TYPE' (normally `int').

     These values can't be returned as type `float' because traditional
     C compilers would gratuitously convert the value to a `double'.

     A local variable named `intify' is always available when the macro
     `INTIFY' is used.  It is a union of a `float' field named `f' and
     a field named `i' whose type is `FLOAT_VALUE_TYPE' or `int'.

     If you don't define this macro, the default definition works by
     copying the value through that union.

`nongcc_SI_type'
     Define this macro as the name of the data type corresponding to
     `SImode' in the system's own C compiler.

     You need not define this macro if that type is `int', as it usually
     is.

`perform_...'
     Define these macros to supply explicit C statements to carry out
     various arithmetic operations on types `float' and `double' in the
     library routines in `libgcc1.c'.  See that file for a full list of
     these macros and their arguments.

     On most machines, you don't need to define any of these macros,
     because the C compiler that comes with the system takes care of
     doing them.

`NEXT_OBJC_RUNTIME'
     Define this macro to generate code for Objective C message sending
     using the calling convention of the NeXT system.  This calling
     convention involves passing the object, the selector and the
     method arguments all at once to the method-lookup library function.

     The default calling convention passes just the object and the
     selector to the lookup function, which returns a pointer to the
     method.


@EndNode

@Node "Addressing Modes" "gcc.guide/Addressing Modes"
@Next "Condition Code"
@Prev "Library Calls"
@Toc "Target Macros"

Addressing Modes
================

`HAVE_POST_INCREMENT'
     Define this macro if the machine supports post-increment
     addressing.

`HAVE_PRE_INCREMENT'
`HAVE_POST_DECREMENT'
`HAVE_PRE_DECREMENT'
     Similar for other kinds of addressing.

`CONSTANT_ADDRESS_P (X)'
     A C expression that is 1 if the RTX X is a constant which is a
     valid address.  On most machines, this can be defined as
     `CONSTANT_P (X)', but a few machines are more restrictive in which
     constant addresses are supported.

     `CONSTANT_P' accepts integer-values expressions whose values are
     not explicitly known, such as `symbol_ref', `label_ref', and
     `high' expressions and `const' arithmetic expressions, in addition
     to `const_int' and `const_double' expressions.

`MAX_REGS_PER_ADDRESS'
     A number, the maximum number of registers that can appear in a
     valid memory address.  Note that it is up to you to specify a
     value equal to the maximum number that `GO_IF_LEGITIMATE_ADDRESS'
     would ever accept.

`GO_IF_LEGITIMATE_ADDRESS (MODE, X, LABEL)'
     A C compound statement with a conditional `goto LABEL;' executed
     if X (an RTX) is a legitimate memory address on the target machine
     for a memory operand of mode MODE.

     It usually pays to define several simpler macros to serve as
     subroutines for this one.  Otherwise it may be too complicated to
     understand.

     This macro must exist in two variants: a strict variant and a
     non-strict one.  The strict variant is used in the reload pass.  It
     must be defined so that any pseudo-register that has not been
     allocated a hard register is considered a memory reference.  In
     contexts where some kind of register is required, a pseudo-register
     with no hard register must be rejected.

     The non-strict variant is used in other passes.  It must be
     defined to accept all pseudo-registers in every context where some
     kind of register is required.

     Compiler source files that want to use the strict variant of this
     macro define the macro `REG_OK_STRICT'.  You should use an `#ifdef
     REG_OK_STRICT' conditional to define the strict variant in that
     case and the non-strict variant otherwise.

     Typically among the subroutines used to define
     `GO_IF_LEGITIMATE_ADDRESS' are subroutines to check for acceptable
     registers for various purposes (one for base registers, one for
     index registers, and so on).  Then only these subroutine macros
     need have two variants; the higher levels of macros may be the same
     whether strict or not.

     Normally, constant addresses which are the sum of a `symbol_ref'
     and an integer are stored inside a `const' RTX to mark them as
     constant.  Therefore, there is no need to recognize such sums
     specifically as legitimate addresses.  Normally you would simply
     recognize any `const' as legitimate.

     Usually `PRINT_OPERAND_ADDRESS' is not prepared to handle constant
     sums that are not marked with  `const'.  It assumes that a naked
     `plus' indicates indexing.  If so, then you *must* reject such
     naked constant sums as illegitimate addresses, so that none of
     them will be given to `PRINT_OPERAND_ADDRESS'.

     On some machines, whether a symbolic address is legitimate depends
     on the section that the address refers to.  On these machines,
     define the macro `ENCODE_SECTION_INFO' to store the information
     into the `symbol_ref', and then check for it here.  When you see a
     `const', you will have to look inside it to find the `symbol_ref'
     in order to determine the section.  See @{"Assembler Format" Link "Assembler Format"}.

     The best way to modify the name string is by adding text to the
     beginning, with suitable punctuation to prevent any ambiguity. 
     Allocate the new name in `saveable_obstack'.  You will have to
     modify `ASM_OUTPUT_LABELREF' to remove and decode the added text
     and output the name accordingly.

     You can check the information stored here into the `symbol_ref' in
     the definitions of `GO_IF_LEGITIMATE_ADDRESS' and
     `PRINT_OPERAND_ADDRESS'.

`REG_OK_FOR_BASE_P (X)'
     A C expression that is nonzero if X (assumed to be a `reg' RTX) is
     valid for use as a base register.  For hard registers, it should
     always accept those which the hardware permits and reject the
     others.  Whether the macro accepts or rejects pseudo registers
     must be controlled by `REG_OK_STRICT' as described above.  This
     usually requires two variant definitions, of which `REG_OK_STRICT'
     controls the one actually used.

`REG_OK_FOR_INDEX_P (X)'
     A C expression that is nonzero if X (assumed to be a `reg' RTX) is
     valid for use as an index register.

     The difference between an index register and a base register is
     that the index register may be scaled.  If an address involves the
     sum of two registers, neither one of them scaled, then either one
     may be labeled the "base" and the other the "index"; but whichever
     labeling is used must fit the machine's constraints of which
     registers may serve in each capacity.  The compiler will try both
     labelings, looking for one that is valid, and will reload one or
     both registers only if neither labeling works.

`LEGITIMIZE_ADDRESS (X, OLDX, MODE, WIN)'
     A C compound statement that attempts to replace X with a valid
     memory address for an operand of mode MODE.  WIN will be a C
     statement label elsewhere in the code; the macro definition may use

          GO_IF_LEGITIMATE_ADDRESS (MODE, X, WIN);

     to avoid further processing if the address has become legitimate.

     X will always be the result of a call to `break_out_memory_refs',
     and OLDX will be the operand that was given to that function to
     produce X.

     The code generated by this macro should not alter the substructure
     of X.  If it transforms X into a more legitimate form, it should
     assign X (which will always be a C variable) a new value.

     It is not necessary for this macro to come up with a legitimate
     address.  The compiler has standard ways of doing so in all cases.
      In fact, it is safe for this macro to do nothing.  But often a
     machine-dependent strategy can generate better code.

`GO_IF_MODE_DEPENDENT_ADDRESS (ADDR, LABEL)'
     A C statement or compound statement with a conditional `goto
     LABEL;' executed if memory address X (an RTX) can have different
     meanings depending on the machine mode of the memory reference it
     is used for.

     Autoincrement and autodecrement addresses typically have
     mode-dependent effects because the amount of the increment or
     decrement is the size of the operand being addressed.  Some
     machines have other mode-dependent addresses.  Many RISC machines
     have no mode-dependent addresses.

     You may assume that ADDR is a valid address for the machine.

`LEGITIMATE_CONSTANT_P (X)'
     A C expression that is nonzero if X is a legitimate constant for
     an immediate operand on the target machine.  You can assume that X
     satisfies `CONSTANT_P', so you need not check this.  In fact, `1'
     is a suitable definition for this macro on machines where anything
     `CONSTANT_P' is valid.

`LEGITIMATE_PIC_OPERAND_P (X)'
     A C expression that is nonzero if X is a legitimate immediate
     operand on the target machine when generating position independent
     code. You can assume that X satisfies `CONSTANT_P', so you need not
     check this.  You can also assume FLAG_PIC is true, so you need not
     check it either.  You need not define this macro if all constants
     (including `SYMBOL_REF') can be immediate operands when generating
     position independent code.


@EndNode

@Node "Condition Code" "gcc.guide/Condition Code"
@Next "Costs"
@Prev "Addressing Modes"
@Toc "Target Macros"

Condition Code Status
=====================

   The file `conditions.h' defines a variable `cc_status' to describe
how the condition code was computed (in case the interpretation of the
condition code depends on the instruction that it was set by).  This
variable contains the RTL expressions on which the condition code is
currently based, and several standard flags.

   Sometimes additional machine-specific flags must be defined in the
machine description header file.  It can also add additional
machine-specific information by defining `CC_STATUS_MDEP'.

`CC_STATUS_MDEP'
     C code for a data type which is used for declaring the `mdep'
     component of `cc_status'.  It defaults to `int'.

     This macro is not used on machines that do not use `cc0'.

`CC_STATUS_MDEP_INIT'
     A C expression to initialize the `mdep' field to "empty". The
     default definition does nothing, since most machines don't use the
     field anyway.  If you want to use the field, you should probably
     define this macro to initialize it.

     This macro is not used on machines that do not use `cc0'.

`NOTICE_UPDATE_CC (EXP, INSN)'
     A C compound statement to set the components of `cc_status'
     appropriately for an insn INSN whose body is EXP.  It is this
     macro's responsibility to recognize insns that set the condition
     code as a byproduct of other activity as well as those that
     explicitly set `(cc0)'.

     This macro is not used on machines that do not use `cc0'.

     If there are insns that do not set the condition code but do alter
     other machine registers, this macro must check to see whether they
     invalidate the expressions that the condition code is recorded as
     reflecting.  For example, on the 68000, insns that store in address
     registers do not set the condition code, which means that usually
     `NOTICE_UPDATE_CC' can leave `cc_status' unaltered for such insns.
      But suppose that the previous insn set the condition code based
     on location `a4@(102)' and the current insn stores a new value in
     `a4'.  Although the condition code is not changed by this, it will
     no longer be true that it reflects the contents of `a4@(102)'. 
     Therefore, `NOTICE_UPDATE_CC' must alter `cc_status' in this case
     to say that nothing is known about the condition code value.

     The definition of `NOTICE_UPDATE_CC' must be prepared to deal with
     the results of peephole optimization: insns whose patterns are
     `parallel' RTXs containing various `reg', `mem' or constants which
     are just the operands.  The RTL structure of these insns is not
     sufficient to indicate what the insns actually do.  What
     `NOTICE_UPDATE_CC' should do when it sees one is just to run
     `CC_STATUS_INIT'.

     A possible definition of `NOTICE_UPDATE_CC' is to call a function
     that looks at an attribute (see @{"Insn Attributes" Link "Insn Attributes"}) named, for
     example, `cc'.  This avoids having detailed information about
     patterns in two places, the `md' file and in `NOTICE_UPDATE_CC'.

`EXTRA_CC_MODES'
     A list of names to be used for additional modes for condition code
     values in registers (see @{"Jump Patterns" Link "Jump Patterns"}).  These names are added to
     `enum machine_mode' and all have class `MODE_CC'.  By convention,
     they should start with `CC' and end with `mode'.

     You should only define this macro if your machine does not use
     `cc0' and only if additional modes are required.

`EXTRA_CC_NAMES'
     A list of C strings giving the names for the modes listed in
     `EXTRA_CC_MODES'.  For example, the Sparc defines this macro and
     `EXTRA_CC_MODES' as

          #define EXTRA_CC_MODES CC_NOOVmode, CCFPmode
          #define EXTRA_CC_NAMES "CC_NOOV", "CCFP"

     This macro is not required if `EXTRA_CC_MODES' is not defined.

`SELECT_CC_MODE (OP, X)'
     Returns a mode from class `MODE_CC' to be used when comparison
     operation code OP is applied to rtx X.  For example, on the Sparc,
     `SELECT_CC_MODE' is defined as (see see @{"Jump Patterns" Link "Jump Patterns"} for a
     description of the reason for this definition)

          #define SELECT_CC_MODE(OP,X) \
            (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT ? CCFPmode    \
             : (GET_CODE (X) == PLUS || GET_CODE (X) == MINUS	     \
                || GET_CODE (X) == NEG) 				     \
             ? CC_NOOVmode : CCmode)

     This macro is not required if `EXTRA_CC_MODES' is not defined.


@EndNode

@Node "Costs" "gcc.guide/Costs"
@Next "Sections"
@Prev "Condition Code"
@Toc "Target Macros"

Describing Relative Costs of Operations
=======================================

   These macros let you describe the relative speed of various
operations on the target machine.

`CONST_COSTS (X, CODE, OUTER_CODE)'
     A part of a C `switch' statement that describes the relative costs
     of constant RTL expressions.  It must contain `case' labels for
     expression codes `const_int', `const', `symbol_ref', `label_ref'
     and `const_double'.  Each case must ultimately reach a `return'
     statement to return the relative cost of the use of that kind of
     constant value in an expression.  The cost may depend on the
     precise value of the constant, which is available for examination
     in X, and the rtx code of the expression in which it is contained,
     found in OUTER_CODE.

     CODE is the expression code--redundant, since it can be obtained
     with `GET_CODE (X)'.

`RTX_COSTS (X, CODE, OUTER_CODE)'
     Like `CONST_COSTS' but applies to nonconstant RTL expressions.
     This can be used, for example, to indicate how costly a multiply
     instruction is.  In writing this macro, you can use the construct
     `COSTS_N_INSNS (N)' to specify a cost equal to N fast
     instructions.  OUTER_CODE is the code of the expression in which X
     is contained.

     This macro is optional; do not define it if the default cost
     assumptions are adequate for the target machine.

`ADDRESS_COST (ADDRESS)'
     An expression giving the cost of an addressing mode that contains
     ADDRESS.  If not defined, the cost is computed from the ADDRESS
     expression and the `CONST_COSTS' values.

     For most CISC machines, the default cost is a good approximation
     of the true cost of the addressing mode.  However, on RISC
     machines, all instructions normally have the same length and
     execution time.  Hence all addresses will have equal costs.

     In cases where more than one form of an address is known, the form
     with the lowest cost will be used.  If multiple forms have the
     same, lowest, cost, the one that is the most complex will be used.

     For example, suppose an address that is equal to the sum of a
     register and a constant is used twice in the same basic block. 
     When this macro is not defined, the address will be computed in a
     register and memory references will be indirect through that
     register.  On machines where the cost of the addressing mode
     containing the sum is no higher than that of a simple indirect
     reference, this will produce an additional instruction and
     possibly require an additional register.  Proper specification of
     this macro eliminates this overhead for such machines.

     Similar use of this macro is made in strength reduction of loops.

     ADDRESS need not be valid as an address.  In such a case, the cost
     is not relevant and can be any value; invalid addresses need not be
     assigned a different cost.

     On machines where an address involving more than one register is as
     cheap as an address computation involving only one register,
     defining `ADDRESS_COST' to reflect this can cause two registers to
     be live over a region of code where only one would have been if
     `ADDRESS_COST' were not defined in that manner.  This effect should
     be considered in the definition of this macro.  Equivalent costs
     should probably only be given to addresses with different numbers
     of registers on machines with lots of registers.

     This macro will normally either not be defined or be defined as a
     constant.

`REGISTER_MOVE_COST (FROM, TO)'
     A C expression for the cost of moving data from a register in class
     FROM to one in class TO.  The classes are expressed using the
     enumeration values such as `GENERAL_REGS'.  A value of 2 is the
     default; other values are interpreted relative to that.

     It is not required that the cost always equal 2 when FROM is the
     same as TO; on some machines it is expensive to move between
     registers if they are not general registers.

     If reload sees an insn consisting of a single `set' between two
     hard registers, and if `REGISTER_MOVE_COST' applied to their
     classes returns a value of 2, reload does not check to ensure that
     the constraints of the insn are met.  Setting a cost of other than
     2 will allow reload to verify that the constraints are met.  You
     should do this if the `movM' pattern's constraints do not allow
     such copying.

`MEMORY_MOVE_COST (M)'
     A C expression for the cost of moving data of mode M between a
     register and memory.  A value of 2 is the default; this cost is
     relative to those in `REGISTER_MOVE_COST'.

     If moving between registers and memory is more expensive than
     between two registers, you should define this macro to express the
     relative cost.

`BRANCH_COST'
     A C expression for the cost of a branch instruction.  A value of 1
     is the default; other values are interpreted relative to that.

   Here are additional macros which do not specify precise relative
costs, but only that certain actions are more expensive than GNU CC
would ordinarily expect.

`SLOW_BYTE_ACCESS'
     Define this macro as a C expression which is nonzero if accessing
     less than a word of memory (i.e. a `char' or a `short') is no
     faster than accessing a word of memory, i.e., if such access
     require more than one instruction or if there is no difference in
     cost between byte and (aligned) word loads.

     When this macro is not defined, the compiler will access a field by
     finding the smallest containing object; when it is defined, a
     fullword load will be used if alignment permits.  Unless bytes
     accesses are faster than word accesses, using word accesses is
     preferable since it may eliminate subsequent memory access if
     subsequent accesses occur to other fields in the same word of the
     structure, but to different bytes.

`SLOW_ZERO_EXTEND'
     Define this macro if zero-extension (of a `char' or `short' to an
     `int') can be done faster if the destination is a register that is
     known to be zero.

     If you define this macro, you must have instruction patterns that
     recognize RTL structures like this:

          (set (strict_low_part (subreg:QI (reg:SI ...) 0)) ...)

     and likewise for `HImode'.

`SLOW_UNALIGNED_ACCESS'
     Define this macro to be the value 1 if unaligned accesses have a
     cost many times greater than aligned accesses, for example if they
     are emulated in a trap handler.

     When this macro is non-zero, the compiler will act as if
     `STRICT_ALIGNMENT' were non-zero when generating code for block
     moves.  This can cause significantly more instructions to be
     produced. Therefore, do not set this macro non-zero if unaligned
     accesses only add a cycle or two to the time for a memory access.

     If the value of this macro is always zero, it need not be defined.

`DONT_REDUCE_ADDR'
     Define this macro to inhibit strength reduction of memory
     addresses. (On some machines, such strength reduction seems to do
     harm rather than good.)

`MOVE_RATIO'
     The number of scalar move insns which should be generated instead
     of a string move insn or a library call.  Increasing the value
     will always make code faster, but eventually incurs high cost in
     increased code size.

     If you don't define this, a reasonable default is used.

`NO_FUNCTION_CSE'
     Define this macro if it is as good or better to call a constant
     function address than to call an address kept in a register.

`NO_RECURSIVE_FUNCTION_CSE'
     Define this macro if it is as good or better for a function to call
     itself with an explicit address than to call an address kept in a
     register.


@EndNode

@Node "Sections" "gcc.guide/Sections"
@Next "PIC"
@Prev "Costs"
@Toc "Target Macros"

Dividing the Output into Sections (Texts, Data, ...)
====================================================

   An object file is divided into sections containing different types of
data.  In the most common case, there are three sections: the "text
section", which holds instructions and read-only data; the "data
section", which holds initialized writable data; and the "bss section",
which holds uninitialized data.  Some systems have other kinds of
sections.

   The compiler must tell the assembler when to switch sections.  These
macros control what commands to output to tell the assembler this.  You
can also define additional sections.

`TEXT_SECTION_ASM_OP'
     A C string constant for the assembler operation that should precede
     instructions and read-only data.  Normally `".text"' is right.

`DATA_SECTION_ASM_OP'
     A C string constant for the assembler operation to identify the
     following data as writable initialized data.  Normally `".data"'
     is right.

`SHARED_SECTION_ASM_OP'
     If defined, a C string constant for the assembler operation to
     identify the following data as shared data.  If not defined,
     `DATA_SECTION_ASM_OP' will be used.

`INIT_SECTION_ASM_OP'
     If defined, a C string constant for the assembler operation to
     identify the following data as initialization code.  If not
     defined, GNU CC will assume such a section does not exist.

`EXTRA_SECTIONS'
     A list of names for sections other than the standard two, which are
     `in_text' and `in_data'.  You need not define this macro on a
     system with no other sections (that GCC needs to use).

`EXTRA_SECTION_FUNCTIONS'
     One or more functions to be defined in `varasm.c'.  These
     functions should do jobs analogous to those of `text_section' and
     `data_section', for your additional sections.  Do not define this
     macro if you do not define `EXTRA_SECTIONS'.

`READONLY_DATA_SECTION'
     On most machines, read-only variables, constants, and jump tables
     are placed in the text section.  If this is not the case on your
     machine, this macro should be defined to be the name of a function
     (either `data_section' or a function defined in `EXTRA_SECTIONS')
     that switches to the section to be used for read-only items.

     If these items should be placed in the text section, this macro
     should not be defined.

`SELECT_SECTION (EXP, RELOC)'
     A C statement or statements to switch to the appropriate section
     for output of EXP.  You can assume that EXP is either a `VAR_DECL'
     node or a constant of some sort.  RELOC indicates whether the
     initial value of EXP requires link-time relocations.  Select the
     section by calling `text_section' or one of the alternatives for
     other sections.

     Do not define this macro if you put all read-only variables and
     constants in the read-only data section (usually the text section).

`SELECT_RTX_SECTION (MODE, RTX)'
     A C statement or statements to switch to the appropriate section
     for output of RTX in mode MODE.  You can assume that RTX is some
     kind of constant in RTL.  The argument MODE is redundant except in
     the case of a `const_int' rtx.  Select the section by calling
     `text_section' or one of the alternatives for other sections.

     Do not define this macro if you put all constants in the read-only
     data section.

`JUMP_TABLES_IN_TEXT_SECTION'
     Define this macro if jump tables (for `tablejump' insns) should be
     output in the text section, along with the assembler instructions.
     Otherwise, the readonly data section is used.

     This macro is irrelevant if there is no separate readonly data
     section.

`ENCODE_SECTION_INFO (DECL)'
     Define this macro if references to a symbol must be treated
     differently depending on something about the variable or function
     named by the symbol (such as what section it is in).

     The macro definition, if any, is executed immediately after the
     rtl for DECL has been created and stored in `DECL_RTL (DECL)'. The
     value of the rtl will be a `mem' whose address is a `symbol_ref'.

     The usual thing for this macro to do is to record a flag in the
     `symbol_ref' (such as `SYMBOL_REF_FLAG') or to store a modified
     name string in the `symbol_ref' (if one bit is not enough
     information).


@EndNode

@Node "PIC" "gcc.guide/PIC"
@Next "Assembler Format"
@Prev "Sections"
@Toc "Target Macros"

Position Independent Code
=========================

   This section describes macros that help implement generation of
position independent code.  Simply defining these macros is not enough
to generate valid PIC; you must also add support to the macros
`GO_IF_LEGITIMATE_ADDRESS' and `LEGITIMIZE_ADDRESS', and
`PRINT_OPERAND_ADDRESS' as well.  You must modify the definition of
`movsi' to do something appropriate when the source operand contains a
symbolic address.  You may also need to alter the handling of switch
statements so that they use relative addresses.

`PIC_OFFSET_TABLE_REGNUM'
     The register number of the register used to address a table of
     static data addresses in memory.  In some cases this register is
     defined by a processor's "application binary interface" (ABI). 
     When this macro is defined, RTL is generated for this register
     once, as with the stack pointer and frame pointer registers.  If
     this macro is not defined, it is up to the machine-dependent files
     to allocate such a register (if necessary).

`FINALIZE_PIC'
     By generating position-independent code, when two different
     programs (A and B) share a common library (libC.a), the text of
     the library can be shared whether or not the library is linked at
     the same address for both programs.  In some of these
     environments, position-independent code requires not only the use
     of different addressing modes, but also special code to enable the
     use of these addressing modes.

     The `FINALIZE_PIC' macro serves as a hook to emit these special
     codes once the function is being compiled into assembly code, but
     not before.  (It is not done before, because in the case of
     compiling an inline function, it would lead to multiple PIC
     prologues being included in functions which used inline functions
     and were compiled to assembly language.)


@EndNode

@Node "Assembler Format" "gcc.guide/Assembler Format"
@Next "Debugging Info"
@Prev "PIC"
@Toc "Target Macros"

Defining the Output Assembler Language
======================================

   This section describes macros whose principal purpose is to describe
how to write instructions in assembler language--rather than what the
instructions do.


 @{" File Framework " Link "File Framework"}        Structural information for the assembler file.
 @{" Data Output " Link "Data Output"}           Output of constants (numbers, strings, addresses).
 @{" Uninitialized Data " Link "Uninitialized Data"}    Output of uninitialized variables.
 @{" Label Output " Link "Label Output"}          Output and generation of labels.
 @{" Constructor Output " Link "Constructor Output"} 	 Output of initialization and termination routines.
 @{" Instruction Output " Link "Instruction Output"}    Output of actual instructions.
 @{" Dispatch Tables " Link "Dispatch Tables"}       Output of jump tables.
 @{" Alignment Output " Link "Alignment Output"}      Pseudo ops for alignment and skipping data.


@EndNode

@Node "File Framework" "gcc.guide/File Framework"
@Next "Data Output"
@Toc "Assembler Format"

The Overall Framework of an Assembler File
------------------------------------------

`ASM_FILE_START (STREAM)'
     A C expression which outputs to the stdio stream STREAM some
     appropriate text to go at the start of an assembler file.

     Normally this macro is defined to output a line containing
     `#NO_APP', which is a comment that has no effect on most
     assemblers but tells the GNU assembler that it can save time by not
     checking for certain assembler constructs.

     On systems that use SDB, it is necessary to output certain
     commands; see `attasm.h'.

`ASM_FILE_END (STREAM)'
     A C expression which outputs to the stdio stream STREAM some
     appropriate text to go at the end of an assembler file.

     If this macro is not defined, the default is to output nothing
     special at the end of the file.  Most systems don't require any
     definition.

     On systems that use SDB, it is necessary to output certain
     commands; see `attasm.h'.

`ASM_IDENTIFY_GCC (FILE)'
     A C statement to output assembler commands which will identify the
     object file as having been compiled with GNU CC (or another GNU
     compiler).

     If you don't define this macro, the string `gcc_compiled.:' is
     output.  This string is calculated to define a symbol which, on
     BSD systems, will never be defined for any other reason. GDB
     checks for the presence of this symbol when reading the symbol
     table of an executable.

     On non-BSD systems, you must arrange communication with GDB in
     some other fashion.  If GDB is not used on your system, you can
     define this macro with an empty body.

`ASM_COMMENT_START'
     A C string constant describing how to begin a comment in the target
     assembler language.  The compiler assumes that the comment will
     end at the end of the line.

`ASM_APP_ON'
     A C string constant for text to be output before each `asm'
     statement or group of consecutive ones.  Normally this is
     `"#APP"', which is a comment that has no effect on most assemblers
     but tells the GNU assembler that it must check the lines that
     follow for all valid assembler constructs.

`ASM_APP_OFF'
     A C string constant for text to be output after each `asm'
     statement or group of consecutive ones.  Normally this is
     `"#NO_APP"', which tells the GNU assembler to resume making the
     time-saving assumptions that are valid for ordinary compiler
     output.

`ASM_OUTPUT_SOURCE_FILENAME (STREAM, NAME)'
     A C statement to output COFF information or DWARF debugging
     information which indicates that filename NAME is the current
     source file to the stdio stream STREAM.

     This macro need not be defined if the standard form of output for
     the file format in use is appropriate.

`ASM_OUTPUT_SOURCE_LINE (STREAM, LINE)'
     A C statement to output DBX or SDB debugging information before
     code for line number LINE of the current source file to the stdio
     stream STREAM.

     This macro need not be defined if the standard form of debugging
     information for the debugger in use is appropriate.

`ASM_OUTPUT_IDENT (STREAM, STRING)'
     A C statement to output something to the assembler file to handle a
     `#ident' directive containing the text STRING.  If this macro is
     not defined, nothing is output for a `#ident' directive.

`OBJC_PROLOGUE'
     A C statement to output any assembler statements which are
     required to precede any Objective C object definitions or message
     sending.  The statement is executed only when compiling an
     Objective C program.


@EndNode

@Node "Data Output" "gcc.guide/Data Output"
@Next "Uninitialized Data"
@Prev "File Framework"
@Toc "Assembler Format"

Output of Data
--------------

`ASM_OUTPUT_LONG_DOUBLE (STREAM, VALUE)'
`ASM_OUTPUT_DOUBLE (STREAM, VALUE)'
`ASM_OUTPUT_FLOAT (STREAM, VALUE)'
     A C statement to output to the stdio stream STREAM an assembler
     instruction to assemble a floating-point constant of `TFmode',
     `DFmode' or `SFmode', respectively, whose value is VALUE.  VALUE
     will be a C expression of type `REAL_VALUE__TYPE', usually
     `double'.

`ASM_OUTPUT_QUADRUPLE_INT (STREAM, EXP)'
`ASM_OUTPUT_DOUBLE_INT (STREAM, EXP)'
`ASM_OUTPUT_INT (STREAM, EXP)'
`ASM_OUTPUT_SHORT (STREAM, EXP)'
`ASM_OUTPUT_CHAR (STREAM, EXP)'
     A C statement to output to the stdio stream STREAM an assembler
     instruction to assemble an integer of 16, 8, 4, 2 or 1 bytes,
     respectively, whose value is VALUE.  The argument EXP will be an
     RTL expression which represents a constant value.  Use
     `output_addr_const (STREAM, EXP)' to output this value as an
     assembler expression.

     For sizes larger than `UNITS_PER_WORD', if the action of a macro
     would be identical to repeatedly calling the macro corresponding to
     a size of `UNITS_PER_WORD', once for each word, you need not define
     the macro.

`ASM_OUTPUT_BYTE (STREAM, VALUE)'
     A C statement to output to the stdio stream STREAM an assembler
     instruction to assemble a single byte containing the number VALUE.

`ASM_BYTE_OP'
     A C string constant giving the pseudo-op to use for a sequence of
     single-byte constants.  If this macro is not defined, the default
     is `"byte"'.

`ASM_OUTPUT_ASCII (STREAM, PTR, LEN)'
     A C statement to output to the stdio stream STREAM an assembler
     instruction to assemble a string constant containing the LEN bytes
     at PTR.  PTR will be a C expression of type `char *' and LEN a C
     expression of type `int'.

     If the assembler has a `.ascii' pseudo-op as found in the Berkeley
     Unix assembler, do not define the macro `ASM_OUTPUT_ASCII'.

`ASM_OUTPUT_POOL_PROLOGUE (FILE FUNNAME FUNDECL SIZE)'
     A C statement to output assembler commands to define the start of
     the constant pool for a function.  FUNNAME is a string giving the
     name of the function.  Should the return type of the function be
     required, it can be obtained via FUNDECL.  SIZE is the size, in
     bytes, of the constant pool that will be written immediately after
     this call.

     If no constant-pool prefix is required, the usual case, this macro
     need not be defined.

`ASM_OUTPUT_SPECIAL_POOL_ENTRY (FILE, X, MODE, ALIGN, LABELNO, JUMPTO)'
     A C statement (with or without semicolon) to output a constant in
     the constant pool, if it needs special treatment.  (This macro
     need not do anything for RTL expressions that can be output
     normally.)

     The argument FILE is the standard I/O stream to output the
     assembler code on.  X is the RTL expression for the constant to
     output, and MODE is the machine mode (in case X is a `const_int').
      ALIGN is the required alignment for the value X; you should
     output an assembler directive to force this much alignment.

     The argument LABELNO is a number to use in an internal label for
     the address of this pool entry.  The definition of this macro is
     responsible for outputting the label definition at the proper
     place. Here is how to do this:

          ASM_OUTPUT_INTERNAL_LABEL (FILE, "LC", LABELNO);

     When you output a pool entry specially, you should end with a
     `goto' to the label JUMPTO.  This will prevent the same pool entry
     from being output a second time in the usual manner.

     You need not define this macro if it would do nothing.

`ASM_OPEN_PAREN'
`ASM_CLOSE_PAREN'
     These macros are defined as C string constant, describing the
     syntax in the assembler for grouping arithmetic expressions.  The
     following definitions are correct for most assemblers:

          #define ASM_OPEN_PAREN "("
          #define ASM_CLOSE_PAREN ")"


@EndNode

@Node "Uninitialized Data" "gcc.guide/Uninitialized Data"
@Next "Label Output"
@Prev "Data Output"
@Toc "Assembler Format"

Output of Uninitialized Variables
---------------------------------

   Each of the macros in this section is used to do the whole job of
outputting a single uninitialized variable.

`ASM_OUTPUT_COMMON (STREAM, NAME, SIZE, ROUNDED)'
     A C statement (sans semicolon) to output to the stdio stream
     STREAM the assembler definition of a common-label named NAME whose
     size is SIZE bytes.  The variable ROUNDED is the size rounded up
     to whatever alignment the caller wants.

     Use the expression `assemble_name (STREAM, NAME)' to output the
     name itself; before and after that, output the additional
     assembler syntax for defining the name, and a newline.

     This macro controls how the assembler definitions of uninitialized
     global variables are output.

`ASM_OUTPUT_ALIGNED_COMMON (STREAM, NAME, SIZE, ALIGNMENT)'
     Like `ASM_OUTPUT_COMMON' except takes the required alignment as a
     separate, explicit argument.  If you define this macro, it is used
     in place of `ASM_OUTPUT_COMMON', and gives you more flexibility in
     handling the required alignment of the variable.

`ASM_OUTPUT_SHARED_COMMON (STREAM, NAME, SIZE, ROUNDED)'
     If defined, it is similar to `ASM_OUTPUT_COMMON', except that it
     is used when NAME is shared.  If not defined, `ASM_OUTPUT_COMMON'
     will be used.

`ASM_OUTPUT_LOCAL (STREAM, NAME, SIZE, ROUNDED)'
     A C statement (sans semicolon) to output to the stdio stream
     STREAM the assembler definition of a local-common-label named NAME
     whose size is SIZE bytes.  The variable ROUNDED is the size
     rounded up to whatever alignment the caller wants.

     Use the expression `assemble_name (STREAM, NAME)' to output the
     name itself; before and after that, output the additional
     assembler syntax for defining the name, and a newline.

     This macro controls how the assembler definitions of uninitialized
     static variables are output.

`ASM_OUTPUT_ALIGNED_LOCAL (STREAM, NAME, SIZE, ALIGNMENT)'
     Like `ASM_OUTPUT_LOCAL' except takes the required alignment as a
     separate, explicit argument.  If you define this macro, it is used
     in place of `ASM_OUTPUT_LOCAL', and gives you more flexibility in
     handling the required alignment of the variable.

`ASM_OUTPUT_SHARED_LOCAL (STREAM, NAME, SIZE, ROUNDED)'
     If defined, it is similar to `ASM_OUTPUT_LOCAL', except that it is
     used when NAME is shared.  If not defined, `ASM_OUTPUT_LOCAL' will
     be used.


@EndNode

@Node "Label Output" "gcc.guide/Label Output"
@Next "Constructor Output"
@Prev "Uninitialized Data"
@Toc "Assembler Format"

Output and Generation of Labels
-------------------------------

`ASM_OUTPUT_LABEL (STREAM, NAME)'
     A C statement (sans semicolon) to output to the stdio stream
     STREAM the assembler definition of a label named NAME. Use the
     expression `assemble_name (STREAM, NAME)' to output the name
     itself; before and after that, output the additional assembler
     syntax for defining the name, and a newline.

`ASM_DECLARE_FUNCTION_NAME (STREAM, NAME, DECL)'
     A C statement (sans semicolon) to output to the stdio stream
     STREAM any text necessary for declaring the name NAME of a
     function which is being defined.  This macro is responsible for
     outputting the label definition (perhaps using
     `ASM_OUTPUT_LABEL').  The argument DECL is the `FUNCTION_DECL'
     tree node representing the function.

     If this macro is not defined, then the function name is defined in
     the usual manner as a label (by means of `ASM_OUTPUT_LABEL').

`ASM_DECLARE_FUNCTION_SIZE (STREAM, NAME, DECL)'
     A C statement (sans semicolon) to output to the stdio stream
     STREAM any text necessary for declaring the size of a function
     which is being defined.  The argument NAME is the name of the
     function.  The argument DECL is the `FUNCTION_DECL' tree node
     representing the function.

     If this macro is not defined, then the function size is not
     defined.

`ASM_DECLARE_OBJECT_NAME (STREAM, NAME, DECL)'
     A C statement (sans semicolon) to output to the stdio stream
     STREAM any text necessary for declaring the name NAME of an
     initialized variable which is being defined.  This macro must
     output the label definition (perhaps using `ASM_OUTPUT_LABEL'). 
     The argument DECL is the `VAR_DECL' tree node representing the
     variable.

     If this macro is not defined, then the variable name is defined in
     the usual manner as a label (by means of `ASM_OUTPUT_LABEL').

`ASM_GLOBALIZE_LABEL (STREAM, NAME)'
     A C statement (sans semicolon) to output to the stdio stream
     STREAM some commands that will make the label NAME global; that
     is, available for reference from other files.  Use the expression
     `assemble_name (STREAM, NAME)' to output the name itself; before
     and after that, output the additional assembler syntax for making
     that name global, and a newline.

`ASM_OUTPUT_EXTERNAL (STREAM, DECL, NAME)'
     A C statement (sans semicolon) to output to the stdio stream
     STREAM any text necessary for declaring the name of an external
     symbol named NAME which is referenced in this compilation but not
     defined.  The value of DECL is the tree node for the declaration.

     This macro need not be defined if it does not need to output
     anything. The GNU assembler and most Unix assemblers don't require
     anything.

`ASM_OUTPUT_EXTERNAL_LIBCALL (STREAM, SYMREF)'
     A C statement (sans semicolon) to output on STREAM an assembler
     pseudo-op to declare a library function name external.  The name
     of the library function is given by SYMREF, which has type `rtx'
     and is a `symbol_ref'.

     This macro need not be defined if it does not need to output
     anything. The GNU assembler and most Unix assemblers don't require
     anything.

`ASM_OUTPUT_LABELREF (STREAM, NAME)'
     A C statement (sans semicolon) to output to the stdio stream
     STREAM a reference in assembler syntax to a label named NAME. 
     This should add `_' to the front of the name, if that is customary
     on your operating system, as it is in most Berkeley Unix systems. 
     This macro is used in `assemble_name'.

`ASM_OUTPUT_LABELREF_AS_INT (FILE, LABEL)'
     Define this macro for systems that use the program `collect2'. The
     definition should be a C statement to output a word containing a
     reference to the label LABEL.

`ASM_OUTPUT_INTERNAL_LABEL (STREAM, PREFIX, NUM)'
     A C statement to output to the stdio stream STREAM a label whose
     name is made from the string PREFIX and the number NUM.

     It is absolutely essential that these labels be distinct from the
     labels used for user-level functions and variables.  Otherwise,
     certain programs will have name conflicts with internal labels.

     It is desirable to exclude internal labels from the symbol table
     of the object file.  Most assemblers have a naming convention for
     labels that should be excluded; on many systems, the letter `L' at
     the beginning of a label has this effect.  You should find out what
     convention your system uses, and follow it.

     The usual definition of this macro is as follows:

          fprintf (STREAM, "L%s%d:\n", PREFIX, NUM)

`ASM_GENERATE_INTERNAL_LABEL (STRING, PREFIX, NUM)'
     A C statement to store into the string STRING a label whose name
     is made from the string PREFIX and the number NUM.

     This string, when output subsequently by `assemble_name', should
     produce the same output that `ASM_OUTPUT_INTERNAL_LABEL' would
     produce with the same PREFIX and NUM.

     If the string begins with `*', then `assemble_name' will output
     the rest of the string unchanged.  It is often convenient for
     `ASM_GENERATE_INTERNAL_LABEL' to use `*' in this way.  If the
     string doesn't start with `*', then `ASM_OUTPUT_LABELREF' gets to
     output the string, and may change it.  (Of course,
     `ASM_OUTPUT_LABELREF' is also part of your machine description, so
     you should know what it does on your machine.)

`ASM_FORMAT_PRIVATE_NAME (OUTVAR, NAME, NUMBER)'
     A C expression to assign to OUTVAR (which is a variable of type
     `char *') a newly allocated string made from the string NAME and
     the number NUMBER, with some suitable punctuation added.  Use
     `alloca' to get space for the string.

     This string will be used as the argument to `ASM_OUTPUT_LABELREF'
     to produce an assembler label for an internal static variable whose
     name is NAME.  Therefore, the string must be such as to result in
     valid assembler code.  The argument NUMBER is different each time
     this macro is executed; it prevents conflicts between
     similarly-named internal static variables in different scopes.

     Ideally this string should not be a valid C identifier, to prevent
     any conflict with the user's own symbols.  Most assemblers allow
     periods or percent signs in assembler symbols; putting at least
     one of these between the name and the number will suffice.

`OBJC_GEN_METHOD_LABEL (BUF, IS_INST, CLASS_NAME, CAT_NAME, SEL_NAME)'
     Define this macro to override the default assembler names used for
     Objective C methods.

     The default name is a unique method number followed by the name of
     the class (e.g. `_1_Foo').  For methods in categories, the name of
     the category is also included in the assembler name (e.g.
     `_1_Foo_Bar').

     These names are safe on most systems, but make debugging difficult
     since the method's selector is not present in the name. 
     Therefore, particular systems define other ways of computing names.

     BUF is an expression of type `char *' which gives you a buffer in
     which to store the name; its length is as long as CLASS_NAME,
     CAT_NAME and SEL_NAME put together, plus 50 characters extra.

     The argument IS_INST specifies whether the method is an instance
     method or a class method; CLASS_NAME is the name of the class;
     CAT_NAME is the name of the category (or NULL if the method is not
     in a category); and SEL_NAME is the name of the selector.

     On systems where the assembler can handle quoted names, you can
     use this macro to provide more human-readable names.


@EndNode

@Node "Constructor Output" "gcc.guide/Constructor Output"
@Next "Instruction Output"
@Prev "Label Output"
@Toc "Assembler Format"

Output of Initialization Routines
---------------------------------

   The compiled code for certain languages includes "constructors"
(also called "initialization routines")--functions to initialize data
in the program when the program is started.  These functions need to be
called before the program is "started"--that is to say, before `main'
is called.

   Compiling some languages generates "destructors" (also called
"termination routines") that should be called when the program
terminates.

   To make the initialization and termination functions work, the
compiler must output something in the assembler code to cause those
functions to be called at the appropriate time.  When you port the
compiler to a new system, you need to specify what assembler code is
needed to do this.

   Here are the two macros you should define if necessary:

`ASM_OUTPUT_CONSTRUCTOR (STREAM, NAME)'
     Define this macro as a C statement to output on the stream STREAM
     the assembler code to arrange to call the function named NAME at
     initialization time.

     Assume that NAME is the name of a C function generated
     automatically by the compiler.  This function takes no arguments. 
     Use the function `assemble_name' to output the name NAME; this
     performs any system-specific syntactic transformations such as
     adding an underscore.

     If you don't define this macro, nothing special is output to
     arrange to call the function.  This is correct when the function
     will be called in some other manner--for example, by means of the
     `collect' program, which looks through the symbol table to find
     these functions by their names.  If you want to use `collect',
     then you need to arrange for it to be built and installed and used
     on your system.

`ASM_OUTPUT_DESTRUCTOR (STREAM, NAME)'
     This is like `ASM_OUTPUT_CONSTRUCTOR' but used for termination
     functions rather than initialization functions.

   If your system uses `collect2' as the means of processing
constructors, then that program normally uses `nm' to scan an object
file for constructor functions to be called.  On certain kinds of
systems, you can define these macros to make `collect2' work faster
(and, in some cases, make it work at all):

`OBJECT_FORMAT_COFF'
     Define this macro if the system uses COFF (Common Object File
     Format) object files, so that `collect2' can assume this format
     and scan object files directly for dynamic constructor/destructor
     functions.

`OBJECT_FORMAT_ROSE'
     Define this macro if the system uses ROSE format object files, so
     that `collect2' can assume this format and scan object files
     directly for dynamic constructor/destructor functions.

   These macros are effective only in a native compiler; `collect2' as
part of a cross compiler always uses `nm'.

`REAL_NM_FILE_NAME'
     Define this macro as a C string constant containing the file name
     to use to execute `nm'.  The default is to search the path
     normally for `nm'.


@EndNode

@Node "Instruction Output" "gcc.guide/Instruction Output"
@Next "Dispatch Tables"
@Prev "Constructor Output"
@Toc "Assembler Format"

Output of Assembler Instructions
--------------------------------

`REGISTER_NAMES'
     A C initializer containing the assembler's names for the machine
     registers, each one as a C string constant.  This is what
     translates register numbers in the compiler into assembler
     language.

`ADDITIONAL_REGISTER_NAMES'
     If defined, a C initializer for an array of structures containing
     a name and a register number.  This macro defines additional names
     for hard registers, thus allowing the `asm' option in declarations
     to refer to registers using alternate names.

`ASM_OUTPUT_OPCODE (STREAM, PTR)'
     Define this macro if you are using an unusual assembler that
     requires different names for the machine instructions.

     The definition is a C statement or statements which output an
     assembler instruction opcode to the stdio stream STREAM.  The
     macro-operand PTR is a variable of type `char *' which points to
     the opcode name in its "internal" form--the form that is written
     in the machine description.  The definition should output the
     opcode name to STREAM, performing any translation you desire, and
     increment the variable PTR to point at the end of the opcode so
     that it will not be output twice.

     In fact, your macro definition may process less than the entire
     opcode name, or more than the opcode name; but if you want to
     process text that includes `%'-sequences to substitute operands,
     you must take care of the substitution yourself.  Just be sure to
     increment PTR over whatever text should not be output normally.

     If you need to look at the operand values, they can be found as the
     elements of `recog_operand'.

     If the macro definition does nothing, the instruction is output in
     the usual way.

`FINAL_PRESCAN_INSN (INSN, OPVEC, NOPERANDS)'
     If defined, a C statement to be executed just prior to the output
     of assembler code for INSN, to modify the extracted operands so
     they will be output differently.

     Here the argument OPVEC is the vector containing the operands
     extracted from INSN, and NOPERANDS is the number of elements of
     the vector which contain meaningful data for this insn. The
     contents of this vector are what will be used to convert the insn
     template into assembler code, so you can change the assembler
     output by changing the contents of the vector.

     This macro is useful when various assembler syntaxes share a single
     file of instruction patterns; by defining this macro differently,
     you can cause a large class of instructions to be output
     differently (such as with rearranged operands).  Naturally,
     variations in assembler syntax affecting individual insn patterns
     ought to be handled by writing conditional output routines in
     those patterns.

     If this macro is not defined, it is equivalent to a null statement.

`PRINT_OPERAND (STREAM, X, CODE)'
     A C compound statement to output to stdio stream STREAM the
     assembler syntax for an instruction operand X.  X is an RTL
     expression.

     CODE is a value that can be used to specify one of several ways of
     printing the operand.  It is used when identical operands must be
     printed differently depending on the context.  CODE comes from the
     `%' specification that was used to request printing of the
     operand.  If the specification was just `%DIGIT' then CODE is 0;
     if the specification was `%LTR DIGIT' then CODE is the ASCII code
     for LTR.

     If X is a register, this macro should print the register's name.
     The names can be found in an array `reg_names' whose type is `char
     *[]'.  `reg_names' is initialized from `REGISTER_NAMES'.

     When the machine description has a specification `%PUNCT' (a `%'
     followed by a punctuation character), this macro is called with a
     null pointer for X and the punctuation character for CODE.

`PRINT_OPERAND_PUNCT_VALID_P (CODE)'
     A C expression which evaluates to true if CODE is a valid
     punctuation character for use in the `PRINT_OPERAND' macro.  If
     `PRINT_OPERAND_PUNCT_VALID_P' is not defined, it means that no
     punctuation characters (except for the standard one, `%') are used
     in this way.

`PRINT_OPERAND_ADDRESS (STREAM, X)'
     A C compound statement to output to stdio stream STREAM the
     assembler syntax for an instruction operand that is a memory
     reference whose address is X.  X is an RTL expression.

     On some machines, the syntax for a symbolic address depends on the
     section that the address refers to.  On these machines, define the
     macro `ENCODE_SECTION_INFO' to store the information into the
     `symbol_ref', and then check for it here.  See @{"Assembler Format" Link "Assembler Format"}.

`DBR_OUTPUT_SEQEND(FILE)'
     A C statement, to be executed after all slot-filler instructions
     have been output.  If necessary, call `dbr_sequence_length' to
     determine the number of slots filled in a sequence (zero if not
     currently outputting a sequence), to decide how many no-ops to
     output, or whatever.

     Don't define this macro if it has nothing to do, but it is helpful
     in reading assembly output if the extent of the delay sequence is
     made explicit (e.g. with white space).

     Note that output routines for instructions with delay slots must be
     prepared to deal with not being output as part of a sequence (i.e.
     when the scheduling pass is not run, or when no slot fillers could
     be found.)  The variable `final_sequence' is null when not
     processing a sequence, otherwise it contains the `sequence' rtx
     being output.

`REGISTER_PREFIX'
`LOCAL_LABEL_PREFIX'
`USER_LABEL_PREFIX'
`IMMEDIATE_PREFIX'
     If defined, C string expressions to be used for the `%R', `%L',
     `%U', and `%I' options of `asm_fprintf' (see `final.c').  These
     are useful when a single `md' file must support multiple assembler
     formats.  In that case, the various `tm.h' files can define these
     macros differently.

`ASM_OUTPUT_REG_PUSH (STREAM, REGNO)'
     A C expression to output to STREAM some assembler code which will
     push hard register number REGNO onto the stack. The code need not
     be optimal, since this macro is used only when profiling.

`ASM_OUTPUT_REG_POP (STREAM, REGNO)'
     A C expression to output to STREAM some assembler code which will
     pop hard register number REGNO off of the stack. The code need not
     be optimal, since this macro is used only when profiling.


@EndNode

@Node "Dispatch Tables" "gcc.guide/Dispatch Tables"
@Next "Alignment Output"
@Prev "Instruction Output"
@Toc "Assembler Format"

Output of Dispatch Tables
-------------------------

`ASM_OUTPUT_ADDR_DIFF_ELT (STREAM, VALUE, REL)'
     This macro should be provided on machines where the addresses in a
     dispatch table are relative to the table's own address.

     The definition should be a C statement to output to the stdio
     stream STREAM an assembler pseudo-instruction to generate a
     difference between two labels.  VALUE and REL are the numbers of
     two internal labels.  The definitions of these labels are output
     using `ASM_OUTPUT_INTERNAL_LABEL', and they must be printed in the
     same way here.  For example,

          fprintf (STREAM, "\t.word L%d-L%d\n",
                   VALUE, REL)

`ASM_OUTPUT_ADDR_VEC_ELT (STREAM, VALUE)'
     This macro should be provided on machines where the addresses in a
     dispatch table are absolute.

     The definition should be a C statement to output to the stdio
     stream STREAM an assembler pseudo-instruction to generate a
     reference to a label.  VALUE is the number of an internal label
     whose definition is output using `ASM_OUTPUT_INTERNAL_LABEL'. For
     example,

          fprintf (STREAM, "\t.word L%d\n", VALUE)

`ASM_OUTPUT_CASE_LABEL (STREAM, PREFIX, NUM, TABLE)'
     Define this if the label before a jump-table needs to be output
     specially.  The first three arguments are the same as for
     `ASM_OUTPUT_INTERNAL_LABEL'; the fourth argument is the jump-table
     which follows (a `jump_insn' containing an `addr_vec' or
     `addr_diff_vec').

     This feature is used on system V to output a `swbeg' statement for
     the table.

     If this macro is not defined, these labels are output with
     `ASM_OUTPUT_INTERNAL_LABEL'.

`ASM_OUTPUT_CASE_END (STREAM, NUM, TABLE)'
     Define this if something special must be output at the end of a
     jump-table.  The definition should be a C statement to be executed
     after the assembler code for the table is written.  It should write
     the appropriate code to stdio stream STREAM.  The argument TABLE
     is the jump-table insn, and NUM is the label-number of the
     preceding label.

     If this macro is not defined, nothing special is output at the end
     of the jump-table.


@EndNode

@Node "Alignment Output" "gcc.guide/Alignment Output"
@Prev "Dispatch Tables"
@Toc "Assembler Format"

Assembler Commands for Alignment
--------------------------------

`ASM_OUTPUT_ALIGN_CODE (FILE)'
     A C expression to output text to align the location counter in the
     way that is desirable at a point in the code that is reached only
     by jumping.

     This macro need not be defined if you don't want any special
     alignment to be done at such a time.  Most machine descriptions do
     not currently define the macro.

`ASM_OUTPUT_LOOP_ALIGN (FILE)'
     A C expression to output text to align the location counter in the
     way that is desirable at the beginning of a loop.

     This macro need not be defined if you don't want any special
     alignment to be done at such a time.  Most machine descriptions do
     not currently define the macro.

`ASM_OUTPUT_SKIP (STREAM, NBYTES)'
     A C statement to output to the stdio stream STREAM an assembler
     instruction to advance the location counter by NBYTES bytes. Those
     bytes should be zero when loaded.  NBYTES will be a C expression
     of type `int'.

`ASM_NO_SKIP_IN_TEXT'
     Define this macro if `ASM_OUTPUT_SKIP' should not be used in the
     text section because it fails put zeros in the bytes that are
     skipped. This is true on many Unix systems, where the pseudo--op
     to skip bytes produces no-op instructions rather than zeros when
     used in the text section.

`ASM_OUTPUT_ALIGN (STREAM, POWER)'
     A C statement to output to the stdio stream STREAM an assembler
     command to advance the location counter to a multiple of 2 to the
     POWER bytes.  POWER will be a C expression of type `int'.


@EndNode

@Node "Debugging Info" "gcc.guide/Debugging Info"
@Next "Cross-compilation"
@Prev "Assembler Format"
@Toc "Target Macros"

Controlling Debugging Information Format
========================================


 @{" All Debuggers " Link "All Debuggers"}       Macros that affect all debugging formats uniformly.
 @{" DBX Options " Link "DBX Options"}         Macros enabling specific options in DBX format.
 @{" DBX Hooks " Link "DBX Hooks"}           Hook macros for varying DBX format.
 @{" File Names and DBX " Link "File Names and DBX"}  Macros controlling output of file names in DBX format.
 @{" SDB and DWARF " Link "SDB and DWARF"}       Macros for SDB (COFF) and DWARF formats.


@EndNode

@Node "All Debuggers" "gcc.guide/All Debuggers"
@Next "DBX Options"
@Toc "Debugging Info"

Macros Affecting All Debugging Formats
--------------------------------------

`DBX_REGISTER_NUMBER (REGNO)'
     A C expression that returns the DBX register number for the
     compiler register number REGNO.  In simple cases, the value of this
     expression may be REGNO itself.  But sometimes there are some
     registers that the compiler knows about and DBX does not, or vice
     versa.  In such cases, some register may need to have one number in
     the compiler and another for DBX.

     If two registers have consecutive numbers inside GNU CC, and they
     can be used as a pair to hold a multiword value, then they *must*
     have consecutive numbers after renumbering with
     `DBX_REGISTER_NUMBER'. Otherwise, debuggers will be unable to
     access such a pair, because they expect register pairs to be
     consecutive in their own numbering scheme.

     If you find yourself defining `DBX_REGISTER_NUMBER' in way that
     does not preserve register pairs, then what you must do instead is
     redefine the actual register numbering scheme.

`DEBUGGER_AUTO_OFFSET (X)'
     A C expression that returns the integer offset value for an
     automatic variable having address X (an RTL expression).  The
     default computation assumes that X is based on the frame-pointer
     and gives the offset from the frame-pointer.  This is required for
     targets that produce debugging output for DBX or COFF-style
     debugging output for SDB and allow the frame-pointer to be
     eliminated when the `-g' options is used.

`DEBUGGER_ARG_OFFSET (OFFSET, X)'
     A C expression that returns the integer offset value for an
     argument having address X (an RTL expression).  The nominal offset
     is OFFSET.


@EndNode

@Node "DBX Options" "gcc.guide/DBX Options"
@Next "DBX Hooks"
@Prev "All Debuggers"
@Toc "Debugging Info"

Specific Options for DBX Output
-------------------------------

`DBX_DEBUGGING_INFO'
     Define this macro if GNU CC should produce debugging output for DBX
     in response to the `-g' option.

`XCOFF_DEBUGGING_INFO'
     Define this macro if GNU CC should produce XCOFF format debugging
     output in response to the `-g' option.  This is a variant of DBX
     format.

`DEFAULT_GDB_EXTENSIONS'
     Define this macro to control whether GNU CC should by default
     generate GDB's extended version of DBX debugging information
     (assuming DBX-format debugging information is enabled at all).  If
     you don't define the macro, the default is 1: always generate the
     extended information if there is any occasion to.

`DEBUG_SYMS_TEXT'
     Define this macro if all `.stabs' commands should be output while
     in the text section.

`ASM_STABS_OP'
     A C string constant naming the assembler pseudo op to use instead
     of `.stabs' to define an ordinary debugging symbol.  If you don't
     define this macro, `.stabs' is used.  This macro applies only to
     DBX debugging information format.

`ASM_STABD_OP'
     A C string constant naming the assembler pseudo op to use instead
     of `.stabd' to define a debugging symbol whose value is the current
     location.  If you don't define this macro, `.stabd' is used. This
     macro applies only to DBX debugging information format.

`ASM_STABN_OP'
     A C string constant naming the assembler pseudo op to use instead
     of `.stabn' to define a debugging symbol with no name.  If you
     don't define this macro, `.stabn' is used.  This macro applies
     only to DBX debugging information format.

`DBX_NO_XREFS'
     Define this macro if DBX on your system does not support the
     construct `xsTAGNAME'.  On some systems, this construct is used to
     describe a forward reference to a structure named TAGNAME. On
     other systems, this construct is not supported at all.

`DBX_CONTIN_LENGTH'
     A symbol name in DBX-format debugging information is normally
     continued (split into two separate `.stabs' directives) when it
     exceeds a certain length (by default, 80 characters).  On some
     operating systems, DBX requires this splitting; on others,
     splitting must not be done.  You can inhibit splitting by defining
     this macro with the value zero.  You can override the default
     splitting-length by defining this macro as an expression for the
     length you desire.

`DBX_CONTIN_CHAR'
     Normally continuation is indicated by adding a `\' character to
     the end of a `.stabs' string when a continuation follows.  To use
     a different character instead, define this macro as a character
     constant for the character you want to use.  Do not define this
     macro if backslash is correct for your system.

`DBX_STATIC_STAB_DATA_SECTION'
     Define this macro if it is necessary to go to the data section
     before outputting the `.stabs' pseudo-op for a non-global static
     variable.

`DBX_TYPE_DECL_STABS_CODE'
     The value to use in the "code" field of the `.stabs' directive for
     a typedef.  The default is `N_LSYM'.

`DBX_STATIC_CONST_VAR_CODE'
     The value to use in the "code" field of the `.stabs' directive for
     a static variable located in the text section.  DBX format does not
     provide any "right" way to do this.  The default is `N_FUN'.

`DBX_REGPARM_STABS_CODE'
     The value to use in the "code" field of the `.stabs' directive for
     a parameter passed in registers.  DBX format does not provide any
     "right" way to do this.  The default is `N_RSYM'.

`DBX_REGPARM_STABS_LETTER'
     The letter to use in DBX symbol data to identify a symbol as a
     parameter passed in registers.  DBX format does not customarily
     provide any way to do this.  The default is `'P''.

`DBX_MEMPARM_STABS_LETTER'
     The letter to use in DBX symbol data to identify a symbol as a
     stack parameter.  The default is `'p''.

`DBX_FUNCTION_FIRST'
     Define this macro if the DBX information for a function and its
     arguments should precede the assembler code for the function. 
     Normally, in DBX format, the debugging information entirely
     follows the assembler code.

`DBX_LBRAC_FIRST'
     Define this macro if the `N_LBRAC' symbol for a block should
     precede the debugging information for variables and functions
     defined in that block.  Normally, in DBX format, the `N_LBRAC'
     symbol comes first.


@EndNode

@Node "DBX Hooks" "gcc.guide/DBX Hooks"
@Next "File Names and DBX"
@Prev "DBX Options"
@Toc "Debugging Info"

Open-Ended Hooks for DBX Format
-------------------------------

`DBX_OUTPUT_LBRAC (STREAM, NAME)'
     Define this macro to say how to output to STREAM the debugging
     information for the start of a scope level for variable names.  The
     argument NAME is the name of an assembler symbol (for use with
     `assemble_name') whose value is the address where the scope begins.

`DBX_OUTPUT_RBRAC (STREAM, NAME)'
     Like `DBX_OUTPUT_LBRAC', but for the end of a scope level.

`DBX_OUTPUT_ENUM (STREAM, TYPE)'
     Define this macro if the target machine requires special handling
     to output an enumeration type.  The definition should be a C
     statement (sans semicolon) to output the appropriate information
     to STREAM for the type TYPE.

`DBX_OUTPUT_FUNCTION_END (STREAM, FUNCTION)'
     Define this macro if the target machine requires special output at
     the end of the debugging information for a function.  The
     definition should be a C statement (sans semicolon) to output the
     appropriate information to STREAM.  FUNCTION is the
     `FUNCTION_DECL' node for the function.

`DBX_OUTPUT_STANDARD_TYPES (SYMS)'
     Define this macro if you need to control the order of output of the
     standard data types at the beginning of compilation.  The argument
     SYMS is a `tree' which is a chain of all the predefined global
     symbols, including names of data types.

     Normally, DBX output starts with definitions of the types for
     integers and characters, followed by all the other predefined
     types of the particular language in no particular order.

     On some machines, it is necessary to output different particular
     types first.  To do this, define `DBX_OUTPUT_STANDARD_TYPES' to
     output those symbols in the necessary order.  Any predefined types
     that you don't explicitly output will be output afterward in no
     particular order.

     Be careful not to define this macro so that it works only for C. 
     There are no global variables to access most of the built-in
     types, because another language may have another set of types. 
     The way to output a particular type is to look through SYMS to see
     if you can find it. Here is an example:

          {
            tree decl;
            for (decl = syms; decl; decl = TREE_CHAIN (decl))
              if (!strcmp (IDENTIFIER_POINTER (DECL_NAME (decl)), "long int"))
                dbxout_symbol (decl);
            ...
          }

     This does nothing if the expected type does not exist.

     See the function `init_decl_processing' in source file `c-decl.c'
     to find the names to use for all the built-in C types.

     Here is another way of finding a particular type:

          {
            tree decl;
            for (decl = syms; decl; decl = TREE_CHAIN (decl))
              if (TREE_CODE (decl) == TYPE_DECL
          	&& TREE_CODE (TREE_TYPE (decl)) == INTEGER_CST
                  && TYPE_PRECISION (TREE_TYPE (decl)) == 16
                  && TYPE_UNSIGNED (TREE_TYPE (decl)))
                /* This must be `unsigned short'.  */
                dbxout_symbol (decl);
            ...
          }


@EndNode

@Node "File Names and DBX" "gcc.guide/File Names and DBX"
@Next "SDB and DWARF"
@Prev "DBX Hooks"
@Toc "Debugging Info"

File Names in DBX Format
------------------------

`DBX_WORKING_DIRECTORY'
     Define this if DBX wants to have the current directory recorded in
     each object file.

     Note that the working directory is always recorded if GDB
     extensions are enabled.

`DBX_OUTPUT_MAIN_SOURCE_FILENAME (STREAM, NAME)'
     A C statement to output DBX debugging information to the stdio
     stream STREAM which indicates that file NAME is the main source
     file--the file specified as the input file for compilation. This
     macro is called only once, at the beginning of compilation.

     This macro need not be defined if the standard form of output for
     DBX debugging information is appropriate.

`DBX_OUTPUT_MAIN_SOURCE_DIRECTORY (STREAM, NAME)'
     A C statement to output DBX debugging information to the stdio
     stream STREAM which indicates that the current directory during
     compilation is named NAME.

     This macro need not be defined if the standard form of output for
     DBX debugging information is appropriate.

`DBX_OUTPUT_MAIN_SOURCE_FILE_END (STREAM, NAME)'
     A C statement to output DBX debugging information at the end of
     compilation of the main source file NAME.

     If you don't define this macro, nothing special is output at the
     end of compilation, which is correct for most machines.

`DBX_OUTPUT_SOURCE_FILENAME (STREAM, NAME)'
     A C statement to output DBX debugging information to the stdio
     stream STREAM which indicates that file NAME is the current source
     file.  This output is generated each time input shifts to a
     different source file as a result of `#include', the end of an
     included file, or a `#line' command.

     This macro need not be defined if the standard form of output for
     DBX debugging information is appropriate.


@EndNode

@Node "SDB and DWARF" "gcc.guide/SDB and DWARF"
@Prev "File Names and DBX"
@Toc "Debugging Info"

Macros for SDB and DWARF Output
-------------------------------

`SDB_DEBUGGING_INFO'
     Define this macro if GNU CC should produce COFF-style debugging
     output for SDB in response to the `-g' option.

`DWARF_DEBUGGING_INFO'
     Define this macro if GNU CC should produce dwarf format debugging
     output in response to the `-g' option.

`PUT_SDB_...'
     Define these macros to override the assembler syntax for the
     special SDB assembler directives.  See `sdbout.c' for a list of
     these macros and their arguments.  If the standard syntax is used,
     you need not define them yourself.

`SDB_DELIM'
     Some assemblers do not support a semicolon as a delimiter, even
     between SDB assembler directives.  In that case, define this macro
     to be the delimiter to use (usually `\n').  It is not necessary to
     define a new set of `PUT_SDB_OP' macros if this is the only change
     required.

`SDB_GENERATE_FAKE'
     Define this macro to override the usual method of constructing a
     dummy name for anonymous structure and union types.  See
     `sdbout.c' for more information.

`SDB_ALLOW_UNKNOWN_REFERENCES'
     Define this macro to allow references to unknown structure, union,
     or enumeration tags to be emitted.  Standard COFF does not allow
     handling of unknown references, MIPS ECOFF has support for it.

`SDB_ALLOW_FORWARD_REFERENCES'
     Define this macro to allow references to structure, union, or
     enumeration tags that have not yet been seen to be handled.  Some
     assemblers choke if forward tags are used, while some require it.


@EndNode

@Node "Cross-compilation" "gcc.guide/Cross-compilation"
@Next "Misc"
@Prev "Debugging Info"
@Toc "Target Macros"

Cross Compilation and Floating Point Format
===========================================

   While all modern machines use 2's complement representation for
integers, there are a variety of representations for floating point
numbers.  This means that in a cross-compiler the representation of
floating point numbers in the compiled program may be different from
that used in the machine doing the compilation.

   Because different representation systems may offer different amounts
of range and precision, the cross compiler cannot safely use the host
machine's floating point arithmetic.  Therefore, floating point
constants must be represented in the target machine's format.  This
means that the cross compiler cannot use `atof' to parse a floating
point constant; it must have its own special routine to use instead. 
Also, constant folding must emulate the target machine's arithmetic (or
must not be done at all).

   The macros in the following table should be defined only if you are
cross compiling between different floating point formats.

   Otherwise, don't define them. Then default definitions will be set
up which use `double' as the data type, `==' to test for equality, etc.

   You don't need to worry about how many times you use an operand of
any of these macros.  The compiler never uses operands which have side
effects.

`REAL_VALUE_TYPE'
     A macro for the C data type to be used to hold a floating point
     value in the target machine's format.  Typically this would be a
     `struct' containing an array of `int'.

`REAL_VALUES_EQUAL (X, Y)'
     A macro for a C expression which compares for equality the two
     values, X and Y, both of type `REAL_VALUE_TYPE'.

`REAL_VALUES_LESS (X, Y)'
     A macro for a C expression which tests whether X is less than Y,
     both values being of type `REAL_VALUE_TYPE' and interpreted as
     floating point numbers in the target machine's representation.

`REAL_VALUE_LDEXP (X, SCALE)'
     A macro for a C expression which performs the standard library
     function `ldexp', but using the target machine's floating point
     representation.  Both X and the value of the expression have type
     `REAL_VALUE_TYPE'.  The second argument, SCALE, is an integer.

`REAL_VALUE_FIX (X)'
     A macro whose definition is a C expression to convert the
     target-machine floating point value X to a signed integer.  X has
     type `REAL_VALUE_TYPE'.

`REAL_VALUE_UNSIGNED_FIX (X)'
     A macro whose definition is a C expression to convert the
     target-machine floating point value X to an unsigned integer.  X
     has type `REAL_VALUE_TYPE'.

`REAL_VALUE_FIX_TRUNCATE (X)'
     A macro whose definition is a C expression to convert the
     target-machine floating point value X to a signed integer,
     rounding toward 0. X has type `REAL_VALUE_TYPE'.

`REAL_VALUE_UNSIGNED_FIX_TRUNCATE (X)'
     A macro whose definition is a C expression to convert the
     target-machine floating point value X to an unsigned integer,
     rounding toward 0. X has type `REAL_VALUE_TYPE'.

`REAL_VALUE_ATOF (STRING)'
     A macro for a C expression which converts STRING, an expression of
     type `char *', into a floating point number in the target
     machine's representation.  The value has type `REAL_VALUE_TYPE'.

`REAL_INFINITY'
     Define this macro if infinity is a possible floating point value,
     and therefore division by 0 is legitimate.

`REAL_VALUE_ISINF (X)'
     A macro for a C expression which determines whether X, a floating
     point value, is infinity.  The value has type `int'. By default,
     this is defined to call `isinf'.

`REAL_VALUE_ISNAN (X)'
     A macro for a C expression which determines whether X, a floating
     point value, is a "nan" (not-a-number).  The value has type `int'.
      By default, this is defined to call `isnan'.

   Define the following additional macros if you want to make floating
point constant folding work while cross compiling.  If you don't define
them, cross compilation is still possible, but constant folding will
not happen for floating point values.

`REAL_ARITHMETIC (OUTPUT, CODE, X, Y)'
     A macro for a C statement which calculates an arithmetic operation
     of the two floating point values X and Y, both of type
     `REAL_VALUE_TYPE' in the target machine's representation, to
     produce a result of the same type and representation which is
     stored in OUTPUT (which will be a variable).

     The operation to be performed is specified by CODE, a tree code
     which will always be one of the following: `PLUS_EXPR',
     `MINUS_EXPR', `MULT_EXPR', `RDIV_EXPR', `MAX_EXPR', `MIN_EXPR'.

     The expansion of this macro is responsible for checking for
     overflow. If overflow happens, the macro expansion should execute
     the statement `return 0;', which indicates the inability to
     perform the arithmetic operation requested.

`REAL_VALUE_NEGATE (X)'
     A macro for a C expression which returns the negative of the
     floating point value X.  Both X and the value of the expression
     have type `REAL_VALUE_TYPE' and are in the target machine's
     floating point representation.

     There is no way for this macro to report overflow, since overflow
     can't happen in the negation operation.

`REAL_VALUE_TRUNCATE (X)'
     A macro for a C expression which converts the double-precision
     floating point value X to single-precision.

     Both X and the value of the expression have type `REAL_VALUE_TYPE'
     and are in the target machine's floating point representation. 
     However, the value should have an appropriate bit pattern to be
     output properly as a single-precision floating constant.

     There is no way for this macro to report overflow.

`REAL_VALUE_TO_INT (LOW, HIGH, X)'
     A macro for a C expression which converts a floating point value X
     into a double-precision integer which is then stored into LOW and
     HIGH, two variables of type INT.

`REAL_VALUE_FROM_INT (X, LOW, HIGH)'
     A macro for a C expression which converts a double-precision
     integer found in LOW and HIGH, two variables of type INT, into a
     floating point value which is then stored into X.


@EndNode

@Node "Misc" "gcc.guide/Misc"
@Prev "Cross-compilation"
@Toc "Target Macros"

Miscellaneous Parameters
========================

`PREDICATE_CODES'
     Optionally define this if you have added predicates to
     `MACHINE.c'.  This macro is called within an initializer of an
     array of structures.  The first field in the structure is the name
     of a predicate and the second field is an array of rtl codes.  For
     each predicate, list all rtl codes that can be in expressions
     matched by the predicate.  The list should have a trailing comma. 
     Here is an example of two entries in the list for a typical RISC
     machine:

          #define PREDICATE_CODES \
            {"gen_reg_rtx_operand", {SUBREG, REG}},  \
            {"reg_or_short_cint_operand", {SUBREG, REG, CONST_INT}},

     Defining this macro does not affect the generated code (however,
     incorrect definitions that omit an rtl code that may be matched by
     the predicate can cause the compiler to malfunction).  Instead, it
     allows the table built by `genrecog' to be more compact and
     efficient, thus speeding up the compiler.  The most important
     predicates to include in the list specified by this macro are
     thoses used in the most insn patterns.

`CASE_VECTOR_MODE'
     An alias for a machine mode name.  This is the machine mode that
     elements of a jump-table should have.

`CASE_VECTOR_PC_RELATIVE'
     Define this macro if jump-tables should contain relative addresses.

`CASE_DROPS_THROUGH'
     Define this if control falls through a `case' insn when the index
     value is out of range.  This means the specified default-label is
     actually ignored by the `case' insn proper.

`BYTE_LOADS_ZERO_EXTEND'
     Define this macro if an instruction to load a value narrower than a
     word from memory into a register also zero-extends the value to
     the whole register.

`IMPLICIT_FIX_EXPR'
     An alias for a tree code that should be used by default for
     conversion of floating point values to fixed point.  Normally,
     `FIX_ROUND_EXPR' is used.

`FIXUNS_TRUNC_LIKE_FIX_TRUNC'
     Define this macro if the same instructions that convert a floating
     point number to a signed fixed point number also convert validly
     to an unsigned one.

`EASY_DIV_EXPR'
     An alias for a tree code that is the easiest kind of division to
     compile code for in the general case.  It may be `TRUNC_DIV_EXPR',
     `FLOOR_DIV_EXPR', `CEIL_DIV_EXPR' or `ROUND_DIV_EXPR'.  These four
     division operators differ in how they round the result to an
     integer.  `EASY_DIV_EXPR' is used when it is permissible to use
     any of those kinds of division and the choice should be made on
     the basis of efficiency.

`MOVE_MAX'
     The maximum number of bytes that a single instruction can move
     quickly from memory to memory.

`SHIFT_COUNT_TRUNCATED'
     Defining this macro causes the compiler to omit a sign-extend,
     zero-extend, or bitwise `and' instruction that truncates the count
     of a shift operation to a width equal to the number of bits needed
     to represent the size of the object being shifted.  On machines
     that have instructions that act on bitfields at variable
     positions, including `bit test' instructions, defining
     `SHIFT_COUNT_TRUNCATED' also causes truncation not to be applied
     to these instructions.

     If both types of instructions truncate the count (for shifts) and
     position (for bitfield operations), or if no variable-position
     bitfield instructions exist, you should define this macro.

     However, on some machines, such as the 80386 and the 680x0,
     truncation only applies to shift operations and not the (real or
     pretended) bitfield operations.  Do not define
     `SHIFT_COUNT_TRUNCATED' on such machines.  Instead, add patterns
     to the `md' file that include the implied truncation of the shift
     instructions.

`TRULY_NOOP_TRUNCATION (OUTPREC, INPREC)'
     A C expression which is nonzero if on this machine it is safe to
     "convert" an integer of INPREC bits to one of OUTPREC bits (where
     OUTPREC is smaller than INPREC) by merely operating on it as if it
     had only OUTPREC bits.

     On many machines, this expression can be 1.

     It is reported that suboptimal code can result when
     `TRULY_NOOP_TRUNCATION' returns 1 for a pair of sizes for modes for
     which `MODES_TIEABLE_P' is 0.  If this is the case, making
     `TRULY_NOOP_TRUNCATION' return 0 in such cases may improve things.

`STORE_FLAG_VALUE'
     A C expression describing the value returned by a comparison
     operator and stored by a store-flag instruction (`sCOND') when the
     condition is true.  This description must apply to *all* the
     `sCOND' patterns and all the comparison operators.

     A value of 1 or -1 means that the instruction implementing the
     comparison operator returns exactly 1 or -1 when the comparison is
     true and 0 when the comparison is false.  Otherwise, the value
     indicates which bits of the result are guaranteed to be 1 when the
     comparison is true.  This value is interpreted in the mode of the
     comparison operation, which is given by the mode of the first
     operand in the `sCOND' pattern.  Either the low bit or the sign
     bit of `STORE_FLAG_VALUE' be on.  Presently, only those bits are
     used by the compiler.

     If `STORE_FLAG_VALUE' is neither 1 or -1, the compiler will
     generate code that depends only on the specified bits.  It can also
     replace comparison operators with equivalent operations if they
     cause the required bits to be set, even if the remaining bits are
     undefined. For example, on a machine whose comparison operators
     return an `SImode' value and where `STORE_FLAG_VALUE' is defined as
     `0x80000000', saying that just the sign bit is relevant, the
     expression

          (ne:SI (and:SI X (const_int POWER-OF-2)) (const_int 0))

     can be converted to

          (ashift:SI X (const_int N))

     where N is the appropriate shift count to move the bit being
     tested into the sign bit.

     There is no way to describe a machine that always sets the
     low-order bit for a true value, but does not guarantee the value
     of any other bits, but we do not know of any machine that has such
     an instruction.  If you are trying to port GNU CC to such a
     machine, include an instruction to perform a logical-and of the
     result with 1 in the pattern for the comparison operators and let
     us know (see @{"Bug Reporting" Link "Bug Reporting"}).

     Often, a machine will have multiple instructions that obtain a
     value from a comparison (or the condition codes).  Here are rules
     to guide the choice of value for `STORE_FLAG_VALUE', and hence the
     instructions to be used:

        * Use the shortest sequence that yields a valid definition for
          `STORE_FLAG_VALUE'.  It is more efficient for the compiler to
          "normalize" the value (convert it to, e.g., 1 or 0) than for
          the comparison operators to do so because there may be
          opportunities to combine the normalization with other
          operations.

        * For equal-length sequences, use a value of 1 or -1, with -1
          being slightly preferred on machines with expensive jumps and
          1 preferred on other machines.

        * As a second choice, choose a value of `0x80000001' if
          instructions exist that set both the sign and low-order bits
          but do not define the others.

        * Otherwise, use a value of `0x80000000'.

     You need not define `STORE_FLAG_VALUE' if the machine has no
     store-flag instructions.

`Pmode'
     An alias for the machine mode for pointers.  Normally the
     definition can be

          #define Pmode SImode

`FUNCTION_MODE'
     An alias for the machine mode used for memory references to
     functions being called, in `call' RTL expressions.  On most
     machines this should be `QImode'.

`INTEGRATE_THRESHOLD (DECL)'
     A C expression for the maximum number of instructions above which
     the function DECL should not be inlined.  DECL is a
     `FUNCTION_DECL' node.

     The default definition of this macro is 64 plus 8 times the number
     of arguments that the function accepts.  Some people think a larger
     threshold should be used on RISC machines.

`SCCS_DIRECTIVE'
     Define this if the preprocessor should ignore `#sccs' directives
     and print no error message.

`HANDLE_PRAGMA (STREAM)'
     Define this macro if you want to implement any pragmas.  If
     defined, it should be a C statement to be executed when `#pragma'
     is seen.  The argument STREAM is the stdio input stream from which
     the source text can be read.

     It is generally a bad idea to implement new uses of `#pragma'.  The
     only reason to define this macro is for compatibility with other
     compilers that do support `#pragma' for the sake of any user
     programs which already use it.

`DOLLARS_IN_IDENTIFIERS'
     Define this macro to control use of the character `$' in identifier
     names.  The value should be 0, 1, or 2.  0 means `$' is not allowed
     by default; 1 means it is allowed by default if `-traditional' is
     used; 2 means it is allowed by default provided `-ansi' is not
     used. 1 is the default; there is no need to define this macro in
     that case.

`NO_DOLLAR_IN_LABEL'
     Define this macro if the assembler does not accept the character
     `$' in label names.  By default constructors and destructors in
     G++ have `$' in the identifiers.  If this macro is defined, `.' is
     used instead.

`DEFAULT_MAIN_RETURN'
     Define this macro if the target system expects every program's
     `main' function to return a standard "success" value by default
     (if no other value is explicitly returned).

     The definition should be a C statement (sans semicolon) to
     generate the appropriate rtl instructions.  It is used only when
     compiling the end of `main'.

`HAVE_ATEXIT'
     Define this if the target system supports the function `atexit'
     from the ANSI C standard.  If this is not defined, and
     `INIT_SECTION_ASM_OP' is not defined, a default `exit' function
     will be provided to support C++.

`EXIT_BODY'
     Define this if your `exit' function needs to do something besides
     calling an external function `_cleanup' before terminating with
     `_exit'.  The `EXIT_BODY' macro is only needed if netiher
     `HAVE_ATEXIT' nor `INIT_SECTION_ASM_OP' are defined.


@EndNode

@Node "Config" "gcc.guide/Config"
@Next "Index"
@Prev "Target Macros"
@Toc "Main"

The Configuration File
**********************

   The configuration file `xm-MACHINE.h' contains macro definitions
that describe the machine and system on which the compiler is running,
unlike the definitions in `MACHINE.h', which describe the machine for
which the compiler is producing output.  Most of the values in
`xm-MACHINE.h' are actually the same on all machines that GNU CC runs
on, so large parts of all configuration files are identical.  But there
are some macros that vary:

`USG'
     Define this macro if the host system is System V.

`VMS'
     Define this macro if the host system is VMS.

`FAILURE_EXIT_CODE'
     A C expression for the status code to be returned when the compiler
     exits after serious errors.

`SUCCESS_EXIT_CODE'
     A C expression for the status code to be returned when the compiler
     exits without serious errors.

`HOST_WORDS_BIG_ENDIAN'
     Defined if the host machine stores words of multi-word values in
     big-endian order.  (GNU CC does not depend on the host byte
     ordering within a word.)

`HOST_FLOAT_FORMAT'
     A numeric code distinguishing the floating point format for the
     host machine.  See `TARGET_FLOAT_FORMAT' in @{"Storage Layout" Link "Storage Layout"} for the
     alternatives and default.

`HOST_BITS_PER_CHAR'
     A C expression for the number of bits in `char' on the host
     machine.

`HOST_BITS_PER_SHORT'
     A C expression for the number of bits in `short' on the host
     machine.

`HOST_BITS_PER_INT'
     A C expression for the number of bits in `int' on the host machine.

`HOST_BITS_PER_LONG'
     A C expression for the number of bits in `long' on the host
     machine.

`ONLY_INT_FIELDS'
     Define this macro to indicate that the host compiler only supports
     `int' bit fields, rather than other integral types, including
     `enum', as do most C compilers.

`EXECUTABLE_SUFFIX'
     Define this macro if the host system uses a naming convention for
     executable files that involves a common suffix (such as, in some
     systems, `.exe') that must be mentioned explicitly when you run
     the program.

`OBSTACK_CHUNK_SIZE'
     A C expression for the size of ordinary obstack chunks. If you
     don't define this, a usually-reasonable default is used.

`OBSTACK_CHUNK_ALLOC'
     The function used to allocate obstack chunks. If you don't define
     this, `xmalloc' is used.

`OBSTACK_CHUNK_FREE'
     The function used to free obstack chunks. If you don't define
     this, `free' is used.

`USE_C_ALLOCA'
     Define this macro to indicate that the compiler is running with the
     `alloca' implemented in C.  This version of `alloca' can be found
     in the file `alloca.c'; to use it, you must also alter the
     `Makefile' variable `ALLOCA'.  (This is done automatically for the
     systems on which we know it is needed.)

     If you do define this macro, you should probably do it as follows:

          #ifndef __GNUC__
          #define USE_C_ALLOCA
          #else
          #define alloca __builtin_alloca
          #endif

     so that when the compiler is compiled with GNU CC it uses the more
     efficient built-in `alloca' function.

`FUNCTION_CONVERSION_BUG'
     Define this macro to indicate that the host compiler does not
     properly handle converting a function value to a
     pointer-to-function when it is used in an expression.

`HAVE_VPRINTF'
     Define this if the library function `vprintf' is available on your
     system.

`MULTIBYTE_CHARS'
     Define this macro to enable support for multibyte characters in the
     input to GNU CC.  This requires that the host system support the
     ANSI C library functions for converting multibyte characters to
     wide characters.

`HAVE_PUTENV'
     Define this if the library function `putenv' is available on your
     system.

`NO_SYS_SIGLIST'
     Define this if your system *does not* provide the variable
     `sys_siglist'.

     Some systems do provide this variable, but with a different name
     such as `_sys_siglist'.  On these systems, you can define
     `sys_siglist' as a macro which expands into the name actually
     provided.

`NO_STAB_H'
     Define this if your system does not have the include file
     `stab.h'.  If `USG' is defined, `NO_STAB_H' is assumed.

   In addition, configuration files for system V define `bcopy',
`bzero' and `bcmp' as aliases.  Some files define `alloca' as a macro
when compiled with GNU CC, in order to take advantage of the benefit of
GNU CC's built-in `alloca'.


@EndNode

@Node "Index" "gcc.guide/Index"
@Prev "Config"
@Toc "Main"

Index
*****



 @{" #pragma " Link "Misc"}                              Misc
 @{" $ " Link "Dollar Signs"}                                    Dollar Signs
 @{" ' " Link "Incompatibilities"}                                    Incompatibilities
 @{" (nil) " Link "RTL Objects"}                                RTL Objects
 @{" 3b1 installation " Link "3b1 Install"}                     3b1 Install
 @{" ?: side effect " Link "Conditionals"}                       Conditionals
 @{" #pragma, reason for not using " Link "Function Attributes"}        Function Attributes
 @{" * in template " Link "Output Statement"}                        Output Statement
 @{" ?: extensions " Link "Conditionals"}                        Conditionals
 @{" ?: extensions " Link "Lvalues"}                        Lvalues
 @{" absM2 instruction pattern " Link "Standard Names"}            Standard Names
 @{" abs and attributes " Link "Expressions"}                   Expressions
 @{" ACCUMULATE_OUTGOING_ARGS and stack frames " Link "Function Entry"} Function Entry
 @{" addM3 instruction pattern " Link "Standard Names"}            Standard Names
 @{" addr_diff_vec, length of " Link "Insn Lengths"}             Insn Lengths
 @{" addr_vec, length of " Link "Insn Lengths"}                  Insn Lengths
 @{" allocate_stack instruction pattern " Link "Standard Names"}   Standard Names
 @{" alloca and SunOs " Link "Installation"}                     Installation
 @{" alloca vs variable-length arrays " Link "Variable Length"}     Variable Length
 @{" alloca, for SunOs " Link "Sun Install"}                    Sun Install
 @{" alloca, for Unos " Link "Unos Install"}                     Unos Install
 @{" andM3 instruction pattern " Link "Standard Names"}            Standard Names
 @{" and and attributes " Link "Expressions"}                   Expressions
 @{" and, canonicalization of " Link "Insn Canonicalizations"}             Insn Canonicalizations
 @{" ARG_POINTER_REGNUM and virtual registers " Link "Regs and Memory"} Regs and Memory
 @{" ashiftrt and attributes " Link "Expressions"}              Expressions
 @{" ashift and attributes " Link "Expressions"}                Expressions
 @{" ashlM3 instruction pattern " Link "Standard Names"}           Standard Names
 @{" ashrM3 instruction pattern " Link "Standard Names"}           Standard Names
 @{" asm_operands, RTL sharing " Link "Sharing"}            Sharing
 @{" asm_operands, usage " Link "Assembler"}                  Assembler
 @{" asm expressions " Link "Extended Asm"}                      Extended Asm
 @{" bCOND instruction pattern " Link "Standard Names"}            Standard Names
 @{" bcopy, implicit usage " Link "Library Calls"}                Library Calls
 @{" BITS_BIG_ENDIAN, effect on sign_extract " Link "Bit Fields"} Bit Fields
 @{" BLKmode, and function return values " Link "Calls"}  Calls
 @{" bzero, implicit usage " Link "Library Calls"}                Library Calls
 @{" call_insn and /u " Link "Flags"}                     Flags
 @{" call_pop instruction pattern " Link "Standard Names"}         Standard Names
 @{" call_value_pop instruction pattern " Link "Standard Names"}   Standard Names
 @{" call_value instruction pattern " Link "Standard Names"}       Standard Names
 @{" call instruction pattern " Link "Standard Names"}             Standard Names
 @{" call usage " Link "Calls"}                           Calls
 @{" casesi instruction pattern " Link "Standard Names"}           Standard Names
 @{" cc0, RTL sharing " Link "Sharing"}                     Sharing
 @{" cmpM instruction pattern " Link "Standard Names"}             Standard Names
 @{" cmpstrM instruction pattern " Link "Standard Names"}          Standard Names
 @{" code_label and /i " Link "Flags"}                    Flags
 @{" compare, canonicalization of " Link "Insn Canonicalizations"}         Insn Canonicalizations
 @{" cond and attributes " Link "Expressions"}                  Expressions
 @{" const_double, RTL sharing " Link "Sharing"}            Sharing
 @{" const_int and attribute tests " Link "Expressions"}        Expressions
 @{" const_int and attributes " Link "Expressions"}             Expressions
 @{" const_int, RTL sharing " Link "Sharing"}               Sharing
 @{" const_string and attributes " Link "Expressions"}          Expressions
 @{" const applied to function " Link "Function Attributes"}            Function Attributes
 @{" define_insn example " Link "Example"}                  Example
 @{" divM3 instruction pattern " Link "Standard Names"}            Standard Names
 @{" divmodM4 instruction pattern " Link "Standard Names"}         Standard Names
 @{" div and attributes " Link "Expressions"}                   Expressions
 @{" ENCODE_SECTION_INFO and address validation " Link "Addressing Modes"} Addressing Modes
 @{" ENCODE_SECTION_INFO usage " Link "Instruction Output"}            Instruction Output
 @{" eq and attributes " Link "Expressions"}                    Expressions
 @{" extendMN instruction pattern " Link "Standard Names"}         Standard Names
 @{" extv instruction pattern " Link "Standard Names"}             Standard Names
 @{" extzv instruction pattern " Link "Standard Names"}            Standard Names
 @{" ffsM2 instruction pattern " Link "Standard Names"}            Standard Names
 @{" FIRST_PARM_OFFSET and virtual registers " Link "Regs and Memory"} Regs and Memory
 @{" fixMN2 instruction pattern " Link "Standard Names"}           Standard Names
 @{" fixunsMN2 instruction pattern " Link "Standard Names"}        Standard Names
 @{" fixuns_truncMN2 instruction pattern " Link "Standard Names"}  Standard Names
 @{" fix_truncMN2 instruction pattern " Link "Standard Names"}     Standard Names
 @{" floatMN2 instruction pattern " Link "Standard Names"}         Standard Names
 @{" floatunsMN2 instruction pattern " Link "Standard Names"}      Standard Names
 @{" float as function value type " Link "Incompatibilities"}         Incompatibilities
 @{" FRAME_GROWS_DOWNWARD and virtual registers " Link "Regs and Memory"} Regs and Memory
 @{" FRAME_POINTER_REGNUM and virtual registers " Link "Regs and Memory"} Regs and Memory
 @{" fscanf, and constant strings " Link "Incompatibilities"}         Incompatibilities
 @{" ftruncM2 instruction pattern " Link "Standard Names"}         Standard Names
 @{" FUNCTION_EPILOGUE and trampolines " Link "Trampolines"}    Trampolines
 @{" FUNCTION_PROLOGUE and trampolines " Link "Trampolines"}    Trampolines
 @{" genflags, crash on Sun 4 " Link "Installation Problems"}             Installation Problems
 @{" geu and attributes " Link "Expressions"}                   Expressions
 @{" ge and attributes " Link "Expressions"}                    Expressions
 @{" gprof " Link "Debugging Options"}                                Debugging Options
 @{" gtu and attributes " Link "Expressions"}                   Expressions
 @{" gt and attributes " Link "Expressions"}                    Expressions
 @{" HImode, in insn " Link "Insns"}                      Insns
 @{" if_then_else and attributes " Link "Expressions"}          Expressions
 @{" if_then_else usage " Link "Side Effects"}                   Side Effects
 @{" indirect_jump instruction pattern " Link "Standard Names"}    Standard Names
 @{" insn and /i " Link "Flags"}                          Flags
 @{" insn and /s " Link "Flags"}                          Flags
 @{" insn and /u " Link "Flags"}                          Flags
 @{" insv instruction pattern " Link "Standard Names"}             Standard Names
 @{" integrated, in insn " Link "Flags"}                  Flags
 @{" integrated, in reg " Link "Flags"}                   Flags
 @{" in_struct, in code_label " Link "Flags"}             Flags
 @{" in_struct, in insn " Link "Flags"}                   Flags
 @{" in_struct, in insn " Link "Flags"}                   Flags
 @{" in_struct, in label_ref " Link "Flags"}              Flags
 @{" in_struct, in mem " Link "Flags"}                    Flags
 @{" in_struct, in reg " Link "Flags"}                    Flags
 @{" iorM3 instruction pattern " Link "Standard Names"}            Standard Names
 @{" ior and attributes " Link "Expressions"}                   Expressions
 @{" ior, canonicalization of " Link "Insn Canonicalizations"}             Insn Canonicalizations
 @{" label_ref and /s " Link "Flags"}                     Flags
 @{" label_ref, RTL sharing " Link "Sharing"}               Sharing
 @{" leu and attributes " Link "Expressions"}                   Expressions
 @{" le and attributes " Link "Expressions"}                    Expressions
 @{" load_multiple instruction pattern " Link "Standard Names"}    Standard Names
 @{" long long data types " Link "Long Long"}                 Long Long
 @{" longjmp and automatic variables " Link "Interface"}      Interface
 @{" longjmp and automatic variables " Link "Dialect Options"}      Dialect Options
 @{" longjmp incompatibilities " Link "Incompatibilities"}            Incompatibilities
 @{" longjmp warnings " Link "Warning Options"}                     Warning Options
 @{" lshiftrt and attributes " Link "Expressions"}              Expressions
 @{" lshift and attributes " Link "Expressions"}                Expressions
 @{" lshlM3 instruction pattern " Link "Standard Names"}           Standard Names
 @{" lshrM3 instruction pattern " Link "Standard Names"}           Standard Names
 @{" lt and attributes " Link "Expressions"}                    Expressions
 @{" main and the exit status " Link "VMS Misc"}             VMS Misc
 @{" match_dup and attributes " Link "Insn Lengths"}             Insn Lengths
 @{" match_operand and attributes " Link "Expressions"}         Expressions
 @{" maxM3 instruction pattern " Link "Standard Names"}            Standard Names
 @{" memcpy, implicit usage " Link "Library Calls"}               Library Calls
 @{" memset, implicit usage " Link "Library Calls"}               Library Calls
 @{" mem and /s " Link "Flags"}                           Flags
 @{" mem and /u " Link "Flags"}                           Flags
 @{" mem and /v " Link "Flags"}                           Flags
 @{" mem, RTL sharing " Link "Sharing"}                     Sharing
 @{" minM3 instruction pattern " Link "Standard Names"}            Standard Names
 @{" minus and attributes " Link "Expressions"}                 Expressions
 @{" minus, canonicalization of " Link "Insn Canonicalizations"}           Insn Canonicalizations
 @{" mktemp, and constant strings " Link "Incompatibilities"}         Incompatibilities
 @{" modM3 instruction pattern " Link "Standard Names"}            Standard Names
 @{" mod and attributes " Link "Expressions"}                   Expressions
 @{" movM instruction pattern " Link "Standard Names"}             Standard Names
 @{" movstrM instruction pattern " Link "Standard Names"}          Standard Names
 @{" movstrictM instruction pattern " Link "Standard Names"}       Standard Names
 @{" mulM3 instruction pattern " Link "Standard Names"}            Standard Names
 @{" mulhisi3 instruction pattern " Link "Standard Names"}         Standard Names
 @{" mulqihi3 instruction pattern " Link "Standard Names"}         Standard Names
 @{" mulsidi3 instruction pattern " Link "Standard Names"}         Standard Names
 @{" mult and attributes " Link "Expressions"}                  Expressions
 @{" mult, canonicalization of " Link "Insn Canonicalizations"}            Insn Canonicalizations
 @{" MUST_PASS_IN_STACK, and FUNCTION_ARG " Link "Register Arguments"} Register Arguments
 @{" negM2 instruction pattern " Link "Standard Names"}            Standard Names
 @{" neg and attributes " Link "Expressions"}                   Expressions
 @{" neg, canonicalization of " Link "Insn Canonicalizations"}             Insn Canonicalizations
 @{" ne and attributes " Link "Expressions"}                    Expressions
 @{" nop instruction pattern " Link "Standard Names"}              Standard Names
 @{" not and attributes " Link "Expressions"}                   Expressions
 @{" not, canonicalization of " Link "Insn Canonicalizations"}             Insn Canonicalizations
 @{" one_cmplM2 instruction pattern " Link "Standard Names"}       Standard Names
 @{" pc and attributes " Link "Insn Lengths"}                    Insn Lengths
 @{" pc, RTL sharing " Link "Sharing"}                      Sharing
 @{" plus and attributes " Link "Expressions"}                  Expressions
 @{" plus, canonicalization of " Link "Insn Canonicalizations"}            Insn Canonicalizations
 @{" prof " Link "Debugging Options"}                                 Debugging Options
 @{" PUSH_ROUNDING, interaction with STACK_BOUNDARY " Link "Storage Layout"} Storage Layout
 @{" QImode, in insn " Link "Insns"}                      Insns
 @{" qsort, and global register variables " Link "Global Reg Vars"} Global Reg Vars
 @{" REG_PARM_STACK_SPACE, and FUNCTION_ARG " Link "Register Arguments"} Register Arguments
 @{" reg and /i " Link "Flags"}                           Flags
 @{" reg and /s " Link "Flags"}                           Flags
 @{" reg and /u " Link "Flags"}                           Flags
 @{" reg and /v " Link "Flags"}                           Flags
 @{" reg, RTL sharing " Link "Sharing"}                     Sharing
 @{" reload_in instruction pattern " Link "Standard Names"}        Standard Names
 @{" reload_out instruction pattern " Link "Standard Names"}       Standard Names
 @{" restore_stack_block instruction pattern " Link "Standard Names"} Standard Names
 @{" restore_stack_function instruction pattern " Link "Standard Names"} Standard Names
 @{" restore_stack_nonlocal instruction pattern " Link "Standard Names"} Standard Names
 @{" return instruction pattern " Link "Standard Names"}           Standard Names
 @{" rotlM3 instruction pattern " Link "Standard Names"}           Standard Names
 @{" rotrM3 instruction pattern " Link "Standard Names"}           Standard Names
 @{" sCOND instruction pattern " Link "Standard Names"}            Standard Names
 @{" save_stack_block instruction pattern " Link "Standard Names"} Standard Names
 @{" save_stack_function instruction pattern " Link "Standard Names"} Standard Names
 @{" save_stack_nonlocal instruction pattern " Link "Standard Names"} Standard Names
 @{" scanf, and constant strings " Link "Incompatibilities"}          Incompatibilities
 @{" scratch, RTL sharing " Link "Sharing"}                 Sharing
 @{" setjmp incompatibilities " Link "Incompatibilities"}             Incompatibilities
 @{" sign_extract, canonicalization of " Link "Insn Canonicalizations"}    Insn Canonicalizations
 @{" sqrtM2 instruction pattern " Link "Standard Names"}           Standard Names
 @{" sscanf, and constant strings " Link "Incompatibilities"}         Incompatibilities
 @{" STACK_DYNAMIC_OFFSET and virtual registers " Link "Regs and Memory"} Regs and Memory
 @{" STACK_POINTER_OFFSET and virtual registers " Link "Regs and Memory"} Regs and Memory
 @{" STACK_POINTER_REGNUM and virtual registers " Link "Regs and Memory"} Regs and Memory
 @{" STARTING_FRAME_OFFSET and virtual registers " Link "Regs and Memory"} Regs and Memory
 @{" subM3 instruction pattern " Link "Standard Names"}            Standard Names
 @{" subreg, in strict_low_part " Link "RTL Declarations"}           RTL Declarations
 @{" subreg, special reload handling " Link "Regs and Memory"}      Regs and Memory
 @{" SYMBOL_REF_FLAG, in ENCODE_SECTION_INFO " Link "Sections"} Sections
 @{" symbol_ref and /u " Link "Flags"}                    Flags
 @{" symbol_ref and /v " Link "Flags"}                    Flags
 @{" symbol_ref, RTL sharing " Link "Sharing"}              Sharing
 @{" tablejump instruction pattern " Link "Standard Names"}        Standard Names
 @{" tcov " Link "Debugging Options"}                                 Debugging Options
 @{" truncMN instruction pattern " Link "Standard Names"}          Standard Names
 @{" tstM instruction pattern " Link "Standard Names"}             Standard Names
 @{" udivM3 instruction pattern " Link "Standard Names"}           Standard Names
 @{" udivmodM4 instruction pattern " Link "Standard Names"}        Standard Names
 @{" umaxM3 instruction pattern " Link "Standard Names"}           Standard Names
 @{" uminM3 instruction pattern " Link "Standard Names"}           Standard Names
 @{" umodM3 instruction pattern " Link "Standard Names"}           Standard Names
 @{" umulhisi3 instruction pattern " Link "Standard Names"}        Standard Names
 @{" umulqihi3 instruction pattern " Link "Standard Names"}        Standard Names
 @{" umulsidi3 instruction pattern " Link "Standard Names"}        Standard Names
 @{" unchanging, in call_insn " Link "Flags"}             Flags
 @{" unchanging, in insn " Link "Flags"}                  Flags
 @{" unchanging, in reg and mem " Link "Flags"}           Flags
 @{" unchanging, in symbol_ref " Link "Flags"}            Flags
 @{" used, in symbol_ref " Link "Flags"}                  Flags
 @{" volatile applied to function " Link "Function Attributes"}         Function Attributes
 @{" volatil, in insn " Link "Flags"}                     Flags
 @{" volatil, in mem " Link "Flags"}                      Flags
 @{" volatil, in reg " Link "Flags"}                      Flags
 @{" volatil, in symbol_ref " Link "Flags"}               Flags
 @{" WORDS_BIG_ENDIAN, effect on subreg " Link "Regs and Memory"}   Regs and Memory
 @{" xorM3 instruction pattern " Link "Standard Names"}            Standard Names
 @{" xor, canonicalization of " Link "Insn Canonicalizations"}             Insn Canonicalizations
 @{" zero_extendMN instruction pattern " Link "Standard Names"}    Standard Names
 @{" zero_extract, canonicalization of " Link "Insn Canonicalizations"}    Insn Canonicalizations
 @{" libgcc.a " Link "Library Calls"}                             Library Calls
 @{" stdarg.h and register arguments " Link "Register Arguments"}      Register Arguments
 @{" stdarg.h and RT PC " Link "RT Options"}                   RT Options
 @{" tm.h macros " Link "Target Macros"}                          Target Macros
 @{" varargs.h and RT PC " Link "RT Options"}                  RT Options
 @{" VAXCRTL " Link "VMS Misc"}                              VMS Misc
 @{" xm-MACHINE.h " Link "Config"}                         Config
 @{" ! in constraint " Link "Multi-Alternative"}                      Multi-Alternative
 @{" # in constraint " Link "Modifiers"}                      Modifiers
 @{" % in constraint " Link "Modifiers"}                      Modifiers
 @{" % in template " Link "Output Template"}                        Output Template
 @{" & in constraint " Link "Modifiers"}                      Modifiers
 @{" * in constraint " Link "Modifiers"}                      Modifiers
 @{" + in constraint " Link "Modifiers"}                      Modifiers
 @{" /i in RTL dump " Link "Flags"}                       Flags
 @{" /s in RTL dump " Link "Flags"}                       Flags
 @{" /s in RTL dump " Link "Flags"}                       Flags
 @{" /u in RTL dump " Link "Flags"}                       Flags
 @{" /v in RTL dump " Link "Flags"}                       Flags
 @{" 0 in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" < in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" = in constraint " Link "Modifiers"}                      Modifiers
 @{" > in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" ? in constraint " Link "Multi-Alternative"}                      Multi-Alternative
 @{" d in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" E in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" F in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" g in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" G in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" H in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" I in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" i in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" m in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" n in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" o in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" p in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" Q, in constraint " Link "Simple Constraints"}                     Simple Constraints
 @{" r in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" store_multiple instruction pattern " Link "Standard Names"}   Standard Names
 @{" s in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" V in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" X in constraint " Link "Simple Constraints"}                      Simple Constraints
 @{" _ in variables in macros " Link "Naming Types"}             Naming Types
 @{" abort " Link "Portability"}                                Portability
 @{" abs " Link "Arithmetic"}                                  Arithmetic
 @{" absolute value " Link "Arithmetic"}                       Arithmetic
 @{" access to operands " Link "Accessors"}                   Accessors
 @{" accessors " Link "Accessors"}                            Accessors
 @{" ACCUMULATE_OUTGOING_ARGS " Link "Stack Arguments"}             Stack Arguments
 @{" ADDITIONAL_REGISTER_NAMES " Link "Instruction Output"}            Instruction Output
 @{" address " Link "RTL Template"}                              RTL Template
 @{" address constraints " Link "Simple Constraints"}                  Simple Constraints
 @{" address of a label " Link "Labels as Values"}                   Labels as Values
 @{" addressing modes " Link "Addressing Modes"}                     Addressing Modes
 @{" ADDRESS_COST " Link "Costs"}                         Costs
 @{" address_operand " Link "Simple Constraints"}                      Simple Constraints
 @{" addr_diff_vec " Link "Side Effects"}                        Side Effects
 @{" addr_vec " Link "Side Effects"}                             Side Effects
 @{" ADJUST_INSN_LENGTH " Link "Insn Lengths"}                   Insn Lengths
 @{" aggregates as return values " Link "Aggregate Return"}          Aggregate Return
 @{" alignment " Link "Alignment"}                            Alignment
 @{" Alliant " Link "Interoperation"}                              Interoperation
 @{" ALLOCATE_TRAMPOLINE " Link "Trampolines"}                  Trampolines
 @{" ALL_REGS " Link "Register Classes"}                             Register Classes
 @{" alternate keywords " Link "Alternate Keywords"}                   Alternate Keywords
 @{" AMD29K options " Link "AMD29K Options"}                       AMD29K Options
 @{" analysis, data flow " Link "Passes"}                  Passes
 @{" and " Link "Arithmetic"}                                  Arithmetic
 @{" ANSI support " Link "Dialect Options"}                         Dialect Options
 @{" apostrophes " Link "Incompatibilities"}                          Incompatibilities
 @{" ARGS_GROW_DOWNWARD " Link "Frame Layout"}                   Frame Layout
 @{" argument passing " Link "Interface"}                     Interface
 @{" arguments in frame (88k) " Link "M88K Options"}             M88K Options
 @{" arguments in registers " Link "Register Arguments"}               Register Arguments
 @{" arguments on stack " Link "Stack Arguments"}                   Stack Arguments
 @{" ARG_POINTER_REGNUM " Link "Frame Registers"}                   Frame Registers
 @{" arg_pointer_rtx " Link "Frame Registers"}                      Frame Registers
 @{" arithmetic libraries " Link "Interface"}                 Interface
 @{" arithmetic shift " Link "Arithmetic"}                     Arithmetic
 @{" arithmetic simplifications " Link "Passes"}           Passes
 @{" arithmetic, in RTL " Link "Arithmetic"}                   Arithmetic
 @{" arrays of length zero " Link "Zero Length"}                Zero Length
 @{" arrays of variable length " Link "Variable Length"}            Variable Length
 @{" arrays, non-lvalue " Link "Subscripting"}                   Subscripting
 @{" ashift " Link "Arithmetic"}                               Arithmetic
 @{" ashiftrt " Link "Arithmetic"}                             Arithmetic
 @{" ASM_APP_OFF " Link "File Framework"}                          File Framework
 @{" ASM_APP_ON " Link "File Framework"}                           File Framework
 @{" ASM_BYTE_OP " Link "Data Output"}                          Data Output
 @{" ASM_CLOSE_PAREN " Link "Data Output"}                      Data Output
 @{" ASM_COMMENT_START " Link "File Framework"}                    File Framework
 @{" ASM_DECLARE_FUNCTION_NAME " Link "Label Output"}            Label Output
 @{" ASM_DECLARE_FUNCTION_SIZE " Link "Label Output"}            Label Output
 @{" ASM_DECLARE_OBJECT_NAME " Link "Label Output"}              Label Output
 @{" ASM_FILE_END " Link "File Framework"}                         File Framework
 @{" ASM_FILE_START " Link "File Framework"}                       File Framework
 @{" ASM_FINAL_SPEC " Link "Driver"}                       Driver
 @{" ASM_FORMAT_PRIVATE_NAME " Link "Label Output"}              Label Output
 @{" asm_fprintf " Link "Instruction Output"}                          Instruction Output
 @{" ASM_GENERATE_INTERNAL_LABEL " Link "Label Output"}          Label Output
 @{" ASM_GLOBALIZE_LABEL " Link "Label Output"}                  Label Output
 @{" ASM_IDENTIFY_GCC " Link "File Framework"}                     File Framework
 @{" asm_input " Link "Side Effects"}                            Side Effects
 @{" asm_noperands " Link "Insns"}                        Insns
 @{" ASM_NO_SKIP_IN_TEXT " Link "Alignment Output"}                  Alignment Output
 @{" ASM_OPEN_PAREN " Link "Data Output"}                       Data Output
 @{" ASM_OUTPUT_ADDR_DIFF_ELT " Link "Dispatch Tables"}             Dispatch Tables
 @{" ASM_OUTPUT_ADDR_VEC_ELT " Link "Dispatch Tables"}              Dispatch Tables
 @{" ASM_OUTPUT_ALIGN " Link "Alignment Output"}                     Alignment Output
 @{" ASM_OUTPUT_ALIGNED_COMMON " Link "Uninitialized Data"}            Uninitialized Data
 @{" ASM_OUTPUT_ALIGNED_LOCAL " Link "Uninitialized Data"}             Uninitialized Data
 @{" ASM_OUTPUT_ALIGN_CODE " Link "Alignment Output"}                Alignment Output
 @{" ASM_OUTPUT_ASCII " Link "Data Output"}                     Data Output
 @{" ASM_OUTPUT_BYTE " Link "Data Output"}                      Data Output
 @{" ASM_OUTPUT_CASE_END " Link "Dispatch Tables"}                  Dispatch Tables
 @{" ASM_OUTPUT_CASE_LABEL " Link "Dispatch Tables"}                Dispatch Tables
 @{" ASM_OUTPUT_CHAR " Link "Data Output"}                      Data Output
 @{" ASM_OUTPUT_COMMON " Link "Uninitialized Data"}                    Uninitialized Data
 @{" ASM_OUTPUT_CONSTRUCTOR " Link "Constructor Output"}               Constructor Output
 @{" ASM_OUTPUT_DESTRUCTOR " Link "Constructor Output"}                Constructor Output
 @{" ASM_OUTPUT_DOUBLE " Link "Data Output"}                    Data Output
 @{" ASM_OUTPUT_DOUBLE_INT " Link "Data Output"}                Data Output
 @{" ASM_OUTPUT_EXTERNAL " Link "Label Output"}                  Label Output
 @{" ASM_OUTPUT_EXTERNAL_LIBCALL " Link "Label Output"}          Label Output
 @{" ASM_OUTPUT_FLOAT " Link "Data Output"}                     Data Output
 @{" ASM_OUTPUT_IDENT " Link "File Framework"}                     File Framework
 @{" ASM_OUTPUT_INT " Link "Data Output"}                       Data Output
 @{" ASM_OUTPUT_INTERNAL_LABEL " Link "Label Output"}            Label Output
 @{" ASM_OUTPUT_LABEL " Link "Label Output"}                     Label Output
 @{" ASM_OUTPUT_LABELREF " Link "Label Output"}                  Label Output
 @{" ASM_OUTPUT_LABELREF_AS_INT " Link "Label Output"}           Label Output
 @{" ASM_OUTPUT_LOCAL " Link "Uninitialized Data"}                     Uninitialized Data
 @{" ASM_OUTPUT_LONG_DOUBLE " Link "Data Output"}               Data Output
 @{" ASM_OUTPUT_LOOP_ALIGN " Link "Alignment Output"}                Alignment Output
 @{" ASM_OUTPUT_OPCODE " Link "Instruction Output"}                    Instruction Output
 @{" ASM_OUTPUT_POOL_PROLOGUE " Link "Data Output"}             Data Output
 @{" ASM_OUTPUT_QUADRUPLE_INT " Link "Data Output"}             Data Output
 @{" ASM_OUTPUT_REG_POP " Link "Instruction Output"}                   Instruction Output
 @{" ASM_OUTPUT_REG_PUSH " Link "Instruction Output"}                  Instruction Output
 @{" ASM_OUTPUT_SHARED_COMMON " Link "Uninitialized Data"}             Uninitialized Data
 @{" ASM_OUTPUT_SHARED_LOCAL " Link "Uninitialized Data"}              Uninitialized Data
 @{" ASM_OUTPUT_SHORT " Link "Data Output"}                     Data Output
 @{" ASM_OUTPUT_SKIP " Link "Alignment Output"}                      Alignment Output
 @{" ASM_OUTPUT_SOURCE_FILENAME " Link "File Framework"}           File Framework
 @{" ASM_OUTPUT_SOURCE_LINE " Link "File Framework"}               File Framework
 @{" ASM_OUTPUT_SPECIAL_POOL_ENTRY " Link "Data Output"}        Data Output
 @{" ASM_SPEC " Link "Driver"}                             Driver
 @{" ASM_STABD_OP " Link "DBX Options"}                         DBX Options
 @{" ASM_STABN_OP " Link "DBX Options"}                         DBX Options
 @{" ASM_STABS_OP " Link "DBX Options"}                         DBX Options
 @{" assembler format " Link "File Framework"}                     File Framework
 @{" assembler instructions " Link "Extended Asm"}               Extended Asm
 @{" assembler instructions in RTL " Link "Assembler"}        Assembler
 @{" assembler names for identifiers " Link "Asm Labels"}      Asm Labels
 @{" assembler syntax, 88k " Link "M88K Options"}                M88K Options
 @{" assemble_name " Link "Label Output"}                        Label Output
 @{" assembly code, invalid " Link "Bug Criteria"}               Bug Criteria
 @{" assigning attribute values to insns " Link "Tagging Insns"}  Tagging Insns
 @{" asterisk in template " Link "Output Statement"}                 Output Statement
 @{" atof " Link "Cross-compilation"}                                 Cross-compilation
 @{" attr " Link "Tagging Insns"}                                 Tagging Insns
 @{" attribute expressions " Link "Expressions"}                Expressions
 @{" attribute of variables " Link "Variable Attributes"}               Variable Attributes
 @{" attribute specifications " Link "Attr Example"}             Attr Example
 @{" attribute specifications example " Link "Attr Example"}     Attr Example
 @{" attributes, defining " Link "Defining Attributes"}                 Defining Attributes
 @{" autoincrement addressing, availability " Link "Portability"} Portability
 @{" autoincrement/decrement addressing " Link "Simple Constraints"}   Simple Constraints
 @{" autoincrement/decrement analysis " Link "Passes"}     Passes
 @{" backslash " Link "Output Template"}                            Output Template
 @{" backtrace for bug reports " Link "Bug Reporting"}            Bug Reporting
 @{" barrier " Link "Insns"}                              Insns
 @{" BASE_REG_CLASS " Link "Register Classes"}                       Register Classes
 @{" basic blocks " Link "Passes"}                         Passes
 @{" bcmp " Link "Config"}                                 Config
 @{" BIGGEST_ALIGNMENT " Link "Storage Layout"}                    Storage Layout
 @{" BIGGEST_FIELD_ALIGNMENT " Link "Storage Layout"}              Storage Layout
 @{" Bison parser generator " Link "Installation"}               Installation
 @{" bit fields " Link "Bit Fields"}                           Bit Fields
 @{" bit shift overflow (88k) " Link "M88K Options"}             M88K Options
 @{" BITFIELD_NBYTES_LIMITED " Link "Storage Layout"}              Storage Layout
 @{" BITS_BIG_ENDIAN " Link "Storage Layout"}                      Storage Layout
 @{" BITS_PER_UNIT " Link "Storage Layout"}                        Storage Layout
 @{" BITS_PER_WORD " Link "Storage Layout"}                        Storage Layout
 @{" bitwise complement " Link "Arithmetic"}                   Arithmetic
 @{" bitwise exclusive-or " Link "Arithmetic"}                 Arithmetic
 @{" bitwise inclusive-or " Link "Arithmetic"}                 Arithmetic
 @{" bitwise logical-and " Link "Arithmetic"}                  Arithmetic
 @{" BLKmode " Link "Machine Modes"}                              Machine Modes
 @{" BLOCK_PROFILER " Link "Profiling"}                       Profiling
 @{" BRANCH_COST " Link "Costs"}                          Costs
 @{" break_out_memory_refs " Link "Addressing Modes"}                Addressing Modes
 @{" bug criteria " Link "Bug Criteria"}                         Bug Criteria
 @{" bug report mailing lists " Link "Bug Lists"}             Bug Lists
 @{" bugs " Link "Bugs"}                                 Bugs
 @{" bugs, known " Link "Trouble"}                          Trouble
 @{" BYTES_BIG_ENDIAN " Link "Storage Layout"}                     Storage Layout
 @{" BYTE_LOADS_ZERO_EXTEND " Link "Misc"}               Misc
 @{" byte_mode " Link "Machine Modes"}                            Machine Modes
 @{" bzero " Link "Config"}                                Config
 @{" C language extensions " Link "Extensions"}                Extensions
 @{" C language, traditional " Link "Dialect Options"}              Dialect Options
 @{" C statements for assembler output " Link "Output Statement"}    Output Statement
 @{" call " Link "Side Effects"}                                 Side Effects
 @{" call-clobbered register " Link "Register Basics"}              Register Basics
 @{" call-saved register " Link "Register Basics"}                  Register Basics
 @{" call-used register " Link "Register Basics"}                   Register Basics
 @{" CALLER_SAVE_PROFITABLE " Link "Caller Saves"}               Caller Saves
 @{" calling conventions " Link "Stack and Calling"}                  Stack and Calling
 @{" calling functions in RTL " Link "Calls"}             Calls
 @{" call_insn " Link "Insns"}                            Insns
 @{" CALL_USED_REGISTERS " Link "Register Basics"}                  Register Basics
 @{" call_used_regs " Link "Register Basics"}                       Register Basics
 @{" canonicalization of instructions " Link "Insn Canonicalizations"}     Insn Canonicalizations
 @{" CAN_ELIMINATE " Link "Elimination"}                        Elimination
 @{" case labels in initializers " Link "Labeled Elements"}          Labeled Elements
 @{" case ranges " Link "Case Ranges"}                          Case Ranges
 @{" case sensitivity and VMS " Link "VMS Misc"}             VMS Misc
 @{" CASE_DROPS_THROUGH " Link "Misc"}                   Misc
 @{" CASE_VECTOR_MODE " Link "Misc"}                     Misc
 @{" CASE_VECTOR_PC_RELATIVE " Link "Misc"}              Misc
 @{" cast to a union " Link "Cast to Union"}                      Cast to Union
 @{" casts as lvalues " Link "Lvalues"}                     Lvalues
 @{" cc0 " Link "Regs and Memory"}                                  Regs and Memory
 @{" cc0_rtx " Link "Regs and Memory"}                              Regs and Memory
 @{" CC1PLUS_SPEC " Link "Driver"}                         Driver
 @{" CC1_SPEC " Link "Driver"}                             Driver
 @{" CCmode " Link "Machine Modes"}                               Machine Modes
 @{" cc_status " Link "Condition Code"}                            Condition Code
 @{" CC_STATUS_MDEP " Link "Condition Code"}                       Condition Code
 @{" CC_STATUS_MDEP_INIT " Link "Condition Code"}                  Condition Code
 @{" change_address " Link "Standard Names"}                       Standard Names
 @{" CHAR_TYPE_SIZE " Link "Type Layout"}                       Type Layout
 @{" CHECK_FLOAT_VALUE " Link "Storage Layout"}                    Storage Layout
 @{" class definitions, register " Link "Register Classes"}          Register Classes
 @{" class preference constraints " Link "Class Preferences"}         Class Preferences
 @{" classes of RTX codes " Link "Accessors"}                 Accessors
 @{" CLASS_MAX_NREGS " Link "Register Classes"}                      Register Classes
 @{" clobber " Link "Side Effects"}                              Side Effects
 @{" code generation conventions " Link "Code Gen Options"}          Code Gen Options
 @{" code generation RTL sequences " Link "Expander Definitions"}        Expander Definitions
 @{" code motion " Link "Passes"}                          Passes
 @{" codes, RTL expression " Link "RTL Objects"}                RTL Objects
 @{" code_label " Link "Insns"}                           Insns
 @{" CODE_LABEL_NUMBER " Link "Insns"}                    Insns
 @{" combiner pass " Link "Regs and Memory"}                        Regs and Memory
 @{" command options " Link "Invoking GCC"}                      Invoking GCC
 @{" common subexpression elimination " Link "Passes"}     Passes
 @{" compare " Link "Arithmetic"}                              Arithmetic
 @{" compilation in a separate directory " Link "Other Dir"}  Other Dir
 @{" compiler bugs, reporting " Link "Bug Reporting"}             Bug Reporting
 @{" compiler passes and files " Link "Passes"}            Passes
 @{" compiler version, specifying " Link "Target Options"}         Target Options
 @{" COMPILER_PATH " Link "Environment Variables"}                        Environment Variables
 @{" complement, bitwise " Link "Arithmetic"}                  Arithmetic
 @{" compound expressions as lvalues " Link "Lvalues"}      Lvalues
 @{" computed gotos " Link "Labels as Values"}                       Labels as Values
 @{" computing the length of an insn " Link "Insn Lengths"}      Insn Lengths
 @{" cond " Link "Comparisons"}                                 Comparisons
 @{" condition code register " Link "Regs and Memory"}              Regs and Memory
 @{" condition code status " Link "Condition Code"}                Condition Code
 @{" condition codes " Link "Comparisons"}                      Comparisons
 @{" conditional expressions as lvalues " Link "Lvalues"}   Lvalues
 @{" conditional expressions, extensions " Link "Conditionals"}  Conditionals
 @{" CONDITIONAL_REGISTER_USAGE " Link "Register Basics"}           Register Basics
 @{" conditions, in patterns " Link "Patterns"}              Patterns
 @{" configuration file " Link "Config"}                   Config
 @{" conflicting types " Link "Disappointments"}                    Disappointments
 @{" CONST0_RTX " Link "Constants"}                           Constants
 @{" const0_rtx " Link "Constants"}                           Constants
 @{" const1_rtx " Link "Constants"}                           Constants
 @{" CONST1_RTX " Link "Constants"}                           Constants
 @{" const2_rtx " Link "Constants"}                           Constants
 @{" CONST2_RTX " Link "Constants"}                           Constants
 @{" constant attributes " Link "Constant Attributes"}                  Constant Attributes
 @{" constant folding " Link "Passes"}                     Passes
 @{" constant folding and floating point " Link "Cross-compilation"}  Cross-compilation
 @{" constant propagation " Link "Passes"}                 Passes
 @{" constants in constraints " Link "Simple Constraints"}             Simple Constraints
 @{" CONSTANT_ADDRESS_P " Link "Addressing Modes"}                   Addressing Modes
 @{" CONSTANT_ALIGNMENT " Link "Storage Layout"}                   Storage Layout
 @{" CONSTANT_P " Link "Addressing Modes"}                           Addressing Modes
 @{" CONSTANT_POOL_ADDRESS_P " Link "Flags"}              Flags
 @{" constm1_rtx " Link "Constants"}                          Constants
 @{" constraint modifier characters " Link "Modifiers"}       Modifiers
 @{" constraint, matching " Link "Simple Constraints"}                 Simple Constraints
 @{" constraints " Link "Constraints"}                          Constraints
 @{" constructor expressions " Link "Constructors"}              Constructors
 @{" constructors, output of " Link "Constructor Output"}              Constructor Output
 @{" CONST_CALL_P " Link "Flags"}                         Flags
 @{" CONST_COSTS " Link "Costs"}                          Costs
 @{" const_double " Link "Constants"}                         Constants
 @{" CONST_DOUBLE_CHAIN " Link "Constants"}                   Constants
 @{" CONST_DOUBLE_LOW " Link "Constants"}                     Constants
 @{" CONST_DOUBLE_MEM " Link "Constants"}                     Constants
 @{" CONST_DOUBLE_OK_FOR_LETTER_P " Link "Register Classes"}         Register Classes
 @{" const_int " Link "Constants"}                            Constants
 @{" CONST_OK_FOR_LETTER_P " Link "Register Classes"}                Register Classes
 @{" const_string " Link "Constants"}                         Constants
 @{" const_true_rtx " Link "Constants"}                       Constants
 @{" contributors " Link "Contributors"}                         Contributors
 @{" controlling register usage " Link "Register Basics"}           Register Basics
 @{" controlling the compilation driver " Link "Driver"}   Driver
 @{" conventions, run-time " Link "Interface"}                Interface
 @{" conversions " Link "Conversions"}                          Conversions
 @{" Convex options " Link "Convex Options"}                       Convex Options
 @{" copy_rtx_if_shared " Link "Sharing"}                   Sharing
 @{" core dump " Link "Bug Criteria"}                            Bug Criteria
 @{" costs of instructions " Link "Costs"}                Costs
 @{" COSTS_N_INSNS " Link "Costs"}                        Costs
 @{" CPLUS_INCLUDE_PATH " Link "Environment Variables"}                   Environment Variables
 @{" CPP_PREDEFINES " Link "Run-time Target"}                       Run-time Target
 @{" CPP_SPEC " Link "Driver"}                             Driver
 @{" cross compilation and floating point " Link "Cross-compilation"} Cross-compilation
 @{" cross compiling " Link "Target Options"}                      Target Options
 @{" cross-compiler, installation " Link "Cross-Compiler"}         Cross-Compiler
 @{" cross-jumping " Link "Passes"}                        Passes
 @{" CUMULATIVE_ARGS " Link "Register Arguments"}                      Register Arguments
 @{" current_function_epilogue_delay_list " Link "Function Entry"} Function Entry
 @{" current_function_outgoing_args_size " Link "Stack Arguments"}  Stack Arguments
 @{" current_function_pops_args " Link "Function Entry"}           Function Entry
 @{" current_function_pretend_args_size " Link "Function Entry"}   Function Entry
 @{" C_INCLUDE_PATH " Link "Environment Variables"}                       Environment Variables
 @{" data flow analysis " Link "Passes"}                   Passes
 @{" DATA_ALIGNMENT " Link "Storage Layout"}                       Storage Layout
 @{" data_section " Link "Sections"}                         Sections
 @{" DATA_SECTION_ASM_OP " Link "Sections"}                  Sections
 @{" DBR_OUTPUT_SEQEND " Link "Instruction Output"}                    Instruction Output
 @{" dbr_sequence_length " Link "Instruction Output"}                  Instruction Output
 @{" DBX " Link "Interoperation"}                                  Interoperation
 @{" DBX_CONTIN_CHAR " Link "DBX Options"}                      DBX Options
 @{" DBX_CONTIN_LENGTH " Link "DBX Options"}                    DBX Options
 @{" DBX_DEBUGGING_INFO " Link "DBX Options"}                   DBX Options
 @{" DBX_FUNCTION_FIRST " Link "DBX Options"}                   DBX Options
 @{" DBX_LBRAC_FIRST " Link "DBX Options"}                      DBX Options
 @{" DBX_MEMPARM_STABS_LETTER " Link "DBX Options"}             DBX Options
 @{" DBX_NO_XREFS " Link "DBX Options"}                         DBX Options
 @{" DBX_OUTPUT_ENUM " Link "DBX Hooks"}                      DBX Hooks
 @{" DBX_OUTPUT_FUNCTION_END " Link "DBX Hooks"}              DBX Hooks
 @{" DBX_OUTPUT_LBRAC " Link "DBX Hooks"}                     DBX Hooks
 @{" DBX_OUTPUT_MAIN_SOURCE_DIRECTORY " Link "File Names and DBX"}     File Names and DBX
 @{" DBX_OUTPUT_MAIN_SOURCE_FILENAME " Link "File Names and DBX"}      File Names and DBX
 @{" DBX_OUTPUT_MAIN_SOURCE_FILE_END " Link "File Names and DBX"}      File Names and DBX
 @{" DBX_OUTPUT_RBRAC " Link "DBX Hooks"}                     DBX Hooks
 @{" DBX_OUTPUT_SOURCE_FILENAME " Link "File Names and DBX"}           File Names and DBX
 @{" DBX_OUTPUT_STANDARD_TYPES " Link "DBX Hooks"}            DBX Hooks
 @{" DBX_REGISTER_NUMBER " Link "All Debuggers"}                  All Debuggers
 @{" DBX_REGPARM_STABS_CODE " Link "DBX Options"}               DBX Options
 @{" DBX_REGPARM_STABS_LETTER " Link "DBX Options"}             DBX Options
 @{" DBX_STATIC_CONST_VAR_CODE " Link "DBX Options"}            DBX Options
 @{" DBX_STATIC_STAB_DATA_SECTION " Link "DBX Options"}         DBX Options
 @{" DBX_TYPE_DECL_STABS_CODE " Link "DBX Options"}             DBX Options
 @{" DBX_WORKING_DIRECTORY " Link "File Names and DBX"}                File Names and DBX
 @{" DCmode " Link "Machine Modes"}                               Machine Modes
 @{" De Morgan's law " Link "Insn Canonicalizations"}                      Insn Canonicalizations
 @{" dead code " Link "Passes"}                            Passes
 @{" dead_or_set_p " Link "Peephole Definitions"}                        Peephole Definitions
 @{" deallocating variable length arrays " Link "Variable Length"}  Variable Length
 @{" death notes " Link "Obsolete Register Macros"}                          Obsolete Register Macros
 @{" DEBUGGER_ARG_OFFSET " Link "All Debuggers"}                  All Debuggers
 @{" DEBUGGER_AUTO_OFFSET " Link "All Debuggers"}                 All Debuggers
 @{" debugging information generation " Link "Passes"}     Passes
 @{" debugging information options " Link "Debugging Options"}        Debugging Options
 @{" debugging, 88k OCS " Link "M88K Options"}                   M88K Options
 @{" debug_rtx " Link "Bug Reporting"}                            Bug Reporting
 @{" DEBUG_SYMS_TEXT " Link "DBX Options"}                      DBX Options
 @{" declaration scope " Link "Incompatibilities"}                    Incompatibilities
 @{" declarations inside expressions " Link "Statement Exprs"}      Statement Exprs
 @{" declarations, RTL " Link "RTL Declarations"}                    RTL Declarations
 @{" declaring attributes of functions " Link "Function Attributes"}    Function Attributes
 @{" DEFAULT_CALLER_SAVES " Link "Caller Saves"}                 Caller Saves
 @{" DEFAULT_GDB_EXTENSIONS " Link "DBX Options"}               DBX Options
 @{" DEFAULT_MAIN_RETURN " Link "Misc"}                  Misc
 @{" DEFAULT_SHORT_ENUMS " Link "Type Layout"}                  Type Layout
 @{" DEFAULT_SIGNED_CHAR " Link "Type Layout"}                  Type Layout
 @{" define_asm_attributes " Link "Tagging Insns"}                Tagging Insns
 @{" define_attr " Link "Defining Attributes"}                          Defining Attributes
 @{" define_delay " Link "Delay Slots"}                         Delay Slots
 @{" define_expand " Link "Expander Definitions"}                        Expander Definitions
 @{" define_function_unit " Link "Function Units"}                 Function Units
 @{" define_insn " Link "Patterns"}                          Patterns
 @{" define_peephole " Link "Expander Definitions"}                      Expander Definitions
 @{" define_split " Link "Insn Splitting"}                         Insn Splitting
 @{" defining attributes and their values " Link "Defining Attributes"} Defining Attributes
 @{" defining jump instruction patterns " Link "Jump Patterns"}   Jump Patterns
 @{" defining peephole optimizers " Link "Peephole Definitions"}         Peephole Definitions
 @{" defining RTL sequences for code generation " Link "Expander Definitions"} Expander Definitions
 @{" delay slots, defining " Link "Delay Slots"}                Delay Slots
 @{" delayed branch scheduling " Link "Passes"}            Passes
 @{" DELAY_SLOTS_FOR_EPILOGUE " Link "Function Entry"}             Function Entry
 @{" dependencies for make as output " Link "Environment Variables"}      Environment Variables
 @{" dependencies, make " Link "Preprocessor Options"}                   Preprocessor Options
 @{" DEPENDENCIES_OUTPUT " Link "Environment Variables"}                  Environment Variables
 @{" Dependent Patterns " Link "Dependent Patterns"}                   Dependent Patterns
 @{" destructors, output of " Link "Constructor Output"}               Constructor Output
 @{" DFmode " Link "Machine Modes"}                               Machine Modes
 @{" dialect options " Link "Dialect Options"}                      Dialect Options
 @{" digits in constraint " Link "Simple Constraints"}                 Simple Constraints
 @{" DImode " Link "Machine Modes"}                               Machine Modes
 @{" directory options " Link "Directory Options"}                    Directory Options
 @{" disabling certain registers " Link "Register Basics"}          Register Basics
 @{" dispatch table " Link "Dispatch Tables"}                       Dispatch Tables
 @{" div " Link "Arithmetic"}                                  Arithmetic
 @{" DIVDI3_LIBCALL " Link "Library Calls"}                       Library Calls
 @{" divide instruction, 88k " Link "M88K Options"}              M88K Options
 @{" division " Link "Arithmetic"}                             Arithmetic
 @{" division " Link "Arithmetic"}                             Arithmetic
 @{" division " Link "Arithmetic"}                             Arithmetic
 @{" DIVSI3_LIBCALL " Link "Library Calls"}                       Library Calls
 @{" dollar signs in identifier names " Link "Dollar Signs"}     Dollar Signs
 @{" DOLLARS_IN_IDENTIFIERS " Link "Misc"}               Misc
 @{" DONE " Link "Expander Definitions"}                                 Expander Definitions
 @{" DONT_REDUCE_ADDR " Link "Costs"}                     Costs
 @{" double-word arithmetic " Link "Long Long"}               Long Long
 @{" DOUBLE_TYPE_SIZE " Link "Type Layout"}                     Type Layout
 @{" downward funargs " Link "Nested Functions"}                     Nested Functions
 @{" driver " Link "Driver"}                               Driver
 @{" DWARF_DEBUGGING_INFO " Link "SDB and DWARF"}                 SDB and DWARF
 @{" DYNAMIC_CHAIN_ADDRESS " Link "Frame Layout"}                Frame Layout
 @{" EASY_DIV_EXPR " Link "Misc"}                        Misc
 @{" ELIGIBLE_FOR_EPILOGUE_DELAY " Link "Function Entry"}          Function Entry
 @{" ELIMINABLE_REGS " Link "Elimination"}                      Elimination
 @{" empty constraints " Link "No Constraints"}                    No Constraints
 @{" EMPTY_FIELD_BOUNDARY " Link "Storage Layout"}                 Storage Layout
 @{" ENCODE_SECTION_INFO " Link "Sections"}                  Sections
 @{" ENDFILE_SPEC " Link "Driver"}                         Driver
 @{" endianness " Link "Portability"}                           Portability
 @{" enum machine_mode " Link "Machine Modes"}                    Machine Modes
 @{" enum reg_class " Link "Register Classes"}                       Register Classes
 @{" environment variables " Link "Environment Variables"}                Environment Variables
 @{" epilogue " Link "Function Entry"}                             Function Entry
 @{" eq " Link "Comparisons"}                                   Comparisons
 @{" equal " Link "Comparisons"}                                Comparisons
 @{" eq_attr " Link "Expressions"}                              Expressions
 @{" error " Link "Storage Layout"}                                Storage Layout
 @{" exclamation point " Link "Multi-Alternative"}                    Multi-Alternative
 @{" exclusive-or, bitwise " Link "Arithmetic"}                Arithmetic
 @{" EXECUTABLE_SUFFIX " Link "Config"}                    Config
 @{" exit status and VMS " Link "VMS Misc"}                  VMS Misc
 @{" EXIT_BODY " Link "Misc"}                            Misc
 @{" EXIT_IGNORE_STACK " Link "Function Entry"}                    Function Entry
 @{" expander definitions " Link "Expander Definitions"}                 Expander Definitions
 @{" EXPAND_BUILTIN_SAVEREGS " Link "Varargs"}              Varargs
 @{" explicit register variables " Link "Explicit Reg Vars"}          Explicit Reg Vars
 @{" expression codes " Link "RTL Objects"}                     RTL Objects
 @{" expressions containing statements " Link "Statement Exprs"}    Statement Exprs
 @{" expressions, compound, as lvalues " Link "Lvalues"}    Lvalues
 @{" expressions, conditional, as lvalues " Link "Lvalues"} Lvalues
 @{" expressions, constructor " Link "Constructors"}             Constructors
 @{" expr_list " Link "Insns"}                            Insns
 @{" extended asm " Link "Extended Asm"}                         Extended Asm
 @{" extensible constraints " Link "Simple Constraints"}               Simple Constraints
 @{" extensions, ?: " Link "Lvalues"}                       Lvalues
 @{" extensions, ?: " Link "Conditionals"}                       Conditionals
 @{" extensions, C language " Link "Extensions"}               Extensions
 @{" extern int target_flags " Link "Run-time Target"}              Run-time Target
 @{" external declaration scope " Link "Incompatibilities"}           Incompatibilities
 @{" EXTRA_CC_MODES " Link "Condition Code"}                       Condition Code
 @{" EXTRA_CC_NAMES " Link "Condition Code"}                       Condition Code
 @{" EXTRA_CONSTRAINT " Link "Register Classes"}                     Register Classes
 @{" EXTRA_SECTIONS " Link "Sections"}                       Sections
 @{" EXTRA_SECTION_FUNCTIONS " Link "Sections"}              Sections
 @{" FAIL " Link "Expander Definitions"}                                 Expander Definitions
 @{" FAILURE_EXIT_CODE " Link "Config"}                    Config
 @{" fatal signal " Link "Bug Criteria"}                         Bug Criteria
 @{" features, optional, in system conventions " Link "Run-time Target"} Run-time Target
 @{" ffs " Link "Arithmetic"}                                  Arithmetic
 @{" file name suffix " Link "Overall Options"}                     Overall Options
 @{" file names " Link "Link Options"}                           Link Options
 @{" files and passes of the compiler " Link "Passes"}     Passes
 @{" final pass " Link "Passes"}                           Passes
 @{" FINALIZE_PIC " Link "PIC"}                         PIC
 @{" FINAL_PRESCAN_INSN " Link "Instruction Output"}                   Instruction Output
 @{" FINAL_REG_PARM_STACK_SPACE " Link "Stack Arguments"}           Stack Arguments
 @{" final_scan_insn " Link "Function Entry"}                      Function Entry
 @{" final_sequence " Link "Instruction Output"}                       Instruction Output
 @{" FIRST_INSN_ADDRESS " Link "Insn Lengths"}                   Insn Lengths
 @{" FIRST_PARM_OFFSET " Link "Frame Layout"}                    Frame Layout
 @{" FIRST_PSEUDO_REGISTER " Link "Register Basics"}                Register Basics
 @{" FIRST_STACK_REG " Link "Stack Registers"}                      Stack Registers
 @{" FIRST_VIRTUAL_REGISTER " Link "Regs and Memory"}               Regs and Memory
 @{" fix " Link "Conversions"}                                  Conversions
 @{" fix " Link "Conversions"}                                  Conversions
 @{" fixed register " Link "Register Basics"}                       Register Basics
 @{" FIXED_REGISTERS " Link "Register Basics"}                      Register Basics
 @{" fixed_regs " Link "Register Basics"}                           Register Basics
 @{" FIXUNS_TRUNC_LIKE_FIX_TRUNC " Link "Misc"}          Misc
 @{" flags in RTL expression " Link "Flags"}              Flags
 @{" float " Link "Conversions"}                                Conversions
 @{" FLOATIFY " Link "Library Calls"}                             Library Calls
 @{" floating point format and cross compilation " Link "Cross-compilation"} Cross-compilation
 @{" FLOAT_ARG_TYPE " Link "Library Calls"}                       Library Calls
 @{" float_extend " Link "Conversions"}                         Conversions
 @{" float_truncate " Link "Conversions"}                       Conversions
 @{" FLOAT_TYPE_SIZE " Link "Type Layout"}                      Type Layout
 @{" FLOAT_VALUE_TYPE " Link "Library Calls"}                     Library Calls
 @{" force_reg " Link "Standard Names"}                            Standard Names
 @{" frame layout " Link "Frame Layout"}                         Frame Layout
 @{" FRAME_GROWS_DOWNWARD " Link "Frame Layout"}                 Frame Layout
 @{" frame_pointer_needed " Link "Function Entry"}                 Function Entry
 @{" FRAME_POINTER_REGNUM " Link "Frame Registers"}                 Frame Registers
 @{" FRAME_POINTER_REQUIRED " Link "Elimination"}               Elimination
 @{" frame_pointer_rtx " Link "Frame Registers"}                    Frame Registers
 @{" function attributes " Link "Function Attributes"}                  Function Attributes
 @{" function call conventions " Link "Interface"}            Interface
 @{" function entry and exit " Link "Function Entry"}              Function Entry
 @{" function pointers, arithmetic " Link "Pointer Arith"}        Pointer Arith
 @{" function prototype declarations " Link "Function Prototypes"}      Function Prototypes
 @{" function units, for scheduling " Link "Function Units"}       Function Units
 @{" function, size of pointer to " Link "Pointer Arith"}         Pointer Arith
 @{" function-call insns " Link "Calls"}                  Calls
 @{" functions that have no side effects " Link "Function Attributes"}  Function Attributes
 @{" functions that never return " Link "Function Attributes"}          Function Attributes
 @{" functions, leaf " Link "Leaf Functions"}                      Leaf Functions
 @{" FUNCTION_ARG " Link "Register Arguments"}                         Register Arguments
 @{" FUNCTION_ARG_ADVANCE " Link "Register Arguments"}                 Register Arguments
 @{" FUNCTION_ARG_BOUNDARY " Link "Register Arguments"}                Register Arguments
 @{" FUNCTION_ARG_PADDING " Link "Register Arguments"}                 Register Arguments
 @{" FUNCTION_ARG_PARTIAL_NREGS " Link "Register Arguments"}           Register Arguments
 @{" FUNCTION_ARG_PASS_BY_REFERENCE " Link "Register Arguments"}       Register Arguments
 @{" FUNCTION_ARG_REGNO_P " Link "Register Arguments"}                 Register Arguments
 @{" FUNCTION_BLOCK_PROFILER " Link "Profiling"}              Profiling
 @{" FUNCTION_BOUNDARY " Link "Storage Layout"}                    Storage Layout
 @{" FUNCTION_CONVERSION_BUG " Link "Config"}              Config
 @{" FUNCTION_EPILOGUE " Link "Function Entry"}                    Function Entry
 @{" FUNCTION_INCOMING_ARG " Link "Register Arguments"}                Register Arguments
 @{" FUNCTION_MODE " Link "Misc"}                        Misc
 @{" FUNCTION_OUTGOING_VALUE " Link "Scalar Return"}              Scalar Return
 @{" FUNCTION_PROFILER " Link "Profiling"}                    Profiling
 @{" FUNCTION_PROLOGUE " Link "Function Entry"}                    Function Entry
 @{" FUNCTION_VALUE " Link "Scalar Return"}                       Scalar Return
 @{" FUNCTION_VALUE_REGNO_P " Link "Scalar Return"}               Scalar Return
 @{" GCC_EXEC_PREFIX " Link "Environment Variables"}                      Environment Variables
 @{" ge " Link "Comparisons"}                                   Comparisons
 @{" gencodes " Link "Passes"}                             Passes
 @{" genconfig " Link "Passes"}                            Passes
 @{" generalized lvalues " Link "Lvalues"}                  Lvalues
 @{" general_operand " Link "RTL Template"}                      RTL Template
 @{" GENERAL_REGS " Link "Register Classes"}                         Register Classes
 @{" generating assembler output " Link "Output Statement"}          Output Statement
 @{" generating insns " Link "RTL Template"}                     RTL Template
 @{" genflags " Link "Passes"}                             Passes
 @{" get_attr " Link "Expressions"}                             Expressions
 @{" get_attr_length " Link "Insn Lengths"}                      Insn Lengths
 @{" GET_CLASS_NARROWEST_MODE " Link "Machine Modes"}             Machine Modes
 @{" GET_CODE " Link "RTL Objects"}                             RTL Objects
 @{" get_frame_size " Link "Elimination"}                       Elimination
 @{" get_insns " Link "Insns"}                            Insns
 @{" get_last_insn " Link "Insns"}                        Insns
 @{" GET_MODE " Link "Machine Modes"}                             Machine Modes
 @{" GET_MODE_ALIGNMENT " Link "Machine Modes"}                   Machine Modes
 @{" GET_MODE_BITSIZE " Link "Machine Modes"}                     Machine Modes
 @{" GET_MODE_CLASS " Link "Machine Modes"}                       Machine Modes
 @{" GET_MODE_MASK " Link "Machine Modes"}                        Machine Modes
 @{" GET_MODE_NAME " Link "Machine Modes"}                        Machine Modes
 @{" GET_MODE_NUNITS " Link "Machine Modes"}                      Machine Modes
 @{" GET_MODE_SIZE " Link "Machine Modes"}                        Machine Modes
 @{" GET_MODE_UNIT_SIZE " Link "Machine Modes"}                   Machine Modes
 @{" GET_MODE_WIDER_MODE " Link "Machine Modes"}                  Machine Modes
 @{" GET_RTX_CLASS " Link "Accessors"}                        Accessors
 @{" GET_RTX_FORMAT " Link "Accessors"}                       Accessors
 @{" GET_RTX_LENGTH " Link "Accessors"}                       Accessors
 @{" geu " Link "Comparisons"}                                  Comparisons
 @{" global offset table " Link "Code Gen Options"}                  Code Gen Options
 @{" global register after longjmp " Link "Global Reg Vars"}        Global Reg Vars
 @{" global register allocation " Link "Passes"}           Passes
 @{" global register variables " Link "Global Reg Vars"}            Global Reg Vars
 @{" GLOBALDEF " Link "Global Declarations"}                            Global Declarations
 @{" GLOBALREF " Link "Global Declarations"}                            Global Declarations
 @{" GLOBALVALUEDEF " Link "Global Declarations"}                       Global Declarations
 @{" GLOBALVALUEREF " Link "Global Declarations"}                       Global Declarations
 @{" GNU CC and portability " Link "Portability"}               Portability
 @{" GNU CC command options " Link "Invoking GCC"}               Invoking GCC
 @{" GNU extensions to the C language " Link "Extensions"}     Extensions
 @{" goto with computed label " Link "Labels as Values"}             Labels as Values
 @{" GO_IF_LEGITIMATE_ADDRESS " Link "Addressing Modes"}             Addressing Modes
 @{" GO_IF_MODE_DEPENDENT_ADDRESS " Link "Addressing Modes"}         Addressing Modes
 @{" gp-relative references (MIPS) " Link "MIPS Options"}        MIPS Options
 @{" greater than " Link "Comparisons"}                         Comparisons
 @{" greater than " Link "Comparisons"}                         Comparisons
 @{" greater than " Link "Comparisons"}                         Comparisons
 @{" grouping options " Link "Invoking GCC"}                     Invoking GCC
 @{" gt " Link "Comparisons"}                                   Comparisons
 @{" gtu " Link "Comparisons"}                                  Comparisons
 @{" HANDLE_PRAGMA " Link "Misc"}                        Misc
 @{" hard registers " Link "Regs and Memory"}                       Regs and Memory
 @{" hardware models and configurations, specifying " Link "Submodel Options"} Submodel Options
 @{" HARD_REGNO_MODE_OK " Link "Values in Registers"}                   Values in Registers
 @{" HARD_REGNO_NREGS " Link "Values in Registers"}                     Values in Registers
 @{" HAVE_ATEXIT " Link "Misc"}                          Misc
 @{" HAVE_POST_DECREMENT " Link "Addressing Modes"}                  Addressing Modes
 @{" HAVE_POST_INCREMENT " Link "Addressing Modes"}                  Addressing Modes
 @{" HAVE_PRE_DECREMENT " Link "Addressing Modes"}                   Addressing Modes
 @{" HAVE_PRE_INCREMENT " Link "Addressing Modes"}                   Addressing Modes
 @{" HAVE_PUTENV " Link "Config"}                          Config
 @{" HAVE_VPRINTF " Link "Config"}                         Config
 @{" header files and VMS " Link "Include Files and VMS"}                 Include Files and VMS
 @{" high " Link "Constants"}                                 Constants
 @{" HImode " Link "Machine Modes"}                               Machine Modes
 @{" HOST_BITS_PER_CHAR " Link "Config"}                   Config
 @{" HOST_BITS_PER_INT " Link "Config"}                    Config
 @{" HOST_BITS_PER_LONG " Link "Config"}                   Config
 @{" HOST_BITS_PER_SHORT " Link "Config"}                  Config
 @{" HOST_FLOAT_FORMAT " Link "Config"}                    Config
 @{" HOST_WORDS_BIG_ENDIAN " Link "Config"}                Config
 @{" i386 Options " Link "i386 Options"}                         i386 Options
 @{" IBM RS/6000 Options " Link "RS-6000 Options"}                  RS-6000 Options
 @{" IBM RT options " Link "RT Options"}                       RT Options
 @{" IBM RT PC " Link "Interoperation"}                            Interoperation
 @{" identifier names, dollar signs in " Link "Dollar Signs"}    Dollar Signs
 @{" identifiers, names in assembler code " Link "Asm Labels"} Asm Labels
 @{" identifying source, compiler (88k) " Link "M88K Options"}   M88K Options
 @{" IEEE_FLOAT_FORMAT " Link "Storage Layout"}                    Storage Layout
 @{" if_then_else " Link "Comparisons"}                         Comparisons
 @{" immediate_operand " Link "RTL Template"}                    RTL Template
 @{" IMMEDIATE_PREFIX " Link "Instruction Output"}                     Instruction Output
 @{" IMPLICIT_FIX_EXPR " Link "Misc"}                    Misc
 @{" include files and VMS " Link "Include Files and VMS"}                Include Files and VMS
 @{" INCLUDE_DEFAULTS " Link "Driver"}                     Driver
 @{" inclusive-or, bitwise " Link "Arithmetic"}                Arithmetic
 @{" incompatibilities of GNU CC " Link "Incompatibilities"}          Incompatibilities
 @{" increment operators " Link "Bug Criteria"}                  Bug Criteria
 @{" INDEX_REG_CLASS " Link "Register Classes"}                      Register Classes
 @{" initialization routines " Link "Constructor Output"}              Constructor Output
 @{" initializations in expressions " Link "Constructors"}       Constructors
 @{" initializers with labeled elements " Link "Labeled Elements"}   Labeled Elements
 @{" initializers, non-constant " Link "Initializers"}           Initializers
 @{" INITIALIZE_TRAMPOLINE " Link "Trampolines"}                Trampolines
 @{" INITIAL_ELIMINATION_OFFSET " Link "Elimination"}           Elimination
 @{" INITIAL_FRAME_POINTER_OFFSET " Link "Elimination"}         Elimination
 @{" INIT_CUMULATIVE_ARGS " Link "Register Arguments"}                 Register Arguments
 @{" INIT_CUMULATIVE_INCOMING_ARGS " Link "Register Arguments"}        Register Arguments
 @{" INIT_SECTION_ASM_OP " Link "Sections"}                  Sections
 @{" inline functions " Link "Inline"}                     Inline
 @{" inline functions, omission of " Link "Inline"}        Inline
 @{" inline, automatic " Link "Passes"}                    Passes
 @{" insn " Link "Insns"}                                 Insns
 @{" insn attributes " Link "Insn Attributes"}                      Insn Attributes
 @{" insn canonicalization " Link "Insn Canonicalizations"}                Insn Canonicalizations
 @{" insn lengths, computing " Link "Insn Lengths"}              Insn Lengths
 @{" insn splitting " Link "Insn Splitting"}                       Insn Splitting
 @{" insn-attr.h " Link "Defining Attributes"}                          Defining Attributes
 @{" insns " Link "Insns"}                                Insns
 @{" insns, generating " Link "RTL Template"}                    RTL Template
 @{" insns, recognizing " Link "RTL Template"}                   RTL Template
 @{" INSN_ANNULLED_BRANCH_P " Link "Flags"}               Flags
 @{" INSN_CACHE_DEPTH " Link "Trampolines"}                     Trampolines
 @{" INSN_CACHE_LINE_WIDTH " Link "Trampolines"}                Trampolines
 @{" INSN_CACHE_SIZE " Link "Trampolines"}                      Trampolines
 @{" INSN_CLOBBERS_REGNO_P " Link "Obsolete Register Macros"}                Obsolete Register Macros
 @{" INSN_CODE " Link "Insns"}                            Insns
 @{" INSN_DELETED_P " Link "Flags"}                       Flags
 @{" INSN_FROM_TARGET_P " Link "Flags"}                   Flags
 @{" insn_list " Link "Insns"}                            Insns
 @{" INSN_UID " Link "Insns"}                             Insns
 @{" installation trouble " Link "Trouble"}                 Trouble
 @{" installing GNU CC " Link "Installation"}                    Installation
 @{" installing GNU CC on the 3b1 " Link "3b1 Install"}         3b1 Install
 @{" installing GNU CC on the Sun " Link "Sun Install"}         Sun Install
 @{" installing GNU CC on Unos " Link "Unos Install"}            Unos Install
 @{" installing GNU CC on VMS " Link "VMS Install"}             VMS Install
 @{" instruction attributes " Link "Insn Attributes"}               Insn Attributes
 @{" instruction combination " Link "Passes"}              Passes
 @{" instruction patterns " Link "Patterns"}                 Patterns
 @{" instruction recognizer " Link "Passes"}               Passes
 @{" instruction scheduling " Link "Passes"}               Passes
 @{" instruction scheduling " Link "Passes"}               Passes
 @{" instruction splitting " Link "Insn Splitting"}                Insn Splitting
 @{" integrated " Link "Flags"}                           Flags
 @{" INTEGRATE_THRESHOLD " Link "Misc"}                  Misc
 @{" integrating function code " Link "Inline"}            Inline
 @{" Intel 386 Options " Link "i386 Options"}                    i386 Options
 @{" Interdependence of Patterns " Link "Dependent Patterns"}          Dependent Patterns
 @{" interfacing to GNU CC output " Link "Interface"}         Interface
 @{" INTIFY " Link "Library Calls"}                               Library Calls
 @{" introduction " Link "Top"}                         Top
 @{" INT_TYPE_SIZE " Link "Type Layout"}                        Type Layout
 @{" invalid assembly code " Link "Bug Criteria"}                Bug Criteria
 @{" invalid input " Link "Bug Criteria"}                        Bug Criteria
 @{" in_data " Link "Sections"}                              Sections
 @{" in_struct " Link "Flags"}                            Flags
 @{" in_text " Link "Sections"}                              Sections
 @{" ior " Link "Arithmetic"}                                  Arithmetic
 @{" isinf " Link "Cross-compilation"}                                Cross-compilation
 @{" isnan " Link "Cross-compilation"}                                Cross-compilation
 @{" jump instruction patterns " Link "Jump Patterns"}            Jump Patterns
 @{" jump instructions and set " Link "Side Effects"}            Side Effects
 @{" jump optimization " Link "Passes"}                    Passes
 @{" jump threading " Link "Passes"}                       Passes
 @{" jump_insn " Link "Insns"}                            Insns
 @{" JUMP_LABEL " Link "Insns"}                           Insns
 @{" JUMP_TABLES_IN_TEXT_SECTION " Link "Sections"}          Sections
 @{" keywords, alternate " Link "Alternate Keywords"}                  Alternate Keywords
 @{" known causes of trouble " Link "Trouble"}              Trouble
 @{" labeled elements in initializers " Link "Labeled Elements"}     Labeled Elements
 @{" labels as values " Link "Labels as Values"}                     Labels as Values
 @{" LABEL_NUSES " Link "Insns"}                          Insns
 @{" LABEL_OUTSIDE_LOOP_P " Link "Flags"}                 Flags
 @{" LABEL_PRESERVE_P " Link "Flags"}                     Flags
 @{" label_ref " Link "Constants"}                            Constants
 @{" language dialect options " Link "Dialect Options"}             Dialect Options
 @{" large bit shifts (88k) " Link "M88K Options"}               M88K Options
 @{" large return values " Link "Aggregate Return"}                  Aggregate Return
 @{" LAST_STACK_REG " Link "Stack Registers"}                       Stack Registers
 @{" LAST_VIRTUAL_REGISTER " Link "Regs and Memory"}                Regs and Memory
 @{" ldexp " Link "Cross-compilation"}                                Cross-compilation
 @{" le " Link "Comparisons"}                                   Comparisons
 @{" leaf functions " Link "Leaf Functions"}                       Leaf Functions
 @{" leaf_function " Link "Leaf Functions"}                        Leaf Functions
 @{" leaf_function_p " Link "Standard Names"}                      Standard Names
 @{" LEAF_REGISTERS " Link "Leaf Functions"}                       Leaf Functions
 @{" LEAF_REG_REMAP " Link "Leaf Functions"}                       Leaf Functions
 @{" left rotate " Link "Arithmetic"}                          Arithmetic
 @{" left shift " Link "Arithmetic"}                           Arithmetic
 @{" left shift " Link "Arithmetic"}                           Arithmetic
 @{" LEGITIMATE_CONSTANT_P " Link "Addressing Modes"}                Addressing Modes
 @{" LEGITIMATE_PIC_OPERAND_P " Link "Addressing Modes"}             Addressing Modes
 @{" LEGITIMIZE_ADDRESS " Link "Addressing Modes"}                   Addressing Modes
 @{" length-zero arrays " Link "Zero Length"}                   Zero Length
 @{" less than " Link "Comparisons"}                            Comparisons
 @{" less than or equal " Link "Comparisons"}                   Comparisons
 @{" leu " Link "Comparisons"}                                  Comparisons
 @{" LIBCALL_VALUE " Link "Scalar Return"}                        Scalar Return
 @{" LIBGCC_NEEDS_DOUBLE " Link "Library Calls"}                  Library Calls
 @{" Libraries " Link "Link Options"}                            Link Options
 @{" library subroutine names " Link "Library Calls"}             Library Calls
 @{" LIBRARY_PATH " Link "Environment Variables"}                         Environment Variables
 @{" LIB_SPEC " Link "Driver"}                             Driver
 @{" LIMIT_RELOAD_CLASS " Link "Register Classes"}                   Register Classes
 @{" link options " Link "Link Options"}                         Link Options
 @{" LINK_LIBGCC_SPECIAL " Link "Driver"}                  Driver
 @{" LINK_SPEC " Link "Driver"}                            Driver
 @{" load address instruction " Link "Simple Constraints"}             Simple Constraints
 @{" local labels " Link "Local Labels"}                         Local Labels
 @{" local register allocation " Link "Passes"}            Passes
 @{" local variables in macros " Link "Naming Types"}            Naming Types
 @{" local variables, specifying registers " Link "Local Reg Vars"} Local Reg Vars
 @{" LOCAL_INCLUDE_DIR " Link "Driver"}                    Driver
 @{" LOCAL_LABEL_PREFIX " Link "Instruction Output"}                   Instruction Output
 @{" logical shift " Link "Arithmetic"}                        Arithmetic
 @{" logical-and, bitwise " Link "Arithmetic"}                 Arithmetic
 @{" LOG_LINKS " Link "Insns"}                            Insns
 @{" longjmp " Link "Global Reg Vars"}                              Global Reg Vars
 @{" LONGJMP_RESTORE_FROM_STACK " Link "Elimination"}           Elimination
 @{" LONG_DOUBLE_TYPE_SIZE " Link "Type Layout"}                Type Layout
 @{" LONG_LONG_TYPE_SIZE " Link "Type Layout"}                  Type Layout
 @{" LONG_TYPE_SIZE " Link "Type Layout"}                       Type Layout
 @{" loop optimization " Link "Passes"}                    Passes
 @{" lo_sum " Link "Arithmetic"}                               Arithmetic
 @{" lshift " Link "Arithmetic"}                               Arithmetic
 @{" lshiftrt " Link "Arithmetic"}                             Arithmetic
 @{" lt " Link "Comparisons"}                                   Comparisons
 @{" ltu " Link "Comparisons"}                                  Comparisons
 @{" lvalues, generalized " Link "Lvalues"}                 Lvalues
 @{" M680x0 options " Link "M680x0 Options"}                       M680x0 Options
 @{" M88k options " Link "M88K Options"}                         M88K Options
 @{" machine dependent options " Link "Submodel Options"}            Submodel Options
 @{" machine description macros " Link "Target Macros"}           Target Macros
 @{" machine descriptions " Link "Machine Desc"}                 Machine Desc
 @{" machine mode conversions " Link "Conversions"}             Conversions
 @{" machine modes " Link "Machine Modes"}                        Machine Modes
 @{" macro with variable arguments " Link "Macro Varargs"}        Macro Varargs
 @{" macros containing asm " Link "Extended Asm"}                Extended Asm
 @{" macros, inline alternative " Link "Inline"}           Inline
 @{" macros, local labels " Link "Local Labels"}                 Local Labels
 @{" macros, local variables in " Link "Naming Types"}           Naming Types
 @{" macros, statements in expressions " Link "Statement Exprs"}    Statement Exprs
 @{" macros, target description " Link "Target Macros"}           Target Macros
 @{" macros, types of arguments " Link "Typeof"}           Typeof
 @{" make " Link "Preprocessor Options"}                                 Preprocessor Options
 @{" make_safe_from " Link "Expander Definitions"}                       Expander Definitions
 @{" matching constraint " Link "Simple Constraints"}                  Simple Constraints
 @{" matching operands " Link "Output Template"}                    Output Template
 @{" match_dup " Link "RTL Template"}                            RTL Template
 @{" match_operand " Link "RTL Template"}                        RTL Template
 @{" match_operator " Link "RTL Template"}                       RTL Template
 @{" match_parallel " Link "RTL Template"}                       RTL Template
 @{" match_scratch " Link "RTL Template"}                        RTL Template
 @{" math libraries " Link "Interface"}                       Interface
 @{" math, in RTL " Link "Arithmetic"}                         Arithmetic
 @{" MAX_BITS_PER_WORD " Link "Storage Layout"}                    Storage Layout
 @{" MAX_FIXED_MODE_SIZE " Link "Storage Layout"}                  Storage Layout
 @{" MAX_OFILE_ALIGNMENT " Link "Storage Layout"}                  Storage Layout
 @{" MAX_REGS_PER_ADDRESS " Link "Addressing Modes"}                 Addressing Modes
 @{" MAYBE_REG_PARM_STACK_SPACE " Link "Stack Arguments"}           Stack Arguments
 @{" mcount " Link "Profiling"}                               Profiling
 @{" MD_EXEC_PREFIX " Link "Driver"}                       Driver
 @{" MD_STARTFILE_PREFIX " Link "Driver"}                  Driver
 @{" MD_STARTFILE_PREFIX_1 " Link "Driver"}                Driver
 @{" mem " Link "Regs and Memory"}                                  Regs and Memory
 @{" memory reference, nonoffsettable " Link "Simple Constraints"}     Simple Constraints
 @{" memory references in constraints " Link "Simple Constraints"}     Simple Constraints
 @{" MEMORY_MOVE_COST " Link "Costs"}                     Costs
 @{" MEM_IN_STRUCT_P " Link "Flags"}                      Flags
 @{" MEM_VOLATILE_P " Link "Flags"}                       Flags
 @{" messages, warning " Link "Warning Options"}                    Warning Options
 @{" middle-operands, omitted " Link "Conditionals"}             Conditionals
 @{" minus " Link "Arithmetic"}                                Arithmetic
 @{" MIPS options " Link "MIPS Options"}                         MIPS Options
 @{" mod " Link "Arithmetic"}                                  Arithmetic
 @{" MODDI3_LIBCALL " Link "Library Calls"}                       Library Calls
 @{" mode classes " Link "Machine Modes"}                         Machine Modes
 @{" MODES_TIEABLE_P " Link "Values in Registers"}                      Values in Registers
 @{" MODE_CC " Link "Machine Modes"}                              Machine Modes
 @{" MODE_COMPLEX_FLOAT " Link "Machine Modes"}                   Machine Modes
 @{" MODE_COMPLEX_INT " Link "Machine Modes"}                     Machine Modes
 @{" MODE_FLOAT " Link "Machine Modes"}                           Machine Modes
 @{" MODE_FUNCTION " Link "Machine Modes"}                        Machine Modes
 @{" MODE_INT " Link "Machine Modes"}                             Machine Modes
 @{" MODE_PARTIAL_INT " Link "Machine Modes"}                     Machine Modes
 @{" MODE_RANDOM " Link "Machine Modes"}                          Machine Modes
 @{" modifiers in constraints " Link "Modifiers"}             Modifiers
 @{" MODSI3_LIBCALL " Link "Library Calls"}                       Library Calls
 @{" MOVE_MAX " Link "Misc"}                             Misc
 @{" MOVE_RATIO " Link "Costs"}                           Costs
 @{" MULDI3_LIBCALL " Link "Library Calls"}                       Library Calls
 @{" MULSI3_LIBCALL " Link "Library Calls"}                       Library Calls
 @{" mult " Link "Arithmetic"}                                 Arithmetic
 @{" MULTIBYTE_CHARS " Link "Config"}                      Config
 @{" multiple alternative constraints " Link "Multi-Alternative"}     Multi-Alternative
 @{" multiplication " Link "Arithmetic"}                       Arithmetic
 @{" multiprecision arithmetic " Link "Long Long"}            Long Long
 @{" name augmentation " Link "VMS Misc"}                    VMS Misc
 @{" named patterns and conditions " Link "Patterns"}        Patterns
 @{" names used in assembler code " Link "Asm Labels"}         Asm Labels
 @{" names, pattern " Link "Standard Names"}                       Standard Names
 @{" naming types " Link "Naming Types"}                         Naming Types
 @{" ne " Link "Comparisons"}                                   Comparisons
 @{" neg " Link "Arithmetic"}                                  Arithmetic
 @{" nested functions " Link "Nested Functions"}                     Nested Functions
 @{" nested functions, trampolines for " Link "Trampolines"}    Trampolines
 @{" next_cc0_user " Link "Jump Patterns"}                        Jump Patterns
 @{" NEXT_INSN " Link "Insns"}                            Insns
 @{" NEXT_OBJC_RUNTIME " Link "Library Calls"}                    Library Calls
 @{" nil " Link "RTL Objects"}                                  RTL Objects
 @{" no constraints " Link "No Constraints"}                       No Constraints
 @{" no-op move instructions " Link "Passes"}              Passes
 @{" non-constant initializers " Link "Initializers"}            Initializers
 @{" non-static inline function " Link "Inline"}           Inline
 @{" nongcc_SI_type " Link "Library Calls"}                       Library Calls
 @{" nonoffsettable memory reference " Link "Simple Constraints"}      Simple Constraints
 @{" NON_SAVING_SETJMP " Link "Register Basics"}                    Register Basics
 @{" not " Link "Arithmetic"}                                  Arithmetic
 @{" not equal " Link "Comparisons"}                            Comparisons
 @{" not using constraints " Link "No Constraints"}                No Constraints
 @{" note " Link "Insns"}                                 Insns
 @{" NOTE_INSN_BLOCK_BEG " Link "Insns"}                  Insns
 @{" NOTE_INSN_BLOCK_END " Link "Insns"}                  Insns
 @{" NOTE_INSN_DELETED " Link "Insns"}                    Insns
 @{" NOTE_INSN_FUNCTION_END " Link "Insns"}               Insns
 @{" NOTE_INSN_LOOP_BEG " Link "Insns"}                   Insns
 @{" NOTE_INSN_LOOP_CONT " Link "Insns"}                  Insns
 @{" NOTE_INSN_LOOP_END " Link "Insns"}                   Insns
 @{" NOTE_INSN_LOOP_VTOP " Link "Insns"}                  Insns
 @{" NOTE_INSN_SETJMP " Link "Insns"}                     Insns
 @{" NOTE_LINE_NUMBER " Link "Insns"}                     Insns
 @{" NOTE_SOURCE_FILE " Link "Insns"}                     Insns
 @{" NOTICE_UPDATE_CC " Link "Condition Code"}                     Condition Code
 @{" NO_DOLLAR_IN_LABEL " Link "Misc"}                   Misc
 @{" NO_FUNCTION_CSE " Link "Costs"}                      Costs
 @{" NO_RECURSIVE_FUNCTION_CSE " Link "Costs"}            Costs
 @{" NO_REGS " Link "Register Classes"}                              Register Classes
 @{" NO_STAB_H " Link "Config"}                            Config
 @{" NO_SYS_SIGLIST " Link "Config"}                       Config
 @{" NUM_MACHINE_MODES " Link "Machine Modes"}                    Machine Modes
 @{" N_REG_CLASSES " Link "Register Classes"}                        Register Classes
 @{" OBJC_GEN_METHOD_LABEL " Link "Label Output"}                Label Output
 @{" OBJC_INCLUDE_PATH " Link "Environment Variables"}                    Environment Variables
 @{" OBJC_INT_SELECTORS " Link "Type Layout"}                   Type Layout
 @{" OBJC_PROLOGUE " Link "File Framework"}                        File Framework
 @{" OBJC_SELECTORS_WITHOUT_LABELS " Link "Type Layout"}        Type Layout
 @{" OBJECT_FORMAT_COFF " Link "Constructor Output"}                   Constructor Output
 @{" OBJECT_FORMAT_ROSE " Link "Constructor Output"}                   Constructor Output
 @{" OBSTACK_CHUNK_ALLOC " Link "Config"}                  Config
 @{" OBSTACK_CHUNK_FREE " Link "Config"}                   Config
 @{" OBSTACK_CHUNK_SIZE " Link "Config"}                   Config
 @{" obstack_free " Link "3b1 Install"}                         3b1 Install
 @{" OCS (88k) " Link "M88K Options"}                            M88K Options
 @{" offsettable address " Link "Simple Constraints"}                  Simple Constraints
 @{" old-style function definitions " Link "Function Prototypes"}       Function Prototypes
 @{" omitted middle-operands " Link "Conditionals"}              Conditionals
 @{" ONLY_INT_FIELDS " Link "Config"}                      Config
 @{" open coding " Link "Inline"}                          Inline
 @{" operand access " Link "Accessors"}                       Accessors
 @{" operand constraints " Link "Constraints"}                  Constraints
 @{" operand substitution " Link "Output Template"}                 Output Template
 @{" operands " Link "Patterns"}                             Patterns
 @{" OPTIMIZATION_OPTIONS " Link "Run-time Target"}                 Run-time Target
 @{" optimize options " Link "Optimize Options"}                     Optimize Options
 @{" optional hardware or system features " Link "Run-time Target"} Run-time Target
 @{" options to control warnings " Link "Warning Options"}          Warning Options
 @{" options, code generation " Link "Code Gen Options"}             Code Gen Options
 @{" options, debugging " Link "Debugging Options"}                   Debugging Options
 @{" options, dialect " Link "Dialect Options"}                     Dialect Options
 @{" options, directory search " Link "Directory Options"}            Directory Options
 @{" options, GNU CC command " Link "Invoking GCC"}              Invoking GCC
 @{" options, grouping " Link "Invoking GCC"}                    Invoking GCC
 @{" options, linking " Link "Link Options"}                     Link Options
 @{" options, optimization " Link "Optimize Options"}                Optimize Options
 @{" options, order " Link "Invoking GCC"}                       Invoking GCC
 @{" options, preprocessor " Link "Preprocessor Options"}                Preprocessor Options
 @{" order of options " Link "Invoking GCC"}                     Invoking GCC
 @{" order of register allocation " Link "Allocation Order"}         Allocation Order
 @{" Ordering of Patterns " Link "Pattern Ordering"}                 Pattern Ordering
 @{" ORDER_REGS_FOR_LOCAL_ALLOC " Link "Allocation Order"}           Allocation Order
 @{" other directory, compilation in " Link "Other Dir"}      Other Dir
 @{" OUTGOING_REG_PARM_STACK_SPACE " Link "Stack Arguments"}        Stack Arguments
 @{" output file option " Link "Overall Options"}                   Overall Options
 @{" output of assembler code " Link "File Framework"}             File Framework
 @{" output statements " Link "Output Statement"}                    Output Statement
 @{" output templates " Link "Output Template"}                     Output Template
 @{" output_addr_const " Link "Data Output"}                    Data Output
 @{" output_asm_insn " Link "Output Statement"}                      Output Statement
 @{" overflow while constant folding " Link "Cross-compilation"}      Cross-compilation
 @{" OVERLAPPING_REGNO_P " Link "Obsolete Register Macros"}                  Obsolete Register Macros
 @{" OVERRIDE_OPTIONS " Link "Run-time Target"}                     Run-time Target
 @{" parallel " Link "Side Effects"}                             Side Effects
 @{" parameter forward declaration " Link "Variable Length"}        Variable Length
 @{" parameters, miscellaneous " Link "Misc"}            Misc
 @{" PARM_BOUNDARY " Link "Storage Layout"}                        Storage Layout
 @{" parser generator, Bison " Link "Installation"}              Installation
 @{" parsing pass " Link "Passes"}                         Passes
 @{" passes and files of the compiler " Link "Passes"}     Passes
 @{" passing arguments " Link "Interface"}                    Interface
 @{" PATTERN " Link "Insns"}                              Insns
 @{" pattern conditions " Link "Patterns"}                   Patterns
 @{" pattern names " Link "Standard Names"}                        Standard Names
 @{" Pattern Ordering " Link "Pattern Ordering"}                     Pattern Ordering
 @{" patterns " Link "Patterns"}                             Patterns
 @{" pc " Link "Regs and Memory"}                                   Regs and Memory
 @{" PCC_BITFIELD_TYPE_MATTERS " Link "Storage Layout"}            Storage Layout
 @{" PCC_STATIC_STRUCT_RETURN " Link "Aggregate Return"}             Aggregate Return
 @{" pc_rtx " Link "Regs and Memory"}                               Regs and Memory
 @{" PDImode " Link "Machine Modes"}                              Machine Modes
 @{" peephole optimization " Link "Passes"}                Passes
 @{" peephole optimization, RTL representation " Link "Side Effects"} Side Effects
 @{" peephole optimizer definitions " Link "Peephole Definitions"}       Peephole Definitions
 @{" percent sign " Link "Output Template"}                         Output Template
 @{" perform_... " Link "Library Calls"}                          Library Calls
 @{" PIC " Link "PIC"}                                  PIC
 @{" PIC_OFFSET_TABLE_REGNUM " Link "PIC"}              PIC
 @{" plus " Link "Arithmetic"}                                 Arithmetic
 @{" Pmode " Link "Misc"}                                Misc
 @{" pointer arguments " Link "Function Attributes"}                    Function Attributes
 @{" POINTER_SIZE " Link "Storage Layout"}                         Storage Layout
 @{" portability " Link "Portability"}                          Portability
 @{" position independent code " Link "PIC"}            PIC
 @{" post_dec " Link "Incdec"}                             Incdec
 @{" post_inc " Link "Incdec"}                             Incdec
 @{" pragma " Link "Misc"}                               Misc
 @{" pragma, reason for not using " Link "Function Attributes"}         Function Attributes
 @{" predefined macros " Link "Run-time Target"}                    Run-time Target
 @{" PREDICATE_CODES " Link "Misc"}                      Misc
 @{" PREFERRED_RELOAD_CLASS " Link "Register Classes"}               Register Classes
 @{" preprocessor options " Link "Preprocessor Options"}                 Preprocessor Options
 @{" PRESERVE_DEATH_INFO_REGNO_P " Link "Obsolete Register Macros"}          Obsolete Register Macros
 @{" prev_cc0_setter " Link "Jump Patterns"}                      Jump Patterns
 @{" PREV_INSN " Link "Insns"}                            Insns
 @{" prev_nonnote_insn " Link "Peephole Definitions"}                    Peephole Definitions
 @{" pre_dec " Link "Incdec"}                              Incdec
 @{" pre_inc " Link "Incdec"}                              Incdec
 @{" PRINT_OPERAND " Link "Instruction Output"}                        Instruction Output
 @{" PRINT_OPERAND_ADDRESS " Link "Instruction Output"}                Instruction Output
 @{" PRINT_OPERAND_PUNCT_VALID_P " Link "Instruction Output"}          Instruction Output
 @{" product " Link "Arithmetic"}                              Arithmetic
 @{" PROFILE_BEFORE_PROLOGUE " Link "Profiling"}              Profiling
 @{" profiling, code generation " Link "Profiling"}           Profiling
 @{" program counter " Link "Regs and Memory"}                      Regs and Memory
 @{" prologue " Link "Function Entry"}                             Function Entry
 @{" PROMOTE_PROTOTYPES " Link "Stack Arguments"}                   Stack Arguments
 @{" promotion of formal parameters " Link "Function Prototypes"}       Function Prototypes
 @{" pseudo registers " Link "Regs and Memory"}                     Regs and Memory
 @{" PSImode " Link "Machine Modes"}                              Machine Modes
 @{" PTRDIFF_TYPE " Link "Type Layout"}                         Type Layout
 @{" push address instruction " Link "Simple Constraints"}             Simple Constraints
 @{" PUSH_ROUNDING " Link "Stack Arguments"}                        Stack Arguments
 @{" putenv " Link "Config"}                               Config
 @{" PUT_CODE " Link "RTL Objects"}                             RTL Objects
 @{" PUT_MODE " Link "Machine Modes"}                             Machine Modes
 @{" PUT_REG_NOTE_KIND " Link "Insns"}                    Insns
 @{" PUT_SDB_... " Link "SDB and DWARF"}                          SDB and DWARF
 @{" QImode " Link "Machine Modes"}                               Machine Modes
 @{" question mark " Link "Multi-Alternative"}                        Multi-Alternative
 @{" quotient " Link "Arithmetic"}                             Arithmetic
 @{" r0-relative references (88k) " Link "M88K Options"}         M88K Options
 @{" ranges in case statements " Link "Case Ranges"}            Case Ranges
 @{" read-only strings " Link "Incompatibilities"}                    Incompatibilities
 @{" READONLY_DATA_SECTION " Link "Sections"}                Sections
 @{" REAL_ARITHMETIC " Link "Cross-compilation"}                      Cross-compilation
 @{" REAL_INFINITY " Link "Cross-compilation"}                        Cross-compilation
 @{" REAL_NM_FILE_NAME " Link "Constructor Output"}                    Constructor Output
 @{" REAL_VALUES_EQUAL " Link "Cross-compilation"}                    Cross-compilation
 @{" REAL_VALUES_LESS " Link "Cross-compilation"}                     Cross-compilation
 @{" REAL_VALUE_ATOF " Link "Cross-compilation"}                      Cross-compilation
 @{" REAL_VALUE_FIX " Link "Cross-compilation"}                       Cross-compilation
 @{" REAL_VALUE_FIX_TRUNCATE " Link "Cross-compilation"}              Cross-compilation
 @{" REAL_VALUE_FROM_INT " Link "Cross-compilation"}                  Cross-compilation
 @{" REAL_VALUE_ISINF " Link "Cross-compilation"}                     Cross-compilation
 @{" REAL_VALUE_ISNAN " Link "Cross-compilation"}                     Cross-compilation
 @{" REAL_VALUE_LDEXP " Link "Cross-compilation"}                     Cross-compilation
 @{" REAL_VALUE_NEGATE " Link "Cross-compilation"}                    Cross-compilation
 @{" REAL_VALUE_TO_INT " Link "Cross-compilation"}                    Cross-compilation
 @{" REAL_VALUE_TRUNCATE " Link "Cross-compilation"}                  Cross-compilation
 @{" REAL_VALUE_TYPE " Link "Cross-compilation"}                      Cross-compilation
 @{" REAL_VALUE_UNSIGNED_FIX " Link "Cross-compilation"}              Cross-compilation
 @{" REAL_VALUE_UNSIGNED_FIX_TRUNCATE " Link "Cross-compilation"}     Cross-compilation
 @{" recognizing insns " Link "RTL Template"}                    RTL Template
 @{" recog_operand " Link "Instruction Output"}                        Instruction Output
 @{" reg " Link "Regs and Memory"}                                  Regs and Memory
 @{" register allocation " Link "Passes"}                  Passes
 @{" register allocation order " Link "Allocation Order"}            Allocation Order
 @{" register allocation, stupid " Link "Passes"}          Passes
 @{" register class definitions " Link "Register Classes"}           Register Classes
 @{" register class preference constraints " Link "Class Preferences"} Class Preferences
 @{" register class preference pass " Link "Passes"}       Passes
 @{" register pairs " Link "Values in Registers"}                       Values in Registers
 @{" register positions in frame (88k) " Link "M88K Options"}    M88K Options
 @{" register positions in frame (88k) " Link "M88K Options"}    M88K Options
 @{" Register Transfer Language (RTL) " Link "RTL"}     RTL
 @{" register usage " Link "Registers"}                       Registers
 @{" register use analysis " Link "Passes"}                Passes
 @{" register variable after longjmp " Link "Global Reg Vars"}      Global Reg Vars
 @{" register-to-stack conversion " Link "Passes"}         Passes
 @{" registers " Link "Extended Asm"}                            Extended Asm
 @{" registers arguments " Link "Register Arguments"}                  Register Arguments
 @{" registers for local variables " Link "Local Reg Vars"}        Local Reg Vars
 @{" registers in constraints " Link "Simple Constraints"}             Simple Constraints
 @{" registers, global allocation " Link "Explicit Reg Vars"}         Explicit Reg Vars
 @{" registers, global variables in " Link "Global Reg Vars"}       Global Reg Vars
 @{" REGISTER_MOVE_COST " Link "Costs"}                   Costs
 @{" REGISTER_NAMES " Link "Instruction Output"}                       Instruction Output
 @{" register_operand " Link "RTL Template"}                     RTL Template
 @{" REGISTER_PREFIX " Link "Instruction Output"}                      Instruction Output
 @{" REGNO_OK_FOR_BASE_P " Link "Register Classes"}                  Register Classes
 @{" REGNO_OK_FOR_INDEX_P " Link "Register Classes"}                 Register Classes
 @{" REGNO_REG_CLASS " Link "Register Classes"}                      Register Classes
 @{" regs_ever_live " Link "Function Entry"}                       Function Entry
 @{" REG_ALLOC_ORDER " Link "Allocation Order"}                      Allocation Order
 @{" REG_CC_SETTER " Link "Insns"}                        Insns
 @{" REG_CC_USER " Link "Insns"}                          Insns
 @{" REG_CLASS_CONTENTS " Link "Register Classes"}                   Register Classes
 @{" REG_CLASS_FROM_LETTER " Link "Register Classes"}                Register Classes
 @{" REG_CLASS_NAMES " Link "Register Classes"}                      Register Classes
 @{" REG_DEAD " Link "Insns"}                             Insns
 @{" REG_DEP_ANTI " Link "Insns"}                         Insns
 @{" REG_DEP_OUTPUT " Link "Insns"}                       Insns
 @{" REG_EQUAL " Link "Insns"}                            Insns
 @{" REG_EQUIV " Link "Insns"}                            Insns
 @{" REG_FUNCTION_VALUE_P " Link "Flags"}                 Flags
 @{" REG_INC " Link "Insns"}                              Insns
 @{" REG_LABEL " Link "Insns"}                            Insns
 @{" REG_LEAF_ALLOC_ORDER " Link "Leaf Functions"}                 Leaf Functions
 @{" REG_LIBCALL " Link "Insns"}                          Insns
 @{" REG_LOOP_TEST_P " Link "Flags"}                      Flags
 @{" reg_names " Link "Instruction Output"}                            Instruction Output
 @{" REG_NONNEG " Link "Insns"}                           Insns
 @{" REG_NOTES " Link "Insns"}                            Insns
 @{" REG_NOTE_KIND " Link "Insns"}                        Insns
 @{" REG_NO_CONFLICT " Link "Insns"}                      Insns
 @{" REG_OK_FOR_BASE_P " Link "Addressing Modes"}                    Addressing Modes
 @{" REG_OK_FOR_INDEX_P " Link "Addressing Modes"}                   Addressing Modes
 @{" REG_OK_STRICT " Link "Addressing Modes"}                        Addressing Modes
 @{" REG_PARM_STACK_SPACE " Link "Stack Arguments"}                 Stack Arguments
 @{" REG_RETVAL " Link "Insns"}                           Insns
 @{" REG_UNUSED " Link "Insns"}                           Insns
 @{" REG_USERVAR_P " Link "Flags"}                        Flags
 @{" REG_WAS_0 " Link "Insns"}                            Insns
 @{" relative costs " Link "Costs"}                       Costs
 @{" RELATIVE_PREFIX_NOT_LINKDIR " Link "Driver"}          Driver
 @{" reload pass " Link "Regs and Memory"}                          Regs and Memory
 @{" reloading " Link "Passes"}                            Passes
 @{" reload_completed " Link "Standard Names"}                     Standard Names
 @{" reload_in_progress " Link "Standard Names"}                   Standard Names
 @{" remainder " Link "Arithmetic"}                            Arithmetic
 @{" reporting bugs " Link "Bugs"}                       Bugs
 @{" representation of RTL " Link "RTL"}                RTL
 @{" rest argument (in macro) " Link "Macro Varargs"}             Macro Varargs
 @{" rest_of_compilation " Link "Passes"}                  Passes
 @{" rest_of_decl_compilation " Link "Passes"}             Passes
 @{" return " Link "Side Effects"}                               Side Effects
 @{" return value of main " Link "VMS Misc"}                 VMS Misc
 @{" return values in registers " Link "Scalar Return"}           Scalar Return
 @{" returning aggregate values " Link "Aggregate Return"}           Aggregate Return
 @{" returning structures and unions " Link "Interface"}      Interface
 @{" RETURN_IN_MEMORY " Link "Aggregate Return"}                     Aggregate Return
 @{" RETURN_POPS_ARGS " Link "Stack Arguments"}                     Stack Arguments
 @{" right rotate " Link "Arithmetic"}                         Arithmetic
 @{" right shift " Link "Arithmetic"}                          Arithmetic
 @{" rotate " Link "Arithmetic"}                               Arithmetic
 @{" rotate " Link "Arithmetic"}                               Arithmetic
 @{" rotatert " Link "Arithmetic"}                             Arithmetic
 @{" ROUND_TYPE_ALIGN " Link "Storage Layout"}                     Storage Layout
 @{" ROUND_TYPE_SIZE " Link "Storage Layout"}                      Storage Layout
 @{" RS/6000 Options " Link "RS-6000 Options"}                      RS-6000 Options
 @{" RT options " Link "RT Options"}                           RT Options
 @{" RT PC " Link "Interoperation"}                                Interoperation
 @{" RTL addition " Link "Arithmetic"}                         Arithmetic
 @{" RTL comparison " Link "Arithmetic"}                       Arithmetic
 @{" RTL comparison operations " Link "Comparisons"}            Comparisons
 @{" RTL constant expression types " Link "Constants"}        Constants
 @{" RTL constants " Link "Constants"}                        Constants
 @{" RTL declarations " Link "RTL Declarations"}                     RTL Declarations
 @{" RTL difference " Link "Arithmetic"}                       Arithmetic
 @{" RTL expression " Link "RTL Objects"}                       RTL Objects
 @{" RTL expressions for arithmetic " Link "Arithmetic"}       Arithmetic
 @{" RTL format " Link "Accessors"}                           Accessors
 @{" RTL format characters " Link "Accessors"}                Accessors
 @{" RTL function-call insns " Link "Calls"}              Calls
 @{" RTL generation " Link "Passes"}                       Passes
 @{" RTL insn template " Link "RTL Template"}                    RTL Template
 @{" RTL integers " Link "RTL Objects"}                         RTL Objects
 @{" RTL memory expressions " Link "Regs and Memory"}               Regs and Memory
 @{" RTL object types " Link "RTL Objects"}                     RTL Objects
 @{" RTL postdecrement " Link "Incdec"}                    Incdec
 @{" RTL postincrement " Link "Incdec"}                    Incdec
 @{" RTL predecrement " Link "Incdec"}                     Incdec
 @{" RTL preincrement " Link "Incdec"}                     Incdec
 @{" RTL register expressions " Link "Regs and Memory"}             Regs and Memory
 @{" RTL representation " Link "RTL"}                   RTL
 @{" RTL side effect expressions " Link "Side Effects"}          Side Effects
 @{" RTL strings " Link "RTL Objects"}                          RTL Objects
 @{" RTL structure sharing assumptions " Link "Sharing"}    Sharing
 @{" RTL subtraction " Link "Arithmetic"}                      Arithmetic
 @{" RTL sum " Link "Arithmetic"}                              Arithmetic
 @{" RTL vectors " Link "RTL Objects"}                          RTL Objects
 @{" RTX (See RTL) " Link "RTL Objects"}                        RTL Objects
 @{" RTX_COSTS " Link "Costs"}                            Costs
 @{" RTX_INTEGRATED_P " Link "Flags"}                     Flags
 @{" RTX_UNCHANGING_P " Link "Flags"}                     Flags
 @{" run-time conventions " Link "Interface"}                 Interface
 @{" run-time options " Link "Code Gen Options"}                     Code Gen Options
 @{" run-time target specification " Link "Run-time Target"}        Run-time Target
 @{" saveable_obstack " Link "Addressing Modes"}                     Addressing Modes
 @{" scalars, returned as values " Link "Scalar Return"}          Scalar Return
 @{" SCCS_DIRECTIVE " Link "Misc"}                       Misc
 @{" scheduling, delayed branch " Link "Passes"}           Passes
 @{" scheduling, instruction " Link "Passes"}              Passes
 @{" scheduling, instruction " Link "Passes"}              Passes
 @{" SCHED_GROUP_P " Link "Flags"}                        Flags
 @{" SCmode " Link "Machine Modes"}                               Machine Modes
 @{" scope of a variable length array " Link "Variable Length"}     Variable Length
 @{" scope of declaration " Link "Disappointments"}                 Disappointments
 @{" scope of external declarations " Link "Incompatibilities"}       Incompatibilities
 @{" scratch " Link "Regs and Memory"}                              Regs and Memory
 @{" scratch operands " Link "Regs and Memory"}                     Regs and Memory
 @{" SDB_ALLOW_FORWARD_REFERENCES " Link "SDB and DWARF"}         SDB and DWARF
 @{" SDB_ALLOW_UNKNOWN_REFERENCES " Link "SDB and DWARF"}         SDB and DWARF
 @{" SDB_DEBUGGING_INFO " Link "SDB and DWARF"}                   SDB and DWARF
 @{" SDB_DELIM " Link "SDB and DWARF"}                            SDB and DWARF
 @{" SDB_GENERATE_FAKE " Link "SDB and DWARF"}                    SDB and DWARF
 @{" search path " Link "Directory Options"}                          Directory Options
 @{" SECONDARY_INPUT_RELOAD_CLASS " Link "Register Classes"}         Register Classes
 @{" SECONDARY_OUTPUT_RELOAD_CLASS " Link "Register Classes"}        Register Classes
 @{" SECONDARY_RELOAD_CLASS " Link "Register Classes"}               Register Classes
 @{" SELECT_CC_MODE " Link "Condition Code"}                       Condition Code
 @{" SELECT_RTX_SECTION " Link "Sections"}                   Sections
 @{" SELECT_SECTION " Link "Sections"}                       Sections
 @{" separate directory, compilation in " Link "Other Dir"}   Other Dir
 @{" sequence " Link "Side Effects"}                             Side Effects
 @{" set " Link "Side Effects"}                                  Side Effects
 @{" setjmp " Link "Global Reg Vars"}                               Global Reg Vars
 @{" SETUP_INCOMING_VARARGS " Link "Varargs"}               Varargs
 @{" set_attr " Link "Tagging Insns"}                             Tagging Insns
 @{" set_attr_alternative " Link "Tagging Insns"}                 Tagging Insns
 @{" SET_DEST " Link "Side Effects"}                             Side Effects
 @{" SET_SRC " Link "Side Effects"}                              Side Effects
 @{" SFmode " Link "Machine Modes"}                               Machine Modes
 @{" shared strings " Link "Incompatibilities"}                       Incompatibilities
 @{" shared VMS run time system " Link "VMS Misc"}           VMS Misc
 @{" SHARED_SECTION_ASM_OP " Link "Sections"}                Sections
 @{" sharing of RTL components " Link "Sharing"}            Sharing
 @{" shift " Link "Arithmetic"}                                Arithmetic
 @{" SHIFT_COUNT_TRUNCATED " Link "Misc"}                Misc
 @{" SHORT_TYPE_SIZE " Link "Type Layout"}                      Type Layout
 @{" side effect in ?: " Link "Conditionals"}                    Conditionals
 @{" side effects, macro argument " Link "Statement Exprs"}         Statement Exprs
 @{" signed division " Link "Arithmetic"}                      Arithmetic
 @{" signed maximum " Link "Arithmetic"}                       Arithmetic
 @{" signed minimum " Link "Arithmetic"}                       Arithmetic
 @{" SIGNED_CHAR_SPEC " Link "Driver"}                     Driver
 @{" sign_extend " Link "Conversions"}                          Conversions
 @{" sign_extract " Link "Bit Fields"}                         Bit Fields
 @{" SImode " Link "Machine Modes"}                               Machine Modes
 @{" simple constraints " Link "Simple Constraints"}                   Simple Constraints
 @{" simplifications, arithmetic " Link "Passes"}          Passes
 @{" sizeof " Link "Typeof"}                               Typeof
 @{" SIZE_TYPE " Link "Type Layout"}                            Type Layout
 @{" SLOW_BYTE_ACCESS " Link "Costs"}                     Costs
 @{" SLOW_UNALIGNED_ACCESS " Link "Costs"}                Costs
 @{" SLOW_ZERO_EXTEND " Link "Costs"}                     Costs
 @{" smaller data references (88k) " Link "M88K Options"}        M88K Options
 @{" smaller data references (MIPS) " Link "MIPS Options"}       MIPS Options
 @{" SMALL_REGISTER_CLASSES " Link "Register Classes"}               Register Classes
 @{" smax " Link "Arithmetic"}                                 Arithmetic
 @{" smin " Link "Arithmetic"}                                 Arithmetic
 @{" SPARC options " Link "Sparc Options"}                        Sparc Options
 @{" specified registers " Link "Explicit Reg Vars"}                  Explicit Reg Vars
 @{" specifying compiler version and target machine " Link "Target Options"} Target Options
 @{" specifying hardware config " Link "Submodel Options"}           Submodel Options
 @{" specifying machine version " Link "Target Options"}           Target Options
 @{" specifying registers for local variables " Link "Local Reg Vars"} Local Reg Vars
 @{" speed of instructions " Link "Costs"}                Costs
 @{" splitting instructions " Link "Insn Splitting"}               Insn Splitting
 @{" sqrt " Link "Arithmetic"}                                 Arithmetic
 @{" square root " Link "Arithmetic"}                          Arithmetic
 @{" stack arguments " Link "Stack Arguments"}                      Stack Arguments
 @{" stack frame layout " Link "Frame Layout"}                   Frame Layout
 @{" STACK_BOUNDARY " Link "Storage Layout"}                       Storage Layout
 @{" STACK_DYNAMIC_OFFSET " Link "Frame Layout"}                 Frame Layout
 @{" STACK_GROWS_DOWNWARD " Link "Frame Layout"}                 Frame Layout
 @{" STACK_PARMS_IN_REG_PARM_AREA " Link "Stack Arguments"}         Stack Arguments
 @{" STACK_POINTER_OFFSET " Link "Frame Layout"}                 Frame Layout
 @{" STACK_POINTER_REGNUM " Link "Frame Registers"}                 Frame Registers
 @{" stack_pointer_rtx " Link "Frame Registers"}                    Frame Registers
 @{" STACK_REGS " Link "Stack Registers"}                           Stack Registers
 @{" stage1 " Link "Installation"}                               Installation
 @{" standard pattern names " Link "Standard Names"}               Standard Names
 @{" STANDARD_EXEC_PREFIX " Link "Driver"}                 Driver
 @{" STANDARD_INCLUDE_DIR " Link "Driver"}                 Driver
 @{" STANDARD_STARTFILE_PREFIX " Link "Driver"}            Driver
 @{" STARTFILE_SPEC " Link "Driver"}                       Driver
 @{" STARTING_FRAME_OFFSET " Link "Frame Layout"}                Frame Layout
 @{" statements inside expressions " Link "Statement Exprs"}        Statement Exprs
 @{" STATIC_CHAIN " Link "Frame Registers"}                         Frame Registers
 @{" STATIC_CHAIN_INCOMING " Link "Frame Registers"}                Frame Registers
 @{" STATIC_CHAIN_INCOMING_REGNUM " Link "Frame Registers"}         Frame Registers
 @{" STATIC_CHAIN_REGNUM " Link "Frame Registers"}                  Frame Registers
 @{" STDC_VALUE " Link "Run-time Target"}                           Run-time Target
 @{" storage layout " Link "Storage Layout"}                       Storage Layout
 @{" STORE_FLAG_VALUE " Link "Misc"}                     Misc
 @{" strcpy " Link "Storage Layout"}                               Storage Layout
 @{" strength-reduction " Link "Passes"}                   Passes
 @{" STRICT_ALIGNMENT " Link "Storage Layout"}                     Storage Layout
 @{" strict_low_part " Link "RTL Declarations"}                      RTL Declarations
 @{" string constants " Link "Incompatibilities"}                     Incompatibilities
 @{" structure passing (88k) " Link "M88K Options"}              M88K Options
 @{" structure value address " Link "Aggregate Return"}              Aggregate Return
 @{" structures " Link "Incompatibilities"}                           Incompatibilities
 @{" structures, constructor expression " Link "Constructors"}   Constructors
 @{" structures, returning " Link "Interface"}                Interface
 @{" STRUCTURE_SIZE_BOUNDARY " Link "Storage Layout"}              Storage Layout
 @{" STRUCT_VALUE " Link "Aggregate Return"}                         Aggregate Return
 @{" STRUCT_VALUE_INCOMING " Link "Aggregate Return"}                Aggregate Return
 @{" STRUCT_VALUE_INCOMING_REGNUM " Link "Aggregate Return"}         Aggregate Return
 @{" STRUCT_VALUE_REGNUM " Link "Aggregate Return"}                  Aggregate Return
 @{" stupid register allocation " Link "Passes"}           Passes
 @{" submodel options " Link "Submodel Options"}                     Submodel Options
 @{" subreg " Link "Regs and Memory"}                               Regs and Memory
 @{" SUBREG_REG " Link "Regs and Memory"}                           Regs and Memory
 @{" SUBREG_WORD " Link "Regs and Memory"}                          Regs and Memory
 @{" subscripting " Link "Subscripting"}                         Subscripting
 @{" subscripting and function values " Link "Subscripting"}     Subscripting
 @{" SUCCESS_EXIT_CODE " Link "Config"}                    Config
 @{" Sun installation " Link "Sun Install"}                     Sun Install
 @{" suppressing warnings " Link "Warning Options"}                 Warning Options
 @{" SVr4 " Link "M88K Options"}                                 M88K Options
 @{" SWITCHES_NEED_SPACES " Link "Driver"}                 Driver
 @{" SWITCH_TAKES_ARG " Link "Driver"}                     Driver
 @{" symbolic label " Link "Sharing"}                       Sharing
 @{" symbol_ref " Link "Constants"}                           Constants
 @{" SYMBOL_REF_FLAG " Link "Flags"}                      Flags
 @{" SYMBOL_REF_USED " Link "Flags"}                      Flags
 @{" syntax checking " Link "Warning Options"}                      Warning Options
 @{" SYSTEM_INCLUDE_DIR " Link "Driver"}                   Driver
 @{" sys_siglist " Link "Config"}                          Config
 @{" tagging insns " Link "Tagging Insns"}                        Tagging Insns
 @{" tail recursion optimization " Link "Passes"}          Passes
 @{" target description macros " Link "Target Macros"}            Target Macros
 @{" target machine, specifying " Link "Target Options"}           Target Options
 @{" target options " Link "Target Options"}                       Target Options
 @{" target specifications " Link "Run-time Target"}                Run-time Target
 @{" target-parameter-dependent code " Link "Passes"}      Passes
 @{" TARGET_BELL " Link "Type Layout"}                          Type Layout
 @{" TARGET_BS " Link "Type Layout"}                            Type Layout
 @{" TARGET_CR " Link "Type Layout"}                            Type Layout
 @{" TARGET_FF " Link "Type Layout"}                            Type Layout
 @{" TARGET_FLOAT_FORMAT " Link "Storage Layout"}                  Storage Layout
 @{" TARGET_MEM_FUNCTIONS " Link "Library Calls"}                 Library Calls
 @{" TARGET_NEWLINE " Link "Type Layout"}                       Type Layout
 @{" TARGET_OPTIONS " Link "Run-time Target"}                       Run-time Target
 @{" TARGET_SWITCHES " Link "Run-time Target"}                      Run-time Target
 @{" TARGET_TAB " Link "Type Layout"}                           Type Layout
 @{" TARGET_VERSION " Link "Run-time Target"}                       Run-time Target
 @{" TARGET_VT " Link "Type Layout"}                            Type Layout
 @{" TCmode " Link "Machine Modes"}                               Machine Modes
 @{" termination routines " Link "Constructor Output"}                 Constructor Output
 @{" text_section " Link "Sections"}                         Sections
 @{" TEXT_SECTION_ASM_OP " Link "Sections"}                  Sections
 @{" TFmode " Link "Machine Modes"}                               Machine Modes
 @{" thunks " Link "Nested Functions"}                               Nested Functions
 @{" TImode " Link "Machine Modes"}                               Machine Modes
 @{" TMPDIR " Link "Environment Variables"}                               Environment Variables
 @{" top level of compiler " Link "Passes"}                Passes
 @{" traditional C language " Link "Dialect Options"}               Dialect Options
 @{" TRADITIONAL_RETURN_FLOAT " Link "Scalar Return"}             Scalar Return
 @{" trampolines for nested functions " Link "Trampolines"}     Trampolines
 @{" TRAMPOLINE_ALIGNMENT " Link "Trampolines"}                 Trampolines
 @{" TRAMPOLINE_SIZE " Link "Trampolines"}                      Trampolines
 @{" TRAMPOLINE_TEMPLATE " Link "Trampolines"}                  Trampolines
 @{" TRANSFER_FROM_TRAMPOLINE " Link "Trampolines"}             Trampolines
 @{" TRULY_NOOP_TRUNCATION " Link "Misc"}                Misc
 @{" truncate " Link "Conversions"}                             Conversions
 @{" type alignment " Link "Alignment"}                       Alignment
 @{" typedef names as function parameters " Link "Incompatibilities"} Incompatibilities
 @{" typeof " Link "Typeof"}                               Typeof
 @{" udiv " Link "Arithmetic"}                                 Arithmetic
 @{" UDIVDI3_LIBCALL " Link "Library Calls"}                      Library Calls
 @{" UDIVSI3_LIBCALL " Link "Library Calls"}                      Library Calls
 @{" Ultrix calling convention " Link "Interoperation"}            Interoperation
 @{" umax " Link "Arithmetic"}                                 Arithmetic
 @{" umin " Link "Arithmetic"}                                 Arithmetic
 @{" umod " Link "Arithmetic"}                                 Arithmetic
 @{" UMODDI3_LIBCALL " Link "Library Calls"}                      Library Calls
 @{" UMODSI3_LIBCALL " Link "Library Calls"}                      Library Calls
 @{" unchanging " Link "Flags"}                           Flags
 @{" undefined behavior " Link "Bug Criteria"}                   Bug Criteria
 @{" undefined function value " Link "Bug Criteria"}             Bug Criteria
 @{" underscores in variables in macros " Link "Naming Types"}   Naming Types
 @{" underscores, avoiding (88k) " Link "M88K Options"}          M88K Options
 @{" union, casting to a " Link "Cast to Union"}                  Cast to Union
 @{" unions " Link "Incompatibilities"}                               Incompatibilities
 @{" unions, returning " Link "Interface"}                    Interface
 @{" UNITS_PER_WORD " Link "Storage Layout"}                       Storage Layout
 @{" UNKNOWN_FLOAT_FORMAT " Link "Storage Layout"}                 Storage Layout
 @{" Unos installation " Link "Unos Install"}                    Unos Install
 @{" unreachable code " Link "Passes"}                     Passes
 @{" unshare_all_rtl " Link "Sharing"}                      Sharing
 @{" unsigned division " Link "Arithmetic"}                    Arithmetic
 @{" unsigned greater than " Link "Comparisons"}                Comparisons
 @{" unsigned greater than " Link "Comparisons"}                Comparisons
 @{" unsigned less than " Link "Comparisons"}                   Comparisons
 @{" unsigned less than " Link "Comparisons"}                   Comparisons
 @{" unsigned minimum and maximum " Link "Arithmetic"}         Arithmetic
 @{" unsigned_fix " Link "Conversions"}                         Conversions
 @{" unsigned_float " Link "Conversions"}                       Conversions
 @{" unspec " Link "Side Effects"}                               Side Effects
 @{" unspec_volatile " Link "Side Effects"}                      Side Effects
 @{" use " Link "Side Effects"}                                  Side Effects
 @{" used " Link "Flags"}                                 Flags
 @{" USER_LABEL_PREFIX " Link "Instruction Output"}                    Instruction Output
 @{" USE_C_ALLOCA " Link "Config"}                         Config
 @{" USG " Link "Config"}                                  Config
 @{" value after longjmp " Link "Global Reg Vars"}                  Global Reg Vars
 @{" values, returned by functions " Link "Scalar Return"}        Scalar Return
 @{" varargs implementation " Link "Varargs"}               Varargs
 @{" variable alignment " Link "Alignment"}                   Alignment
 @{" variable attributes " Link "Variable Attributes"}                  Variable Attributes
 @{" variable number of arguments " Link "Macro Varargs"}         Macro Varargs
 @{" variable-length array scope " Link "Variable Length"}          Variable Length
 @{" variable-length arrays " Link "Variable Length"}               Variable Length
 @{" variables in specified registers " Link "Explicit Reg Vars"}     Explicit Reg Vars
 @{" variables, local, in macros " Link "Naming Types"}          Naming Types
 @{" Vax calling convention " Link "Interoperation"}               Interoperation
 @{" VAX options " Link "VAX Options"}                          VAX Options
 @{" VAX_FLOAT_FORMAT " Link "Storage Layout"}                     Storage Layout
 @{" VIRTUAL_INCOMING_ARGS_REGNUM " Link "Regs and Memory"}         Regs and Memory
 @{" VIRTUAL_OUTGOING_ARGS_REGNUM " Link "Regs and Memory"}         Regs and Memory
 @{" VIRTUAL_STACK_DYNAMIC_REGNUM " Link "Regs and Memory"}         Regs and Memory
 @{" VIRTUAL_STACK_VARS_REGNUM " Link "Regs and Memory"}            Regs and Memory
 @{" VMS " Link "Config"}                                  Config
 @{" VMS and case sensitivity " Link "VMS Misc"}             VMS Misc
 @{" VMS and include files " Link "Include Files and VMS"}                Include Files and VMS
 @{" VMS installation " Link "VMS Install"}                     VMS Install
 @{" void pointers, arithmetic " Link "Pointer Arith"}            Pointer Arith
 @{" void, size of pointer to " Link "Pointer Arith"}             Pointer Arith
 @{" VOIDmode " Link "Machine Modes"}                             Machine Modes
 @{" volatil " Link "Flags"}                              Flags
 @{" volatile memory references " Link "Flags"}           Flags
 @{" voting between constraint alternatives " Link "Class Preferences"} Class Preferences
 @{" vprintf " Link "Config"}                              Config
 @{" warning messages " Link "Warning Options"}                     Warning Options
 @{" WCHAR_TYPE " Link "Type Layout"}                           Type Layout
 @{" WCHAR_TYPE_SIZE " Link "Type Layout"}                      Type Layout
 @{" which_alternative " Link "Output Statement"}                    Output Statement
 @{" whitespace " Link "Incompatibilities"}                           Incompatibilities
 @{" WORDS_BIG_ENDIAN " Link "Storage Layout"}                     Storage Layout
 @{" word_mode " Link "Machine Modes"}                            Machine Modes
 @{" WORD_SWITCH_TAKES_ARG " Link "Driver"}                Driver
 @{" XCmode " Link "Machine Modes"}                               Machine Modes
 @{" XCOFF_DEBUGGING_INFO " Link "DBX Options"}                 DBX Options
 @{" XEXP " Link "Accessors"}                                 Accessors
 @{" XFmode " Link "Machine Modes"}                               Machine Modes
 @{" XINT " Link "Accessors"}                                 Accessors
 @{" xor " Link "Arithmetic"}                                  Arithmetic
 @{" XSTR " Link "Accessors"}                                 Accessors
 @{" XVEC " Link "Accessors"}                                 Accessors
 @{" XVECEXP " Link "Accessors"}                              Accessors
 @{" XVECLEN " Link "Accessors"}                              Accessors
 @{" zero division on 88k " Link "M88K Options"}                 M88K Options
 @{" zero-length arrays " Link "Zero Length"}                   Zero Length
 @{" zero_extend " Link "Conversions"}                          Conversions
 @{" zero_extract " Link "Bit Fields"}                         Bit Fields
 @{" \ " Link "Output Template"}                                    Output Template
 @{" __bb_init_func " Link "Profiling"}                       Profiling
 @{" __builtin_args_info " Link "Varargs"}                  Varargs
 @{" __builtin_classify_type " Link "Varargs"}              Varargs
 @{" __builtin_next_arg " Link "Varargs"}                   Varargs
 @{" __builtin_saveregs " Link "Varargs"}                   Varargs

@EndNode

